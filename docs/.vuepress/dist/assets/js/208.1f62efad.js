(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{433:function(s,n,e){"use strict";e.r(n);var a=e(13),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"vue-源码分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-源码分析"}},[s._v("#")]),s._v(" vue 源码分析")]),s._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),e("p",[s._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),s._v(" "),e("h2",{attrs:{id:"内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[s._v("#")]),s._v(" 内容")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E8%AE%BE%E8%AE%A1"}},[s._v("源码目录设计")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E4%BA%8C%E3%80%81%E5%8F%98%E5%8C%96%E4%BE%A6%E6%B5%8B%E7%AF%87"}},[s._v("变化侦测篇")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E8%99%9A%E6%8B%9F-dom-%E7%AF%87"}},[s._v("虚拟 DOM 篇")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%9B%9B%E3%80%81%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91%E7%AF%87"}},[s._v("模板编译篇")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E4%BA%94%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AF%87"}},[s._v("生命周期篇")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%AD%E3%80%81%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95"}},[s._v("实例方法")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E4%B8%83%E3%80%81%E5%85%A8%E5%B1%80-api-%E7%AF%87"}},[s._v("全局 API 篇")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%AB%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E7%AF%87"}},[s._v("过滤器篇")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E4%B9%9D%E3%80%81%E6%8C%87%E4%BB%A4%E7%AF%87"}},[s._v("指令篇")])])]),s._v(" "),e("h3",{attrs:{id:"一、源码目录设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、源码目录设计"}},[s._v("#")]),s._v(" 一、源码目录设计")]),s._v(" "),e("p",[s._v("Vue.js 的源码都在 src 目录下，其目录结构如下。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("├─dist                   # 项目构建后的文件\n├─scripts                # 与项目构建相关的脚本和配置文件\n├─flow                   # flow的类型声明文件\n├─src                    # 项目源代码\n│    ├─complier          # 与模板编译相关的代码\n│    ├─core              # 通用的、与运行平台无关的运行时代码\n│    │  ├─observe        # 实现变化侦测的代码\n│    │  ├─vdom           # 实现virtual dom的代码\n│    │  ├─instance       # Vue.js实例的构造函数和原型方法\n│    │  ├─global-api     # 全局api的代码\n│    │  └─components     # 内置组件的代码\n│    ├─server            # 与服务端渲染相关的代码\n│    ├─platforms         # 特定运行平台的代码，如weex\n│    ├─sfc               # 单文件组件的解析代码\n│    └─shared            # 项目公用的工具代码\n└─test                   # 项目测试代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("ul",[e("li",[s._v("compiler")]),s._v(" "),e("li",[s._v("core")]),s._v(" "),e("li",[s._v("platform")]),s._v(" "),e("li",[s._v("server")]),s._v(" "),e("li",[s._v("sfc")]),s._v(" "),e("li",[s._v("shared")])]),s._v(" "),e("h4",{attrs:{id:"_1-1-compiler"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-compiler"}},[s._v("#")]),s._v(" 1.1 compiler")]),s._v(" "),e("p",[e("code",[s._v("compiler")]),s._v("目录包含"),e("code",[s._v("Vue.js")]),s._v("所有编译相关的代码。它包括把模板解析成 ast 语法树、ast 语法树优化，代码生成等功能。")]),s._v(" "),e("p",[s._v("编译的工作可以在构建时做（借助"),e("code",[s._v("webpack")]),s._v("、"),e("code",[s._v("vue-loader")]),s._v("等辅助插件）；也可以在运行时做，使用包含构建功能的"),e("code",[s._v("vue.js")]),s._v("。显然，编译是一项耗性能的工作，所以更推荐前者——离线编译。")]),s._v(" "),e("h4",{attrs:{id:"_1-2-core"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-core"}},[s._v("#")]),s._v(" 1.2 core")]),s._v(" "),e("p",[e("code",[s._v("core")]),s._v("目录包含了"),e("code",[s._v("Vue.js")]),s._v("的核心代码，包括内置组件、全局 API 封装，Vue 实例化、观察者、虚拟 DOM、工具函数等等。")]),s._v(" "),e("p",[s._v("这里的代码可谓是 Vue.js 的灵魂，也是我们之后需要重点分析的地方")]),s._v(" "),e("h4",{attrs:{id:"_1-3-platform"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-platform"}},[s._v("#")]),s._v(" 1.3 platform")]),s._v(" "),e("p",[e("code",[s._v("Vue.js")]),s._v("是一个跨平台的"),e("code",[s._v("MVVM")]),s._v("框架，它可以跑在"),e("code",[s._v("web")]),s._v("上，也可以配合"),e("code",[s._v("weex")]),s._v("跑在"),e("code",[s._v("native")]),s._v("客户端上。"),e("code",[s._v("platform")]),s._v("是 "),e("code",[s._v("Vue.js")]),s._v("的入口，2 个目录代表 2 个主要入口，分别打包成运行在"),e("code",[s._v("web")]),s._v("上和"),e("code",[s._v("weex")]),s._v("上的"),e("code",[s._v("Vue.js")]),s._v("。")]),s._v(" "),e("p",[s._v("我们会重点分析"),e("code",[s._v("web")]),s._v("入口打包后的"),e("code",[s._v("Vue.js")]),s._v("，对于"),e("code",[s._v("weex")]),s._v("入口打包的"),e("code",[s._v("Vue.js")]),s._v("，感兴趣的同学可以自行研究。")]),s._v(" "),e("h4",{attrs:{id:"_1-4-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-server"}},[s._v("#")]),s._v(" 1.4 server")]),s._v(" "),e("p",[e("code",[s._v("Vue.js 2.0")]),s._v("支持了服务端渲染，所有服务端渲染相关的逻辑都在这个目录下。注意：这部分代码是跑在服务端的"),e("code",[s._v("Node.js")]),s._v("，不要和跑在浏览器端的"),e("code",[s._v("Vue.js")]),s._v("混为一谈。")]),s._v(" "),e("p",[s._v("服务端渲染主要的工作是把组件渲染为服务器端的"),e("code",[s._v("HTML")]),s._v('字符串，将它们直接发送到浏览器，最后将静态标记"混合"为客户端上完全交互的应用程序。')]),s._v(" "),e("h4",{attrs:{id:"_1-5-sfc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-sfc"}},[s._v("#")]),s._v(" 1.5 sfc")]),s._v(" "),e("p",[s._v("通常我们开发"),e("code",[s._v("Vue.js")]),s._v("都会借助"),e("code",[s._v("webpack")]),s._v("构建， 然后通过"),e("code",[s._v(".vue")]),s._v("单文件来编写组件。")]),s._v(" "),e("p",[s._v("这个目录下的代码逻辑会把"),e("code",[s._v(".vue")]),s._v("文件内容解析成一个"),e("code",[s._v("JavaScript")]),s._v("的对象。")]),s._v(" "),e("h4",{attrs:{id:"_1-6-shared"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-shared"}},[s._v("#")]),s._v(" 1.6 shared")]),s._v(" "),e("p",[e("code",[s._v("Vue.js")]),s._v("会定义一些工具方法，这里定义的工具方法都是会被浏览器端的"),e("code",[s._v("Vue.js")]),s._v("和服务端的"),e("code",[s._v("Vue.js")]),s._v("所共享的。")]),s._v(" "),e("h3",{attrs:{id:"二、变化侦测篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、变化侦测篇"}},[s._v("#")]),s._v(" 二、变化侦测篇")]),s._v(" "),e("ul",[e("li",[s._v("Object 的变化侦测")]),s._v(" "),e("li",[s._v("Array 的变化侦测")]),s._v(" "),e("li",[s._v("变化侦测的 API 实现")])]),s._v(" "),e("h4",{attrs:{id:"_2-1-object-的变化侦测"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-object-的变化侦测"}},[s._v("#")]),s._v(" 2.1 Object 的变化侦测")]),s._v(" "),e("p",[e("strong",[s._v("使用 Object 数据变得“可观测”")])]),s._v(" "),e("p",[s._v("数据的每次读和写能够被我们看的见，即我们能够知道数据什么时候被读取了或数据什么时候被改写了，我们将其称为数据变的“可观测”。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 源码位置：src/core/observer/index.js\n\n/**\n *  Observer类会通过递归的方式把一个对象的所有属性都转化成可观测对象\n */\nexport class Observer {\n  constructor (value: any) {\n    this.value = value\n    this.dep = new Dep()\n    this.vmCount = 0\n    // 给value新增一个__ob__属性，值为该value的Observer实例\n    //\n    def(value, '__ob__', this)\n    if (Array.isArray(value)) {\n      if (hasProto) {\n        protoAugment(value, arrayMethods)\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys)\n      }\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n  walk (obj: Object) {\n    const keys = Object.keys(obj)\n    for (let i = 0; i < keys.length; i++) {\n      defineReactive(obj, keys[i])\n    }\n  }\n}\n\n\n/**\n * 使一个对象转化成可观测对象\n * @param { Object } obj 对象\n * @param { String } key 对象的key\n * @param { Any } val 对象的某个key的值\n */\nexport function defineReactive (\n  obj: Object,\n  key: string,\n  val: any,\n  customSetter?: ?Function,\n  shallow?: boolean\n) {\n  const dep = new Dep()\n\n  const property = Object.getOwnPropertyDescriptor(obj, key)\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  const getter = property && property.get\n  const setter = property && property.set\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key]\n  }\n\n    // 递归调用，判断属性值是否是对象\n  let childOb = !shallow && observe(val)\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend()\n        if (childOb) {\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) return\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify()\n    }\n  })\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br"),e("span",{staticClass:"line-number"},[s._v("86")]),e("br"),e("span",{staticClass:"line-number"},[s._v("87")]),e("br"),e("span",{staticClass:"line-number"},[s._v("88")]),e("br"),e("span",{staticClass:"line-number"},[s._v("89")]),e("br"),e("span",{staticClass:"line-number"},[s._v("90")]),e("br"),e("span",{staticClass:"line-number"},[s._v("91")]),e("br"),e("span",{staticClass:"line-number"},[s._v("92")]),e("br"),e("span",{staticClass:"line-number"},[s._v("93")]),e("br"),e("span",{staticClass:"line-number"},[s._v("94")]),e("br"),e("span",{staticClass:"line-number"},[s._v("95")]),e("br"),e("span",{staticClass:"line-number"},[s._v("96")]),e("br"),e("span",{staticClass:"line-number"},[s._v("97")]),e("br"),e("span",{staticClass:"line-number"},[s._v("98")]),e("br"),e("span",{staticClass:"line-number"},[s._v("99")]),e("br"),e("span",{staticClass:"line-number"},[s._v("100")]),e("br"),e("span",{staticClass:"line-number"},[s._v("101")]),e("br")])]),e("p",[e("strong",[s._v("什么是依赖收集")])]),s._v(" "),e("p",[s._v("视图里谁用到了这个数据就更新谁，我们换个优雅说法：我们把“谁用到了这个数据”称为“谁依赖了这个数据”，我们给每个数据都建一个依赖数组，谁依赖了这个数据我们就把谁放入这个依赖数组中，那么当这个数据发生变化的时候，我们就去它对应的依赖数据中，把每个依赖都通知一遍，告诉他们：“你们依赖的数据变啦，你们该更新啦！”。这个过程就是依赖收集。")]),s._v(" "),e("p",[e("strong",[s._v("何时收集依赖？何时通知依赖更新？")])]),s._v(" "),e("p",[s._v("在 getter 中收集依赖，在 setter 中通知依赖更新。")]),s._v(" "),e("p",[e("strong",[s._v("把依赖收集到哪里")])]),s._v(" "),e("p",[s._v("我们给每个数据都建一个依赖数组，谁依赖了这个数据我们就把谁放入这个依赖数组中。单单用一个数组来存放依赖的")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export default class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n\n  constructor () {\n    this.id = uid++\n    this.subs = []\n  }\n\n  addSub (sub: Watcher) {\n    this.subs.push(sub)\n  }\n\n  removeSub (sub: Watcher) {\n    remove(this.subs, sub)\n  }\n\n    // 订阅\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n    // 通知更新\n  notify () {\n    // 转化成数组\n    const subs = this.subs.slice()\n    if (process.env.NODE_ENV !== 'production' && !config.async) {\n      subs.sort((a, b) => a.id - b.id)\n    }\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br")])]),e("p",[s._v("有了依赖管理器后，我们就可以在 getter 中收集依赖，在 setter 中通知依赖更新了，代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function defineReactive (obj,key,val){\n  const dep = new Dep()\n\n  const property = Object.getOwnPropertyDescriptor(obj, key)\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  const getter = property && property.get\n  const setter = property && property.set\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key]\n  }\n\n  let childOb = !shallow && observe(val)\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend()\n        if (childOb) {\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) return\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      dep.notify()\n    }\n  })\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br")])]),e("p",[s._v("在上述代码中，我们在"),e("code",[s._v("getter")]),s._v("中调用了"),e("code",[s._v("dep.depend()")]),s._v("方法收集依赖，在"),e("code",[s._v("setter")]),s._v("中调用"),e("code",[s._v("dep.notify()")]),s._v("方法通知所有依赖更新。")]),s._v(" "),e("p",[e("strong",[s._v("依赖到底是谁")])]),s._v(" "),e("p",[s._v("上面我们明白了什么是依赖？何时收集依赖？以及收集的依赖存放到何处？那么我们收集的依赖到底是谁？")]),s._v(" "),e("p",[s._v("其实在"),e("code",[s._v("Vue")]),s._v("中还实现了一个叫做"),e("code",[s._v("Watcher")]),s._v("的类，而"),e("code",[s._v("Watcher")]),s._v("类的实例就是我们上面所说的那个“谁”。换句话说就是：谁用了数据，谁就是依赖，我们就为谁创建一个"),e("code",[s._v("Watcher")]),s._v("实例。在之后数据变化时，我们不直接去通知依赖更新，而通知依赖对应的"),e("code",[s._v("Watch")]),s._v("实例，由"),e("code",[s._v("Watcher")]),s._v("实例去通知真正的视图。")]),s._v(" "),e("p",[e("code",[s._v("Watcher")]),s._v("类的具体实现如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export default class Watcher {\n  constructor (vm,expOrFn,cb) {\n    this.vm = vm;\n    this.cb = cb;\n    this.getter = parsePath(expOrFn)\n    this.value = this.get()\n  }\n  get () {\n    window.target = this;\n    const vm = this.vm\n    let value = this.getter.call(vm, vm)\n    window.target = undefined;\n    return value\n  }\n  update () {\n    const oldValue = this.value\n    this.value = this.get()\n    this.cb.call(this.vm, this.value, oldValue)\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[e("code",[s._v("Watcher")]),s._v("类的代码实现逻辑：")]),s._v(" "),e("ol",[e("li",[s._v("当实例化"),e("code",[s._v("Watcher")]),s._v("类时，会先执行其构造函数；")]),s._v(" "),e("li",[s._v("在构造函数中调用了"),e("code",[s._v("this.get()")]),s._v("实例方法；")]),s._v(" "),e("li",[s._v("在"),e("code",[s._v("get()")]),s._v("方法中，首先通过"),e("code",[s._v("window.target = this")]),s._v("把实例自身赋给了全局的一个唯一对象"),e("code",[s._v("window.target")]),s._v("上，然后通过"),e("code",[s._v("let value = this.getter.call(vm,vm)")]),s._v("获取一下被依赖的数据，获取被依赖数据的目的是触发该数据上面的"),e("code",[s._v("getter")]),s._v("，上文我们说过，在"),e("code",[s._v("getter")]),s._v("里会调用"),e("code",[s._v("dep.depend()")]),s._v("收集依赖，而在"),e("code",[s._v("dep.depend()")]),s._v("中取到挂载"),e("code",[s._v("window.target")]),s._v("上的值并将其存入依赖数组中，在"),e("code",[s._v("get()")]),s._v("方法最后将"),e("code",[s._v("window.target")]),s._v("释放掉。")]),s._v(" "),e("li",[s._v("而当数据变化时，会触发数据的"),e("code",[s._v("setter")]),s._v("，在"),e("code",[s._v("setter")]),s._v("中调用了"),e("code",[s._v("dep.notify()")]),s._v("方法，在"),e("code",[s._v("dep.notify()")]),s._v("方法中，遍历所有依赖(即 watcher 实例)，执行依赖的"),e("code",[s._v("update()")]),s._v("方法，也就是"),e("code",[s._v("Watcher")]),s._v("类中的"),e("code",[s._v("update()")]),s._v("实例方法，在"),e("code",[s._v("update()")]),s._v("方法中调用数据变化的更新回调函数，从而更新视图")])]),s._v(" "),e("p",[s._v("总结一下："),e("code",[s._v("Watcher")]),s._v("先把自己设置到全局唯一的指定位置("),e("code",[s._v("window.target")]),s._v(")，然后读取数据。因为读取了数据，所以会触发这个数据的"),e("code",[s._v("getter")]),s._v("。接着，在"),e("code",[s._v("getter")]),s._v("中就会从全局唯一的那个位置读取当前正在读取数据的"),e("code",[s._v("Watcher")]),s._v("，并把这个"),e("code",[s._v("wather")]),s._v("收集到"),e("code",[s._v("Dep")]),s._v("中去。收集好之后，当数据发生变化时，会向"),e("code",[s._v("Dep")]),s._v("中的每个"),e("code",[s._v("Wather")]),s._v("发送通知。通过这样的方式。"),e("code",[s._v("Wather")]),s._v("可以主动去订阅任意一个数据的变化。")]),s._v(" "),e("p",[e("strong",[s._v("不足之处")])]),s._v(" "),e("p",[s._v("虽然我们通过"),e("code",[s._v("Object.defineProperty")]),s._v("方法实现了对"),e("code",[s._v("object")]),s._v("数据的可观测，但是这个方法仅仅只能观测到"),e("code",[s._v("object")]),s._v("数据的取值及设置值，当我们向"),e("code",[s._v("object")]),s._v("数据里添加一对新的"),e("code",[s._v("key/value")]),s._v("或删除一对已有的"),e("code",[s._v("key/value")]),s._v("时，它是无法观测到的，导致当我们对"),e("code",[s._v("object")]),s._v("数据添加或删除时，无法通知依赖，无法驱动视力进行响应式更新。")]),s._v(" "),e("p",[e("code",[s._v("Vue")]),s._v("也注意到了这一点，为了解决这一问题，"),e("code",[s._v("Vue")]),s._v("增加了两个全局 API："),e("code",[s._v("Vue.set")]),s._v("和"),e("code",[s._v("Vue.delete")]),s._v("。")]),s._v(" "),e("p",[e("strong",[s._v("总结")])]),s._v(" "),e("p",[s._v("我们通过"),e("code",[s._v("Object.defineProperty")]),s._v("方法实现了对"),e("code",[s._v("object")]),s._v("数据的可观测，并且封装了"),e("code",[s._v("Observer")]),s._v("类，让我们能够方便的把"),e("code",[s._v("object")]),s._v("数据中的所有属性（包括子属性）都转换成"),e("code",[s._v("getter/setter")]),s._v("的形式来侦测变化。")]),s._v(" "),e("p",[s._v("其整个流程大致如下：")]),s._v(" "),e("ol",[e("li",[e("code",[s._v("Data")]),s._v("通过"),e("code",[s._v("observer")]),s._v("转换成了"),e("code",[s._v("getter/setter")]),s._v("的形式来追踪变化。")]),s._v(" "),e("li",[s._v("当外界通过"),e("code",[s._v("Watcher")]),s._v("读取数据时，会触发"),e("code",[s._v("getter")]),s._v("从而将"),e("code",[s._v("Watcher")]),s._v("添加到依赖中。")]),s._v(" "),e("li",[s._v("当数据发生了变化时，会触发"),e("code",[s._v("setter")]),s._v("，从而向"),e("code",[s._v("Dep")]),s._v("'中的依赖（vcb 即 Watcher）发送通知。")]),s._v(" "),e("li",[e("code",[s._v("Watcher")]),s._v("接收到通知后，会向外界发送能知，变化通知到外界后可能会触发视图更新，也有可能触发某个回调数等。")])]),s._v(" "),e("h4",{attrs:{id:"_2-2-array-的变化侦测"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-array-的变化侦测"}},[s._v("#")]),s._v(" 2.2 Array 的变化侦测")]),s._v(" "),e("p",[s._v("上一节文章中我们介绍了"),e("code",[s._v("Object")]),s._v("数据的变化侦测方式，本节我们来看一下对"),e("code",[s._v("Array")]),s._v("型数据的变化"),e("code",[s._v("Vue")]),s._v("是如何进行侦测的。")]),s._v(" "),e("p",[s._v("我们知道，"),e("code",[s._v("Object.defineProperty")]),s._v("监测"),e("code",[s._v("Object")]),s._v("型数据时是给"),e("code",[s._v("Object")]),s._v("型数据的每个"),e("code",[s._v("key/value")]),s._v("添加上了"),e("code",[s._v("getter")]),s._v("和"),e("code",[s._v("setter")]),s._v("，这样，对于"),e("code",[s._v("Object")]),s._v("型数据我们再通过"),e("code",[s._v("key")]),s._v("值取值或设置值时就可以被监测到。")]),s._v(" "),e("p",[s._v("数组并不是只能由索引值来操作数组，更常用的操作数组的方法是使用数组原型上的一些方法如"),e("code",[s._v("push")]),s._v("，"),e("code",[s._v("shift")]),s._v("等来操作数组，当使用这些数据原型方法来数组时，"),e("code",[s._v("Object.defineProperty")]),s._v("就监测不到了，所以"),e("code",[s._v("Vue")]),s._v("对"),e("code",[s._v("Array")]),s._v("型数据单独设计了数据监测方式。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator (...args) {\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify()\n    return result\n  })\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br")])]),e("p",[e("strong",[s._v("数组方法拦截器")])]),s._v(" "),e("p",[s._v("在"),e("code",[s._v("Vue")]),s._v("中创建了一个数组方法拦截器，它拦截在数组实例与"),e("code",[s._v("Array.prototype")]),s._v("之间，在拦截器内重写了操作数组的一些方法，当数组实例使用操作数组方法时，其实使用的是拦截器中重写的方法，而不再使用"),e("code",[s._v("Array.prototype")]),s._v("上的原生方法。如下图所示：")]),s._v(" "),e("p",[e("img",{attrs:{src:"vue12.png",alt:"images"}})]),s._v(" "),e("p",[s._v("经过整理，"),e("code",[s._v("Array")]),s._v("原型中可以改变数组自身内容的方法有 7 个，分别是："),e("code",[s._v("push")]),s._v("、"),e("code",[s._v("pop")]),s._v("、"),e("code",[s._v("shift")]),s._v("、"),e("code",[s._v("unshift")]),s._v("、"),e("code",[s._v("splice")]),s._v("、"),e("code",[s._v("sort")]),s._v("、"),e("code",[s._v("reverse")]),s._v("。源码中的拦截器代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 源码位置：/src/core/observer/array.js\n\nconst arrayProto = Array.prototype\n// 创建一个对象作为拦截器\nexport const arrayMethods = Object.create(arrayProto)\n\n// 改变数组自身内容的7个方法\nconst methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  const original = arrayProto[method]      // 缓存原生方法\n  Object.defineProperty(arrayMethods, method, {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value:function mutator(...args){\n      const result = original.apply(this, args)\n      return result\n    }\n  })\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br")])]),e("p",[s._v("首先创建了继承自"),e("code",[s._v("Array")]),s._v("原型的空对象"),e("code",[s._v("arrayMethods")]),s._v("，接着在"),e("code",[s._v("arrayMethods")]),s._v("上使用"),e("code",[s._v("object.defineProperty")]),s._v("方法将那些可以改变数组自身的 7 个方法遍历逐个进行封装。最后，当我们使用"),e("code",[s._v("push")]),s._v("方法的时候，其实用的是"),e("code",[s._v("arrayMethods.push")]),s._v("，而"),e("code",[s._v("arrayMethods.push")]),s._v("就是封装的新函数"),e("code",[s._v("mutator")]),s._v("，也就是说，实际上执行的是函数"),e("code",[s._v("mutator")]),s._v("，而"),e("code",[s._v("mutator")]),s._v("函数的内部执行了"),e("code",[s._v("original")]),s._v("函数，这个"),e("code",[s._v("original")]),s._v("函数就是"),e("code",[s._v("Array.prototype")]),s._v("上对应的原生方法。那么，接下我们就可以在"),e("code",[s._v("mutator")]),s._v("函数中做一些其他的事，比如说发送变化通知。")]),s._v(" "),e("p",[e("strong",[s._v("使用拦截器")])]),s._v(" "),e("p",[s._v("我们把撞拦截器做好还不够，还要把它挂载到数组实例与"),e("code",[s._v("Array.prototype")]),s._v("之间，这样拦截器才能够生效。")]),s._v(" "),e("p",[s._v("其实挂载不难，我们只需数据的"),e("code",[s._v("__proto__")]),s._v(" 属性设置为拦截器"),e("code",[s._v("arrayMethods")]),s._v("即可，源码实现如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 源码位置：/src/core/observer/index.js\nexport class Observer {\n  constructor (value) {\n    this.value = value\n    if (Array.isArray(value)) {\n      if (hasProto) {\n        protoAugment(value, arrayMethods)\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys)\n      }\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n}\n// 能力检测：判断__proto__是否可用，因为有的浏览器不支持该属性\nexport const hasProto = '__proto__' in {}\n\nconst arrayKeys = Object.getOwnPropertyNames(arrayMethods)\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src: Object, keys: any) {\n  target.__proto__ = src\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target: Object, src: Object, keys: Array<string>) {\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i]\n    def(target, key, src[key])\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br")])]),e("p",[s._v("上面代码中首先判断了浏览器是否支持"),e("code",[s._v("__proto__")]),s._v("，如果支持，则调用"),e("code",[s._v("protoAugment")]),s._v("函数把"),e("code",[s._v("value__proto__ = arrayMethods")]),s._v("；如果不支持，则调用"),e("code",[s._v("copyAugment")]),s._v("函数把拦截器中重写的 7 个方法循环加入到"),e("code",[s._v("value")]),s._v("上。")]),s._v(" "),e("p",[s._v("拦截器生效以后，当数组数据再发生变化时，我们就可以在拦截器中通知变化了，也就是说现在我们就可以知道数组数据何时发生变化了。")]),s._v(" "),e("p",[e("strong",[s._v("数组新增元素的侦测")])]),s._v(" "),e("p",[s._v("如果向数组里新增一个元素的话，我们可以也需要将新增的这个元素转化成可侦测的响应式数据。")]),s._v(" "),e("p",[s._v("这个实现起来也很容易，我们只需要拿到新增的这个元素，然后调用"),e("code",[s._v("observe")]),s._v("函数将其转化即可。我们知道，可以向数组内新增元素的方法有 3 个，分别是："),e("code",[s._v("push")]),s._v("、"),e("code",[s._v("unshift")]),s._v("、"),e("code",[s._v("splice")]),s._v("。我们需对这 3 中方法分别处理，拿到新增的元素，再将其转化即可。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("methodsToPatch.forEach(function (method) {\n  // cache original method\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator (...args) {\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args   // 如果是push或unshift方法，那么传入参数就是新增的元素\n        break\n      case 'splice':\n        inserted = args.slice(2) // 如果是splice方法，那么传入参数列表中下标为2的就是新增的元素\n        break\n    }\n    if (inserted) ob.observeArray(inserted) // 调用observe函数将新增的元素转化成响应式\n    // notify change\n    ob.dep.notify()\n    return result\n  })\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("p",[s._v("在上面拦截器定义代码中，如果是"),e("code",[s._v("push")]),s._v("或"),e("code",[s._v("unshift")]),s._v("方法，那么传入参数就是新增的元素；如果"),e("code",[s._v("splice")]),s._v("方法，那么传入参数列表中下标为 2 的就是新增的元素，拿到新增的元素后，就可以"),e("code",[s._v("observe")]),s._v("函数将新增的元素转化成响应的了。")]),s._v(" "),e("p",[e("strong",[s._v("深度侦测")])]),s._v(" "),e("p",[s._v("在"),e("code",[s._v("Vue")]),s._v("中，不论是"),e("code",[s._v("Object")]),s._v("型数组据还是"),e("code",[s._v("Array")]),s._v("型数据所实现的数据变化侦测都是深度侦测，所谓深度侦测就是不但要侦测数据自身的变化，还要侦测数据中所有子数据的变化。举个例子：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let arr = [{\n    name:'NLRX',\n    age:'18'\n}]\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("数组中包含了一个对象，如果该对象的某个属性发生了变化也应该被侦测到，这就是深度侦测。")]),s._v(" "),e("p",[s._v("对于"),e("code",[s._v("Array")]),s._v("型数据，调用了"),e("code",[s._v("observeArray()")]),s._v("方法，该方法内部会遍历数组中的每一个元素，然后通过调用"),e("code",[s._v("observe")]),s._v("函数将每一个元素都转化成可侦测的响应式数据。")]),s._v(" "),e("p",[e("strong",[s._v("不足之处")])]),s._v(" "),e("p",[s._v("对于数组变化侦测是通过拦截器实现的，也就是说只要是通过数组原型上的方法对数组进行操作就都可以侦测到，但是别忘了，我们在日常开发中，还可以通过数组的下标来操作数据，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let arr = [1,2,3]\narr[0] = 5;       // 通过数组下标修改数组中的数据\narr.length = 0    // 通过修改数组长度清空数组\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("而使用上述鸽子中的操作方式来修改数组是无法侦测到的。同样，"),e("code",[s._v("Vue")]),s._v("也注意到了这个问题，为了解决这一问题，"),e("code",[s._v("Vue")]),s._v("增加了两个全局 API："),e("code",[s._v("Vue.set")]),s._v("和"),e("code",[s._v("Vue.delete")]),s._v("。")]),s._v(" "),e("h4",{attrs:{id:"_2-3-变化侦测的-api-实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-变化侦测的-api-实现"}},[s._v("#")]),s._v(" 2.3 变化侦测的 API 实现")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("vm.$watch")])]),s._v(" "),e("li",[e("code",[s._v("vm.$set")])]),s._v(" "),e("li",[e("code",[s._v("vm.$delete")])])]),s._v(" "),e("p",[e("strong",[e("code",[s._v("vm.$watch")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$watch(expOrFn, callback, [options]);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("参数：\n"),e("ul",[e("li",[e("code",[s._v("{string | Function} expOrFn")])]),s._v(" "),e("li",[e("code",[s._v("{Function | Object} callback")])]),s._v(" "),e("li",[e("code",[s._v("{Object} [options]")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("{boolean} deep")])]),s._v(" "),e("li",[e("code",[s._v("{boolean} immediate")])])])])])]),s._v(" "),e("li",[s._v("返回值："),e("code",[s._v("{Function} unwatch")])]),s._v(" "),e("li",[s._v("用法：")])]),s._v(" "),e("p",[s._v("观察"),e("code",[s._v("Vue")]),s._v("实例变化的一个表达式或计算属性函数。回调函数得到的参数为新值和旧值。表达式只接受监督的键路径。对于更复杂的表达式，用一个函数取代。")]),s._v(" "),e("p",[s._v("注意：在变异（不是替换）对象或数组时，旧值将与新值相同，因为它们的引用指向同一个对象/数组。"),e("code",[s._v("Vue")]),s._v("不会保留变异之前值的副本。")]),s._v(" "),e("ul",[e("li",[s._v("示例：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('//  键路径\nvm.$watch("a.b.c",function(newVal,oldVal){\n    // 做点什么\n})\n\n// 函数\nvm.$watch(\n  function() {\n    // 表达式 `this.a + this.b` 每次得出一个不同的结果时\n    // 处理函数都会被调用。\n    // 这就像监听一个未被定义的计算属性\n    return this.a + this.b;\n  },\n  function(newVal, oldVal) {\n    // 做点什么\n  }\n);\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[e("code",[s._v("vm.$watch")]),s._v("返回一个取消观察函数，用来停止触发回调")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('var unwatch = vm.$watch("a", cb);\n// 之后取消观察\nunwatch();\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ul",[e("li",[s._v("选项：deep")])]),s._v(" "),e("p",[s._v("为了发现对象内部值的变化，可以在选项参数中指定"),e("code",[s._v("deep:true")]),s._v("。注意监听数组的变动不需要这么做。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('vm.$watch("someObject", callback, {\n  deep: true\n});\nvm.someObject.nestedValue = 123;\n// callback is fired\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ul",[e("li",[s._v("选项：immediate")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('vm.$watch("a", callback, {\n  immediate: true\n});\n// 立即以 `a` 的当前值触发回调\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ul",[e("li",[s._v("内部原理")])]),s._v(" "),e("p",[e("code",[s._v("$watch")]),s._v("的定义位于源码的"),e("code",[s._v("src/core/instance/state.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Vue.prototype.$watch = function (expOrFn,cb,options) {\n    const vm: Component = this\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {}\n    options.user = true\n    const watcher = new Watcher(vm, expOrFn, cb, options)\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value)\n      } catch (error) {\n        handleError(error, vm, `callback for immediate watcher "${watcher.expression}"`)\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown()\n    }\n  }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[s._v("在函数内部，首先判断传入的回调函数是否为一个对象，如果传入的回调函数是个对象，那就表明用户是把第二个参数回调函数"),e("code",[s._v("cb")]),s._v("和第三个参数选项"),e("code",[s._v("options")]),s._v("合起来传入的，此时调用"),e("code",[s._v("createWatcher")]),s._v("函数，该函数定义如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function createWatcher (vm,expOrFn,handler,options) {\n  if (isPlainObject(handler)) {\n    options = handler\n    handler = handler.handler\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler]\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("该函数内部其实就是从用户合起来传入的对象中把回调函数"),e("code",[s._v("cb")]),s._v("和参数"),e("code",[s._v("options")]),s._v("剥离出来，然后再以常规的方式调用"),e("code",[s._v("$watch")]),s._v("方法并将剥离出来的参数传进去。")]),s._v(" "),e("p",[s._v("接着获取到用户传入的"),e("code",[s._v("options")]),s._v("，如果用户没有传入则将其赋值为一个默认空对象，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("options = options || {};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("code",[s._v("$watch")]),s._v("方法内部会创建一个"),e("code",[s._v("watcher")]),s._v("实例，由于该实例是用户手动调用"),e("code",[s._v("$watch")]),s._v("方法创建而来的，所以给"),e("code",[s._v("options")]),s._v("添加"),e("code",[s._v("user")]),s._v("属性并赋值为"),e("code",[s._v("true")]),s._v("，用于区分用户创建的"),e("code",[s._v("watcher")]),s._v("实例和"),e("code",[s._v("Vue")]),s._v("内部创建的"),e("code",[s._v("watcher")]),s._v("实例，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("options.user = true;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("接着，传入参数创建一个 watcher 实例，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const watcher = new Watcher(vm, expOrFn, cb, options);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("接着判断如果用户在选项参数"),e("code",[s._v("options")]),s._v(" 中指定的"),e("code",[s._v("immediate")]),s._v(" 为"),e("code",[s._v("true")]),s._v("，则立即用被观察数据当前的值触发回调，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (options.immediate) {\n  cb.call(vm, watcher.value);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("最后返回一个取消观察函数"),e("code",[s._v("unwatchFn")]),s._v("，用来停止触发回调。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("return function unwatchFn() {\n  watcher.teardown();\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("这个取消观察"),e("code",[s._v("unwatchFn")]),s._v("内部其实是调用了"),e("code",[s._v("watcher")]),s._v("实例的"),e("code",[s._v("teardown")]),s._v("方法，那和我们来看一下这个"),e("code",[s._v("teardown")]),s._v("方法是如何实现的。其代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export default class Watcher {\n  constructor(/* ... */) {\n    // ...\n    this.deps = [];\n  }\n  teardown() {\n    let i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("创建"),e("code",[s._v("watcher")]),s._v("实例的时候会读取被观察的数据，读取了数据就表示依赖了数据，所以"),e("code",[s._v("watcher")]),s._v("实例就会存在于数据的依赖列表中，同时"),e("code",[s._v("watcher")]),s._v("实例也记录了自己依赖了哪些数据，另外我们还说过，每个数据都有一个自己的依赖管理器"),e("code",[s._v("dep")]),s._v("，"),e("code",[s._v("watcher")]),s._v("实例记录自己依赖了哪些数据其实就是把数据的依赖管理器"),e("code",[s._v("dep")]),s._v("存放在"),e("code",[s._v("watcher")]),s._v("实例的"),e("code",[s._v("this.deps=[]")]),s._v("属性中，当取消观察时即"),e("code",[s._v("watcher")]),s._v("实例不想依赖这些数据了，那么就遍历自己记录的这些数据的依赖管理器，告诉这些数据可以从你们依赖列表中把我删除了。")]),s._v(" "),e("p",[s._v("当选项参数"),e("code",[s._v("options")]),s._v("中的"),e("code",[s._v("deep")]),s._v("属性为"),e("code",[s._v("true")]),s._v("时，如何实现深度观察呢？")]),s._v(" "),e("p",[s._v("要实现这个功能也不难，我们知道，要想让数据变化时通知我们，那我们只需成为这个数据的依赖即可，因为数据变化时会通知它所有的依赖，那么如何成为数据的依赖呢，很简单，读取一下数据即可。也就是说我们只需在创建"),e("code",[s._v("watcher")]),s._v("实例的时候把"),e("code",[s._v("obj")]),s._v("对象内部所有的值都递归的读一遍，那么这个"),e("code",[s._v("watcher")]),s._v("实例就会被加入到对象内所有值的依赖列表中，之后当对象内任意某个值发生变化时就能够得到通知了。")]),s._v(" "),e("p",[e("code",[s._v("traverse")]),s._v("函数定义如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const seenObjects = new Set();\n\nexport function traverse(val: any) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse(val: any, seen: SimpleSet) {\n  let i, keys;\n  const isA = Array.isArray(val);\n  if (\n    (!isA && !isObject(val)) ||\n    Object.isFrozen(val) ||\n    val instanceof VNode\n  ) {\n    return;\n  }\n  if (val.__ob__) {\n    const depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return;\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) _traverse(val[i], seen);\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) _traverse(val[keys[i]], seen);\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br")])]),e("p",[s._v("该函数其实就是个递归遍历的过程，把被观察数据的内部值都递归遍历读取一遍。")]),s._v(" "),e("p",[s._v("首先判断传入的"),e("code",[s._v("val")]),s._v("类型，如果它不是"),e("code",[s._v("Array")]),s._v("或"),e("code",[s._v("Object")]),s._v("，再或者已经被冻结，那么直接返回，退出程序。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const isA = Array.isArray(val);\nif ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n  return;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("然后拿到"),e("code",[s._v("val")]),s._v("的"),e("code",[s._v("dep.id")]),s._v("，存入创建好的集合"),e("code",[s._v("seen")]),s._v("中，因为集合相比数据而言它有天然的去重效果，以此来保证存入的"),e("code",[s._v("dep.id")]),s._v("没有重复，不会造成重复收集依赖，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (val.__ob__) {\n  const depId = val.__ob__.dep.id;\n  if (seen.has(depId)) {\n    return;\n  }\n  seen.add(depId);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("接下来判断如果是数组，则循环数组，将数组中每一项递归调用"),e("code",[s._v("_traverse")]),s._v("；如果是对象，则取出对象所有的"),e("code",[s._v("key")]),s._v("，然后执行读取操作，再递归内部值，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (isA) {\n  i = val.length;\n  while (i--) _traverse(val[i], seen);\n} else {\n  keys = Object.keys(val);\n  i = keys.length;\n  while (i--) _traverse(val[keys[i]], seen);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("这样，把被观察数据内部所有的值都递归的读取一遍后，那么这个"),e("code",[s._v("watcher")]),s._v("实例就会被加入到对象内所有值的依赖列表中，之后当对象内任意某个值发生变化时就能够得到通知了。")]),s._v(" "),e("p",[e("strong",[e("code",[s._v("vm.$set")])])]),s._v(" "),e("p",[e("code",[s._v("vm.$set")]),s._v("是全局"),e("code",[s._v("Vue.set")]),s._v("的"),e("strong",[s._v("别名")]),s._v("，其用法相同。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$set(target, propertyName / index, value);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[s._v("参数：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("{Object | Array} target")])])])]),s._v(" "),e("li",[e("p",[s._v("返回值：设置的值")])]),s._v(" "),e("li",[e("p",[s._v("用法：向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性，因为"),e("code",[s._v("Vue")]),s._v("无法探测普通的新增属性。")])]),s._v(" "),e("li",[e("p",[s._v("内部原理")])])]),s._v(" "),e("p",[s._v("对于"),e("code",[s._v("object")]),s._v("型数据，当我们向"),e("code",[s._v("object")]),s._v("数据里添加一对新的"),e("code",[s._v("key/value")]),s._v("或删除一对已有的"),e("code",[s._v("key/value")]),s._v("时，"),e("code",[s._v("vue")]),s._v("是无法观测到的；而对于"),e("code",[s._v("Array")]),s._v("弄数据，当我们通过数组下标个性数组中的数据时，"),e("code",[s._v("Vue")]),s._v("也是无法观测到的")]),s._v(" "),e("p",[s._v("正是因为存在这个问题，所以"),e("code",[s._v("Vue")]),s._v("设计了"),e("code",[s._v("set")]),s._v("和"),e("code",[s._v("delete")]),s._v("这两个方法来解决这一问题；")]),s._v(" "),e("p",[e("code",[s._v("set")]),s._v("方法的定义位于源码的"),e("code",[s._v("src/core/observer/index.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function set (target: Array<any> | Object, key: any, val: any): any {\n  if (process.env.NODE_ENV !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn(`Cannot set reactive property on undefined, null, or primitive value: ${(target: any)}`)\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key)\n    target.splice(key, 1, val)\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val\n    return val\n  }\n  const ob = (target: any).__ob__\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    )\n    return val\n  }\n  if (!ob) {\n    target[key] = val\n    return val\n  }\n  defineReactive(ob.value, key, val)\n  ob.dep.notify()\n  return val\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br")])]),e("p",[s._v("首先判断在非生产环境下如果传入的"),e("code",[s._v("target")]),s._v("是否为"),e("code",[s._v("undefined")]),s._v("、"),e("code",[s._v("null")]),s._v("或是原始类型，如果是原始类型，如果是，则抛出警告，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (process.env.NODE_ENV !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn(`Cannot set reactive property on undefined, null, or primitive value: ${(target: any)}`)\n  }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("接着判断如果传入的"),e("code",[s._v("target")]),s._v("是数组并且传入的"),e("code",[s._v("key")]),s._v("是有效索引的话，那么就取当前数组长度与"),e("code",[s._v("key")]),s._v("这两者的最大值作为数组的新长度，然后使用数组的"),e("code",[s._v("splice")]),s._v("方法将传入的索引"),e("code",[s._v("key")]),s._v("对应的"),e("code",[s._v("val")]),s._v("值添加进数组。这里注意一点，为什么要用"),e("code",[s._v("splice")]),s._v("方法呢？数组的"),e("code",[s._v("splice")]),s._v("方法已经被我们创建的拦截器重写了，也就是说，当使用"),e("code",[s._v("splice")]),s._v("方法向数组内添加元素时，该元素会自动被变成响应式的。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key)\n    target.splice(key, 1, val)\n    return val\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("如果传入的"),e("code",[s._v("target")]),s._v("不是数组，那就当做对象来处理。")]),s._v(" "),e("p",[s._v("首先判断传入的"),e("code",[s._v("key")]),s._v("是否已经存在于"),e("code",[s._v("target")]),s._v("中，如果存在，表明这次操作不是新增属性，而对已有的属性进行简单的修改值，那么就只修改属性值即可，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (key in target && !(key in Object.prototype)) {\n  target[key] = val;\n  return val;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("接下来获取到"),e("code",[s._v("target")]),s._v("的"),e("code",[s._v("__ob__")]),s._v("属性，我们说过，该属性是否为"),e("code",[s._v("true")]),s._v("标志着"),e("code",[s._v("target")]),s._v("是否为响应式对象，接着判断如果"),e("code",[s._v("target")]),s._v("是"),e("code",[s._v("Vue")]),s._v("实例，或者是"),e("code",[s._v("Vue")]),s._v("实例的根数据对象，则抛出警告并退出程序，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('const ob = (target: any).__ob__;\nif (target._isVue || (ob && ob.vmCount)) {\n  process.env.NODE_ENV !== "production" &&\n    warn(\n      "Avoid adding reactive properties to a Vue instance or its root $data " +\n        "at runtime - declare it upfront in the data option."\n    );\n  return val;\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("接着判断如果"),e("code",[s._v("ob")]),s._v("属性为"),e("code",[s._v("false")]),s._v("，那么表明"),e("code",[s._v("target")]),s._v("不是一个响应式对象，那么我们只需简单给它添加上新的属性，不用将新属性转化成响应式，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (!ob) {\n  target[key] = val;\n  return val;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("最后，如果"),e("code",[s._v("target")]),s._v("是对象，并且是响应式，那么就调用"),e("code",[s._v("defineReactive")]),s._v("方法将新属性添加到"),e("code",[s._v("target")]),s._v("上，"),e("code",[s._v("defineReactive")]),s._v("方法会将新属性添加完之后并将其转化成响应式，最后通知依赖更新，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("defineReactive(ob.value, key, val);\nob.dep.notify();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("以上，就是"),e("code",[s._v("set")]),s._v("方法的内部原理。其逻辑流程图如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:"vue14.jpg",alt:"images"}})]),s._v(" "),e("p",[e("strong",[e("code",[s._v("vm.$delete")])])]),s._v(" "),e("p",[e("code",[s._v("vm.$delete")]),s._v("是全局"),e("code",[s._v("Vue.delete")]),s._v("的"),e("strong",[s._v("别名")]),s._v("，其用法相同")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$delete(target, propertyName / index);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[e("strong",[s._v("参数")]),s._v("：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("{Object | Array} target")])]),s._v(" "),e("li",[e("code",[s._v("{string | number} propertyName/index")])])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("用法")]),s._v("：")])])]),s._v(" "),e("p",[s._v("删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开"),e("code",[s._v("Vue")]),s._v("不检测到属性被删除的限制，但是你应该很少会使用它。")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("内部原理")]),s._v("：")])]),s._v(" "),e("p",[e("code",[s._v("delete")]),s._v("方法是用来解决"),e("code",[s._v("Vue")]),s._v("不能检测到属性被删除的限制，该方法的定义位于源码的"),e("code",[s._v("src/core/observer/index.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function del (target: Array<any> | Object, key: any) {\n  if (process.env.NODE_ENV !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn(`Cannot delete reactive property on undefined, null, or primitive value: ${(target: any)}`)\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1)\n    return\n  }\n  const ob = (target: any).__ob__\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    )\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key]\n  if (!ob) {\n    return\n  }\n  ob.dep.notify()\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("p",[s._v("该方法的内部原理与"),e("code",[s._v("set")]),s._v("方法有几分相似。")]),s._v(" "),e("p",[s._v("首先判断在非生产环境下如果传入的"),e("code",[s._v("target")]),s._v("不存在，或者"),e("code",[s._v("target")]),s._v("是原始值，则抛出警告，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" if (process.env.NODE_ENV !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn(`Cannot delete reactive property on undefined, null, or primitive value: ${(target: any)}`)\n  }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("接着判断如果传入的"),e("code",[s._v("target")]),s._v("是数组并且传入的"),e("code",[s._v("key")]),s._v("是有效索引的话，就使用数组的"),e("code",[s._v("splice")]),s._v("方法将索引"),e("code",[s._v("key")]),s._v("对应的值删掉，数组的"),e("code",[s._v("splice")]),s._v("方法已经被我们创建的拦截器重写了，所以使用该方法会自动通知相关依赖。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1)\n    return\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("如果传入的"),e("code",[s._v("target")]),s._v("不是数组，那就当做对象来处理")]),s._v(" "),e("p",[s._v("接下来获取到"),e("code",[s._v("target")]),s._v("的"),e("code",[s._v("__ob__")]),s._v("属性，该属性是否为"),e("code",[s._v("true")]),s._v("标志着"),e("code",[s._v("target")]),s._v("是否为响应式对象，接着判断如果"),e("code",[s._v("target")]),s._v("是"),e("code",[s._v("Vue")]),s._v("实例，或者是"),e("code",[s._v("Vue")]),s._v("实例的根数据对象，则抛出警告并退出程序，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('const ob = (target: any).__ob__;\nif (target._isVue || (ob && ob.vmCount)) {\n  process.env.NODE_ENV !== "production" &&\n    warn(\n      "Avoid adding reactive properties to a Vue instance or its root $data " +\n        "at runtime - declare it upfront in the data option."\n    );\n  return val;\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("接着判断传入的"),e("code",[s._v("key")]),s._v("是否存在于"),e("code",[s._v("target")]),s._v("中，如果"),e("code",[s._v("key")]),s._v("本来就不存在于"),e("code",[s._v("target")]),s._v("中，那就不用删除，直接退出程序即可，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (!hasOwn(target, key)) {\n  return;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("最后，如果"),e("code",[s._v("target")]),s._v("是对象，并且传入的"),e("code",[s._v("key")]),s._v("也存在于"),e("code",[s._v("target")]),s._v("中，那么就从"),e("code",[s._v("target")]),s._v("中将该属性删除，同时判断当前的"),e("code",[s._v("target")]),s._v("是否为响应式对象，如果是响应式对象，则通知依赖更新；如果不是，删除完后直接返回不通知更新，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("delete target[key];\nif (!ob) {\n  return;\n}\nob.dep.notify();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"三、虚拟-dom-篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、虚拟-dom-篇"}},[s._v("#")]),s._v(" 三、虚拟 DOM 篇")]),s._v(" "),e("p",[s._v("参考"),e("a",{attrs:{href:"https://km.xiaowuzi.info/js/vue-dom.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue 虚拟 DOM"),e("OutboundLink")],1)]),s._v(" "),e("h3",{attrs:{id:"四、模板编译篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、模板编译篇"}},[s._v("#")]),s._v(" 四、模板编译篇")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#_4-1-%E6%A6%82%E8%BF%B0"}},[s._v("概述")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#_4-2-%E6%95%B4%E4%BD%93%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B"}},[s._v("整体运行流程")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#_4-3-html-%E8%A7%A3%E6%9E%90%E5%99%A8"}},[s._v("HTML 解析器")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#_4-4-%E6%96%87%E6%9C%AC%E8%A7%A3%E6%9E%90%E5%99%A8"}},[s._v("文本解析器")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#_4-5-%E4%BC%98%E5%8C%96%E9%98%B6%E6%AE%B5"}},[s._v("优化阶段")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#_4-5-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E9%98%B6%E6%AE%B5"}},[s._v("代码生成阶段")])])]),s._v(" "),e("p",[s._v("我们知道，在日常开发中，我们把写在"),e("code",[s._v("<template></template>")]),s._v("标签中的类似于原生"),e("code",[s._v("HTML")]),s._v("的内容称之为模板。这时你可能会问了，为什么说是“类似于原生"),e("code",[s._v("HTML")]),s._v("的内容”而不是“就是"),e("code",[s._v("HTML")]),s._v("的内容”？因为我们在开发中，在"),e("code",[s._v("<template></template>")]),s._v("标签中除了写一些原生"),e("code",[s._v("HTML")]),s._v("的标签，我们还会写一些亦是插值，如或者写一些"),e("code",[s._v("Vue")]),s._v("指令，如"),e("code",[s._v("v-on")]),s._v("、"),e("code",[s._v("v-if")]),s._v("等。而这些东西都是在原生"),e("code",[s._v("HTML")]),s._v("语法中不存在的，不被接受的。但事实上我们确实这么写了，也被正确识别了，页面也正常显示了，这又是为什么呢？")]),s._v(" "),e("p",[s._v("这就归功于"),e("code",[s._v("Vue")]),s._v("的模板编译了，"),e("code",[s._v("Vue")]),s._v("会把用户在"),e("code",[s._v("<template></template>")]),s._v("标签中写的类似于原生"),e("code",[s._v("HTML")]),s._v("的内容进行编译，把原生"),e("code",[s._v("HTML")]),s._v("的内容找出来，再把非原生"),e("code",[s._v("HTML")]),s._v("找出来，经过一系列的逻辑处理生成渲染函数，也就是"),e("code",[s._v("render")]),s._v("函数，而"),e("code",[s._v("redner")]),s._v("函数会将模板内容生成对应的"),e("code",[s._v("VNode")]),s._v("，而"),e("code",[s._v("VNode")]),s._v("再经过"),e("code",[s._v("patch")]),s._v("过程从而得到将要渲染的视图中的"),e("code",[s._v("VNode")]),s._v("，最后根据"),e("code",[s._v("VNode")]),s._v("创建真实的"),e("code",[s._v("DOM")]),s._v("节点并插入到视图中，最终完成视图的渲染更新。")]),s._v(" "),e("p",[s._v("而把用户在"),e("code",[s._v("<template></template>")]),s._v("标签中写的类似于原生"),e("code",[s._v("HTML")]),s._v("的内容进行编译，把原生"),e("code",[s._v("HTML")]),s._v("的内容找出来，再把非原生"),e("code",[s._v("HTML")]),s._v("找出来，经过一系列的逻辑处理成渲染函数，也就是"),e("code",[s._v("render")]),s._v("函数的这一段过程称之为模板编译过程。")]),s._v(" "),e("h4",{attrs:{id:"_4-1-概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-概述"}},[s._v("#")]),s._v(" 4.1 概述")]),s._v(" "),e("p",[e("strong",[s._v("整体渲染流程")])]),s._v(" "),e("p",[s._v("所谓渲染流程，就是把用户写的类似原生"),e("code",[s._v("HTML")]),s._v("的模板经过一系列处理最终反应到视图中称之为整个渲染流程。这个流程在上文中其实已经说到了，下面我们以流程图的形式宏观的了解一下，流程图如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:"vue-code01.png",alt:"images"}})]),s._v(" "),e("p",[s._v("从图中我们也可以看到，模板编译过程就是把用户写的模板经过一系列处理最终生成"),e("code",[s._v("render")]),s._v("函数的过程。")]),s._v(" "),e("p",[s._v("将一堆字符串模板解析成抽象语法树"),e("code",[s._v("AST")]),s._v("后，我们就可以对其进行各种操作处理了，处理完后用处理后的"),e("code",[s._v("AST")]),s._v("来生成"),e("code",[s._v("render")]),s._v("函数。其具体流程可大致分为三个阶段：")]),s._v(" "),e("ol",[e("li",[s._v("模板解析阶段：将一堆模板字符串用正则等方式解析成抽象语法树"),e("code",[s._v("AST")]),s._v("；")]),s._v(" "),e("li",[s._v("优化阶段：遍历"),e("code",[s._v("AST")]),s._v("，找出其中的静态节点，并打上标记；")]),s._v(" "),e("li",[s._v("代码生成阶段：将"),e("code",[s._v("AST")]),s._v("转换成渲染函数；")])]),s._v(" "),e("p",[s._v("这三个阶段在源码中分别对应三个模块，下面给出三个模块的源代码在源码中的路径：")]),s._v(" "),e("ol",[e("li",[s._v("模板解析段——解析器——源码路径："),e("code",[s._v("src/compiler/parser/index.js")])]),s._v(" "),e("li",[s._v("优化阶段——优化器——源码路径："),e("code",[s._v("src/compiler/optimizer.js")])]),s._v(" "),e("li",[s._v("代码生成阶段——代码生成器——源码路径："),e("code",[s._v("src/compiler/codegen/index.js")])])]),s._v(" "),e("p",[s._v("其对应的源码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 源码位置：/src/complier/index.js\n\nexport const createCompiler = createCompilerCreator(function baseCompile (\n  template: string,\n  options: CompilerOptions\n): CompiledResult {\n  const ast = parse(template.trim(), options)\n  if (options.optimize !== false) {\n    optimize(ast, options)\n  }\n  const code = generate(ast, options)\n  return {\n    ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("可以看到"),e("code",[s._v("baseCompile")]),s._v("的代码非常的简短主要核心代码。")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("const ast = parse(template.trim(),options)")]),s._v("："),e("code",[s._v("parse")]),s._v("会用与此同时等方式解析"),e("code",[s._v("template")]),s._v("模板中的指令、"),e("code",[s._v("class")]),s._v("、"),e("code",[s._v("style")]),s._v("等数据，形成"),e("code",[s._v("AST")]),s._v("。")]),s._v(" "),e("li",[e("strong",[s._v("optimize(ast,options)")]),s._v("："),e("code",[s._v("optimize")]),s._v("的主要作用是标记静态节点，这是"),e("code",[s._v("Vue")]),s._v("在编译过程中的一处优化，档在进行"),e("code",[s._v("patch")]),s._v("的过程中，"),e("code",[s._v("DOM-Diff")]),s._v("算法会直接跳过静态节点，从而减少了比较的过程，优化了"),e("code",[s._v("patch")]),s._v("的性能。")]),s._v(" "),e("li",[e("strong",[s._v("const code = generate(ast,options)")]),s._v("：将"),e("code",[s._v("AST")]),s._v("转化成"),e("code",[s._v("render")]),s._v("函数字符串的过程，得到结果是"),e("code",[s._v("render")]),s._v("函数的字符串以及"),e("code",[s._v("staticRenderFns")]),s._v("字符串。")])]),s._v(" "),e("p",[s._v("最终"),e("code",[s._v("baseCompile")]),s._v("的返回值")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("{\n    ast:ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("最终返回了抽象语法树(ast)，渲染函数(render)，静态渲染函数(staticRenderFns)，且"),e("code",[s._v("render")]),s._v("的值为"),e("code",[s._v("code.render")]),s._v("，"),e("code",[s._v("staticRendreFns")]),s._v("的值为"),e("code",[s._v("code.staticRenderFns")]),s._v("，也就是说通过"),e("code",[s._v("generate")]),s._v("处理"),e("code",[s._v("ast")]),s._v("之后得到的返回值"),e("code",[s._v("code")]),s._v("是一个对象。")]),s._v(" "),e("p",[s._v("流程图如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:"vue13.png",alt:"images"}})]),s._v(" "),e("h4",{attrs:{id:"_4-2-整体运行流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-整体运行流程"}},[s._v("#")]),s._v(" 4.2 整体运行流程")]),s._v(" "),e("p",[s._v("在模板解析阶段主要做的工作是把用户在"),e("code",[s._v("<template></template>")]),s._v("标签内写的模板使用正则等方式解析成抽象语法树（"),e("code",[s._v("AST")]),s._v("）。而这一阶段在源码中对应解析器（"),e("code",[s._v("parser")]),s._v("）模块。")]),s._v(" "),e("p",[s._v("解析器，顾名思义，就是把用户所写的模板根据一定的解析规则解析出有效的信息，最后用这些信息形成"),e("code",[s._v("AST")]),s._v("。我们知道在"),e("code",[s._v("<template></template>")]),s._v("模板内，除了有常规的"),e("code",[s._v("HTML")]),s._v("标签外，用户还会一些文本信息以及在文本信息中包含过滤器。而这些不同的内容在解析起来肯定需要不同的解析规则，所以解析器不可能只有一个，它应该除了有解析常规"),e("code",[s._v("HTML")]),s._v("的 HTML 解析器，还应该有解析文本的文本解析器以及解析文本如果包含过滤器的过滤器解析器。")]),s._v(" "),e("p",[s._v("文本信息和标签属性信息却又是存在于 HTML 标签之内的，所以在解析整个模板的时候它的流程应该是这样子的")]),s._v(" "),e("p",[e("strong",[s._v("回到源码")])]),s._v(" "),e("p",[s._v("解析器的源码位于"),e("code",[s._v("/src/complier/parser")]),s._v("文件夹下，其主线代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 代码位置：/src/complier/parser/index.js\n\nexport function parse(template, options) {\n   // ...\n  parseHTML(template, {\n    warn,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    start (tag, attrs, unary) {\n\n    },\n    end () {\n\n    },\n    chars (text: string) {\n\n    },\n    comment (text: string) {\n\n    }\n  })\n  return root\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("p",[e("code",[s._v("parse")]),s._v("函数就是解析器的主函数，在"),e("code",[s._v("parse")]),s._v("函数内调用了"),e("code",[s._v("parseHTML")]),s._v("函数对象模板字符串进行解析，在"),e("code",[s._v("parseHTML")]),s._v("函数解析模板字符串的过程中，如果遇到广西信息，就会调用文本解析器"),e("code",[s._v("parseText")]),s._v("函数进行文本解析；如果遇到文本中包含过滤器，就会调用过滤器解析器"),e("code",[s._v("parseFilters")]),s._v("函数进行解析。")]),s._v(" "),e("p",[e("strong",[s._v("总结")])]),s._v(" "),e("p",[s._v("模板解析其实就是根据被解析内容的特点使用正则等方式将有效信息解析提取出来，根据解析内容的不同分为 HTML 解析器，文本解析器和过滤器解析器。而文本信息与过滤器信息又存在于 HTML 标签中，所以在解析器主线函数"),e("code",[s._v("parse")]),s._v("中先调用 HTML 解析器"),e("code",[s._v("parseHTML")]),s._v("函数对模板字符串进行解析，如果在解析过程中遇到文本或过滤器信息则再调用相应的解析器进行解析，最终完成对整个模板字符串的解析。")]),s._v(" "),e("h4",{attrs:{id:"_4-3-html-解析器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-html-解析器"}},[s._v("#")]),s._v(" 4.3 HTML 解析器")]),s._v(" "),e("p",[e("strong",[s._v("HTML 解析器内部运行流程")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//  代码位置：/src/complier/parser/index.js\n\n/**\n *  Convert HTML string to AST.\n *  将HTML模板字符串转化为AST\n */\nexport function parse(template,options){\n    // ...\n    parseHTML(template,{\n        warn,\n        expectHTML: options.expectHTML,\n        isUnaryTag: options.isUnaryTag,\n        canBeLeftOpenTag: options.canBeLeftOpenTag,\n        shouldDecodeNewlines: options.shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n        shouldKeepComment: options.comments,\n        // 当解析到开始标签时，调用该函数\n        start(tag,attrs,unary){\n\n        },\n        // 当解析到结束标签时，调用该函数\n        end(){\n\n        },\n        // 当解析到文本时，调用该函数\n        chars(text){\n\n        },\n        // 当解析到注释时，调用该函数\n        comment(text){\n\n        }\n    })\n    return root\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br")])]),e("p",[s._v("从代码中我们可以看到，调用"),e("code",[s._v("parseHTML")]),s._v("函数时为其传入的两个参数分别是：")]),s._v(" "),e("ul",[e("li",[s._v("template 待转换的模板字符串；")]),s._v(" "),e("li",[s._v("options 转换时所需的选项；")])]),s._v(" "),e("p",[s._v("第一个参数是待转换的模板字符串，无需多言；重点看第二个参数，第二个参数提供了一些解析"),e("code",[s._v("HTML")]),s._v("模板时的一些参数，同时还定义了 4 个钩子函数。我们说了模板编译阶段主线函数"),e("code",[s._v("parse")]),s._v("会将"),e("code",[s._v("HTML")]),s._v("模板字符串转化成"),e("code",[s._v("AST")]),s._v("，而"),e("code",[s._v("parseHTML")]),s._v("是用来解析模板字符串的，把模板字符串中不同的内容解释出来之后，然后使用这个 4 个钩子函数提取出来的内容生成对应的"),e("code",[s._v("AST")]),s._v("。")]),s._v(" "),e("p",[s._v("把这 4 个钩子函数作为参数会给解析器"),e("code",[s._v("parseHTML")]),s._v("，当解析器解析出不同的内容时调用不同的钩子函数从而生成不同的"),e("code",[s._v("AST")]),s._v("。")]),s._v(" "),e("ul",[e("li",[s._v("当解析到开始标签时调用"),e("code",[s._v("start")]),s._v("函数生成元素类型的"),e("code",[s._v("AST")]),s._v("节点，代码如下；")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 当解析到标签的开始位置时，触发start\nstart (tag, attrs, unary, start, end) {\n    let element = crateASTElement(tag,atrrs,currentParent)\n}\n\nexport function crateASTElement(tag,attrs,parent){\n    return {\n        type: 1,\n        tag,\n        attrsList: attrs,\n        attrsMap: makeAttrsMap(attrs),\n        rawAttrsMap: {},\n        parent,\n        children: []\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("从上面代码中我们可以看到，"),e("code",[s._v("start")]),s._v("函数接收五个参数，分别是标签名"),e("code",[s._v("tag")]),s._v("、标签属性"),e("code",[s._v("attrs")]),s._v("、标签是否自闭合"),e("code",[s._v("unary")]),s._v("、开始"),e("code",[s._v("start")]),s._v("、结束"),e("code",[s._v("end")]),s._v("。当调用该钩子函数时，内部会调用"),e("code",[s._v("createASTElement")]),s._v("函数来创建元素类型的"),e("code",[s._v("AST")]),s._v("节点")]),s._v(" "),e("ul",[e("li",[s._v("当解析到结束标签时调用"),e("code",[s._v("end")]),s._v("函数；")]),s._v(" "),e("li",[s._v("当解析到文本调用"),e("code",[s._v("chars")]),s._v("函数生成文本类型的"),e("code",[s._v("AST")]),s._v("节点；")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 当解析到标签的文本时，触发chars\nchars (text, start, end) {\n      if (!currentParent) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.',\n              { start }\n            )\n          } else if ((text = text.trim())) {\n            warnOnce(\n              `text \"${text}\" outside root element will be ignored.`,\n              { start }\n            )\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      const children = currentParent.children\n      if (inPre || text.trim()) {\n        text = isTextTag(currentParent) ? text : decodeHTMLCached(text)\n      } else if (!children.length) {\n        text = ''\n      } else if (whitespaceOption) {\n        if (whitespaceOption === 'condense') {\n          text = lineBreakRE.test(text) ? '' : ' '\n        } else {\n          text = ' '\n        }\n      } else {\n        text = preserveWhitespace ? ' ' : ''\n      }\n      if (text) {\n        if (!inPre && whitespaceOption === 'condense') {\n          text = text.replace(whitespaceRE, ' ')\n        }\n        let res\n        let child: ?ASTNode\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          child = {\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text\n          }\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          child = {\n            type: 3,\n            text\n          }\n        }\n        if (child) {\n          if (process.env.NODE_ENV !== 'production' && options.outputSourceRange) {\n            child.start = start\n            child.end = end\n          }\n          children.push(child)\n        }\n      }\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br")])]),e("p",[s._v("当解析到标签的文本时，触发"),e("code",[s._v("charts")]),s._v("钩子函数，在该钩子函数内部，首先会判断文本是不是一个带变量的动态文本，如“hello”。如果是动态文本，则创建动态文本类型的"),e("code",[s._v("AST")]),s._v("节点；如果不是动态文本，则创建纯静态文本类型的"),e("code",[s._v("AST")]),s._v("节点。")]),s._v(" "),e("ul",[e("li",[s._v("当解析到注释时调用"),e("code",[s._v("comment")]),s._v("函数生成注释类型的"),e("code",[s._v("AST")]),s._v("节点；")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 当解析到标签的注释时，触发comment\ncomment (text: string) {\n  let element = {\n    type: 3,\n    text,\n    isComment: true\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("当解析到标签的注释时，触发"),e("code",[s._v("comment")]),s._v("钩子函数，该钩子函数会创建一个注释类型的"),e("code",[s._v("AST")]),s._v("节点。")]),s._v(" "),e("p",[s._v("一边解析不同的内容一边调用对应的钩子函数生成对应的"),e("code",[s._v("AST")]),s._v("节点，最终完成将整个模板字符串转化成"),e("code",[s._v("AST")]),s._v("，这就是"),e("code",[s._v("HTML")]),s._v("解析器所要做的工作。")]),s._v(" "),e("p",[e("strong",[s._v("如何解析不同的内容")])]),s._v(" "),e("p",[s._v("要从模板字符串中解析出不同的内容，那")]),s._v(" "),e("ul",[e("li",[s._v("文本，例如“难凉热血”")]),s._v(" "),e("li",[s._v("HTML 注释，例如"),e("code",[s._v("\x3c!--我是注释--\x3e")])]),s._v(" "),e("li",[s._v("条件注释，例如"),e("code",[s._v("\x3c!--[if !IE] --\x3e我是注释<![endif]--\x3e")])]),s._v(" "),e("li",[s._v("DOCTYPE，例如"),e("code",[s._v("<!DOCTYPE html>")])]),s._v(" "),e("li",[s._v("开始标签，例如"),e("code",[s._v("<div>")])]),s._v(" "),e("li",[s._v("结束标签，例如"),e("code",[s._v("</div>")])])]),s._v(" "),e("p",[s._v("这几种内容都有其各自独有的特点，也就是说我们要根据不同内容所具有的不同的特点通过编写不同的表达式将这些内容从模板字符串中一一解析出来，然后再把不同的内容做不同的处理。")]),s._v(" "),e("p",[e("strong",[s._v("解析 HTML 注释")])]),s._v(" "),e("p",[s._v("解析注释比较简单，我们知道"),e("code",[s._v("HTML")]),s._v("注释是以"),e("code",[s._v("\x3c!--")]),s._v("开头，以"),e("code",[s._v("--\x3e")]),s._v("结尾，这两者中间的内容，那么我们只需用正则判断待解析的模板字符串"),e("code",[s._v("html")]),s._v("是否以"),e("code",[s._v("\x3c!--")]),s._v("开头，若是，那就继续向后寻找"),e("code",[s._v("--\x3e")]),s._v("，如果找到了，OK，溈就解析出来了。代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const comment = /^<!\\--/\nif(comment.test(html)){\n    // 若为注释，则继续查找是否存在'--\x3e'\n    const commentEnd = html.indexOf('--\x3e')\n\n    if(commentEnd >= 0){\n        // 若存在 '--\x3e'，继续判断options中是否保留注释\n        if(options.shouldKeepComment){\n            // 若保留注释，则把注释截取出来给options.comment，创建溈类型的AST节点\n            options.comment(html,substring(4,commentEnd) index, index + commentEnd + 3)\n        }\n        // 若不保留注释，则将游标移动到'--\x3e'之后，继续向后解析\n        advance(commentEnd+3)\n        continue\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("如果模板字符串"),e("code",[s._v("html")]),s._v("符合注释开始的正则，那么就继续向后查找是否存在"),e("code",[s._v("--\x3e")]),s._v("，若存在，则把"),e("code",[s._v("html")]),s._v("从第 4 位（"),e("code",[s._v('"\x3c!--"')]),s._v("长度为 4）开始截取，直到"),e("code",[s._v("--\x3e")]),s._v("处，截取得到的内容就是注释的真实内容，然后调用 4 个钩子函数中的 comment 函数，将真实的注释内容传进去，创建注释类型的 AST 节点。")]),s._v(" "),e("p",[s._v("在上面代码中，如果模板字符串"),e("code",[s._v("html")]),s._v("符合注释开始的正则，那么就继续向后查找是否存在"),e("code",[s._v("--\x3e")]),s._v("，若存在，则把"),e("code",[s._v("html")]),s._v("从第 4 位（"),e("code",[s._v('"\x3c!--"')]),s._v("长度为 4）开始截取，直到"),e("code",[s._v("--\x3e")]),s._v("处，截取得到的内容就是注释的真实内容，然后调用 4 个钩子函数中的"),e("code",[s._v("comment")]),s._v("函数，将真实的注释内容传进去，创建溈类型的"),e("code",[s._v("AST")]),s._v("节点。")]),s._v(" "),e("p",[s._v("上面代码中有一处值得注意的地方，那就是我们平常在模板中可以在"),e("code",[s._v("<template></template>")]),s._v("标签上配置"),e("code",[s._v("comments")])]),s._v(" "),e("p",[e("code",[s._v("advance")]),s._v("函数是用来移动解析游标的，解析完一部分就把游标向后移动一部分，确保不会重复解析，其代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function advance(n){\n    index +=n       // index为解析游标\n    html = html.substring(n)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("为了更加直观地说明"),e("code",[s._v("advance")]),s._v("的作用，请看下图：")]),s._v(" "),e("p",[e("img",{attrs:{src:"vue15.png",alt:"images"}})]),s._v(" "),e("p",[s._v("调用"),e("code",[s._v("advance")]),s._v("函数：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("advance(3)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("得到结果：")]),s._v(" "),e("p",[e("img",{attrs:{src:"vue16.png",alt:"images"}})]),s._v(" "),e("p",[s._v("从图中可以看到，解析游标"),e("code",[s._v("index")]),s._v("最开始在模板字符串的位置 0 处，当调用了"),e("code",[s._v("advance(3)")]),s._v("之后，解析游标到了位置 3 处，每次解析完一段内容就将游标向后移动一段，接着再从解析游标往后解析，这样就保证了解析过的内容不会被重复解析。")]),s._v(" "),e("p",[e("strong",[s._v("解析条件注释")])]),s._v(" "),e("p",[s._v("解析条件注释也比较简单，其原理跟解析注释相同，都是先用与正则判断是否是以条件注释特有的开头标识开始，然后寻找其特有的结束标识，若找到，则说明是条件注释，将其截取出来即可，由于条件注释不存在于真正的"),e("code",[s._v("DOM")]),s._v("树中，所以不需要调用钩子函数创建"),e("code",[s._v("AST")]),s._v("节点。代码如下")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 解析是否是条件注释\nconst conditionalComment = /^<!\\[/\nif(conditionalComment.test(html)){\n    // 若为条件注释，则继续查找是否存在']>'\n    const conditionalEnd = html.indexOf(']>')\n\n    if(conditionalEnd >=0){\n        // 若存在  ']>',则从原本的html字符串中把条件注释裁掉\n        // 把剩下的内容重新赋给html，继续向后匹配\n        advance(conditionalEnd+2)\n        continue\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[e("strong",[s._v("解析 DOCTYPE")])]),s._v(" "),e("p",[s._v("解析"),e("code",[s._v("DOCTYPE")]),s._v("的原理同解析条件注释完全相同，此处不再赘述，代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const doctype = /^<!DOCTYPE [^>]+>/i\n// 解析是否是DOCTYPE\nconst doctypeMatch  = html.match(doctype)\nif (doctypeMatch) {\n  advance(doctypeMatch[0].length)\n  continue\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("strong",[s._v("解析开始标签")])]),s._v(" "),e("p",[s._v("相较于前三种内容的解析，解析开始标签会稍微复杂一点，但是万变不离其宗，它的原理还是想通的，都是使用正则去匹配提取。")]),s._v(" "),e("p",[s._v("首先使用开始标签的正则去匹配模板字符串，看模板字符串是否具有开始标签的特征，如下")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**\n *  匹配开始标签的正则\n */\nconst ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`\nconst startTagOpen = new RegExp(`^<${qnameCapture}`)\n\nconst start = html.match(startTagOpen)\nif(start){\n    const match = {\n    tagName: start[1],\n    attrs: [],\n    start: index\n  }\n}\n\n// 以开始标签开始的模板：\n'<div></div>'.match(startTagOpen)  => ['<div','div',index:0,input:'<div></div>']\n// 以结束标签开始的模板：\n'</div><div></div>'.match(startTagOpen) => null\n// 以文本开始的模板：\n'我是文本</p>'.match(startTagOpen) => null\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("p",[s._v("当解析到开始标签时，会调用 4 个钩子函数中的"),e("code",[s._v("start")]),s._v("函数，而"),e("code",[s._v("start")]),s._v("函数需要传递 5 个参数，分别是标签名"),e("code",[s._v("tag")]),s._v("、标签属性"),e("code",[s._v("attrs")]),s._v("、标签是否自闭合"),e("code",[s._v("unary")]),s._v("、开始位置"),e("code",[s._v("start")]),s._v("、结束位置"),e("code",[s._v("end")]),s._v("。标签名通过与此同时的结果就可以拿到，即上面代码中的"),e("code",[s._v("start[1]")]),s._v("，而标签属性"),e("code",[s._v("attrs")]),s._v("以及标签是否自闭合"),e("code",[s._v("unary")]),s._v("需要进行一步解析。")]),s._v(" "),e("ol",[e("li",[s._v("解析标签属性")])]),s._v(" "),e("p",[s._v("我们知道，标签属性一般是写在开始标签的标签名之后的，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<div class="a" id="b"></div>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("另外，我们在上面匹配是否开始标签正则中已经可以拿到开始标签的标签名，即上面代码中的"),e("code",[s._v("start[0]")]),s._v("，那么我们可以将这一部分先从模板字符串裁掉，则剩下的部分如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(' class="a" id="b"></div>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("我们只需用剩下的这部分去匹配标签属性的正则，就可以将标签属性提取出来了，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('const attribute = /^\\s*([^\\s"\'<>\\/=]+)(?:\\s*(=)\\s*(?:"([^"]*)"+|\'([^\']*)\'+|([^\\s"\'=<>`]+)))?/\nlet html = \'class="a" id="b"></div>\'\nlet attr = html.match(attribute)\nconsole.log(attr)\n// ["class="a"", "class", "=", "a", undefined, undefined, index: 0, input: "class="a" id="b"></div>", groups: undefined]\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("可以看到，第一个标签属性"),e("code",[s._v('class="a"')]),s._v("已经被拿到了。另外，标签属性有可能有多个也有可能没有，如果没有的话那好办，匹配标签属性的正则就会匹配失败，标签属性就为空数组；而如果标签属性有多个的话，那就需要循环匹配了，匹配出第一个标签属性后，就把该属性裁掉，用剩下的字符串继续匹配，走到不再满足正则为止，代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/\nconst startTagClose = /^\\s*(\\/?)>/\nconst match = {\n tagName: start[1],\n attrs: [],\n start: index\n}\n while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {\n advance(attr[0].length)\n match.attrs.push(attr)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("在上面代码的"),e("code",[s._v("while")]),s._v("循环中，如果剩下的字符串不符合开始标签的结束特征（startTagClose）并且符合标签属性的特征的话，那就说明还有未提取出的标签属性，那就进入循环，继续提取，直到把所有标签属性都提取完毕。")]),s._v(" "),e("p",[s._v("所谓不符合开始标签的结束特征是指当前剩下的字符串不是以开始标签结束符开头的，我们知道一个开始标签的结束符有可能是一个"),e("code",[s._v(">")]),s._v("（非自闭合标签），也有可能是"),e("code",[s._v("/>")]),s._v("（自闭合标签），如果剩下的字符串（如"),e("code",[s._v("></div>")]),s._v("）以开始标签的结束符开头，那么就表示标签属性已经被提取完毕了。")]),s._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[s._v("解析标签是否是自闭合")])]),s._v(" "),e("p",[s._v("在"),e("code",[s._v("HTML")]),s._v("中，有自闭合标签（如"),e("code",[s._v('<img src="" />')]),s._v("）也有非自闭合标签（如"),e("code",[s._v("<div></div>")]),s._v("），这两种类型的标签在创建"),e("code",[s._v("AST")]),s._v("节点是处理方式是有区别的，所以我们需要解析出当前标签是否自闭合标签。")]),s._v(" "),e("p",[s._v("解析的方式很简单，我们知道，经过标签属性提取之后，那么剩下的字符串无非就两种，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\x3c!--非自闭合标签--\x3e\n></div>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("或")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\x3c!--自闭合标签--\x3e\n/>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("所以我们可以用剩下的字符串去切尔西开始标签结束符正则，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('const startTagClose = /^\\s*(\\/?)>/\nlet end = html.match(startTagClose)\n\'></div>\'.match(startTagClose) // [">", "", index: 0, input: "></div>", groups: undefined]\n\'/>\'.match(startTagClose) // ["/>", "/", index: 0, input: "/><div></div>", groups: undefined]\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("可以看到，非自闭合标签匹配结果中的"),e("code",[s._v("end[1]")]),s._v("为"),e("code",[s._v('""')]),s._v("，而自闭合标签匹配结果中的"),e("code",[s._v("end[1]")]),s._v("为"),e("code",[s._v('"/"')]),s._v("。所以根据匹配结果的"),e("code",[s._v("end[1]")]),s._v("是否是"),e("code",[s._v('""')]),s._v("我们即可判断出当前标签是否为自闭合标签，源码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const startTagClose = /^\\s*(\\/?)>/\nlet end = html.match(startTagClose)\nif (end) {\n match.unarySlash = end[1]\n advance(end[0].length)\n match.end = index\n return match\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("解析完毕后，就可以用解析得到的结果去调用"),e("code",[s._v("start")]),s._v("钩子函数去创建元素型的"),e("code",[s._v("AST")]),s._v("节点了。")]),s._v(" "),e("p",[e("code",[s._v("Vue")]),s._v("并没有直接去调"),e("code",[s._v("start")]),s._v("钩子函数去创建"),e("code",[s._v("AST")]),s._v("节点，而是调用了"),e("code",[s._v("handleStartTag")]),s._v("函数，在该函数内部才去调用的"),e("code",[s._v("start")]),s._v("钩子函数，这是因为虽然经过"),e("code",[s._v("parseStartTag")]),s._v("函数已经把创建"),e("code",[s._v("AST")]),s._v("节点必要信息提出来了，但是提取出来的标签属性数组还是需要处理一下。"),e("code",[s._v("handleStartTag")]),s._v("函数源码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function handleStartTag (match) {\n    const tagName = match.tagName\n    const unarySlash = match.unarySlash\n\n    if (expectHTML) {\n      // ...\n    }\n\n    const unary = isUnaryTag(tagName) || !!unarySlash\n\n    const l = match.attrs.length\n    const attrs = new Array(l)\n    for (let i = 0; i < l; i++) {\n      const args = match.attrs[i]\n      const value = args[3] || args[4] || args[5] || ''\n      const shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      }\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs })\n      lastTag = tagName\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end)\n    }\n  }\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("p",[e("code",[s._v("handleStartTag")]),s._v("函数用来对"),e("code",[s._v("parseStartTag")]),s._v("函数的解析结果进行进一步处理，它接收"),e("code",[s._v("parseStartTag")]),s._v("函数的返回值作为参数。")]),s._v(" "),e("p",[e("code",[s._v("handleStartTag")]),s._v("函数的开始定义几个常量：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('const tagName = match.tagName       // 开始标签的标签名\nconst unarySlash = match.unarySlash  // 是否为自闭合标签的标志，自闭合为"",非自闭合为"/"\nconst unary = isUnaryTag(tagName) || !!unarySlash  // 布尔值，标志是否为自闭合标签\nconst l = match.attrs.length    // match.attrs 数组的长度\nconst attrs = new Array(l)  // 一个与match.attrs数组长度相等的数组\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("接下来是循环处理提取出来的标签属性数组"),e("code",[s._v("match.attrs")]),s._v("，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("for (let i = 0; i < l; i++) {\n    const args = match.attrs[i]\n    const value = args[3] || args[4] || args[5] || ''\n    const shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n    ? options.shouldDecodeNewlinesForHref\n    : options.shouldDecodeNewlines\n    attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("首先定义了 "),e("code",[s._v("args")]),s._v(" 常量，它是解析出来的标签属性数组中的每一个属性对象，即 "),e("code",[s._v("match.attrs")]),s._v(" 数组中每个元素对象。 它长这样：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('const args = ["class="a"", "class", "=", "a", undefined, undefined, index: 0, input: "class="a" id="b"></div>", groups: undefined]\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("接下来是循环处理提取出来的标签属性数组"),e("code",[s._v("match.attrs")]),s._v("，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("for (let i = 0; i < l; i++) {\n    const args = match.attrs[i]\n    const value = args[3] || args[4] || args[5] || ''\n    const shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n    ? options.shouldDecodeNewlinesForHref\n    : options.shouldDecodeNewlines\n    attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("首先定义了"),e("code",[s._v("args")]),s._v("常量，它是解析出来的标签属性数组中的每一个属性对象，即"),e("code",[s._v("match.attrs")]),s._v("数组中每个元素对象。 它长这样：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('const args = ["class="a"", "class", "=", "a", undefined, undefined, index: 0, input: "class="a" id="b"></div>", groups: undefined]\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("接着定义了"),e("code",[s._v("value")]),s._v("，用于存储标签属性的属性值，我们可以看到，在代码中尝试取"),e("code",[s._v("args")]),s._v("的"),e("code",[s._v("args[3]")]),s._v("、"),e("code",[s._v("args[4]")]),s._v("、"),e("code",[s._v("args[5]")]),s._v("，如果都取不到，则给"),e("code",[s._v("value")]),s._v("复制为空")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const value = args[3] || args[4] || args[5] || ''\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("接着定义了"),e("code",[s._v("shouldDecodeNewlines")]),s._v("，这个常量主要是做一些兼容性处理， 如果 "),e("code",[s._v("shouldDecodeNewlines")]),s._v(" 为 "),e("code",[s._v("true")]),s._v("，意味着 "),e("code",[s._v("Vue")]),s._v(" 在编译模板的时候，要对属性值中的换行符或制表符做兼容处理。而"),e("code",[s._v("shouldDecodeNewlinesForHref")]),s._v(" 为 "),e("code",[s._v("true")]),s._v(" 意味着 "),e("code",[s._v("Vue")]),s._v("在编译模板的时候，要对 "),e("code",[s._v("a")]),s._v(" 标签的 "),e("code",[s._v("href")]),s._v(" 属性值中的换行符或制表符做兼容处理。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n    ? options.shouldDecodeNewlinesForHref\n    : options.shouldDecodeNewlinesconst value = args[3] || args[4] || args[5] || ''\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("最后将处理好的结果存入之前定义好的与"),e("code",[s._v("match.attrs")]),s._v("数组长度相等的"),e("code",[s._v("attrs")]),s._v("数组中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("attrs[i] = {\n    name: args[1],    // 标签属性的属性名，如class\n    value: decodeAttr(value, shouldDecodeNewlines) // 标签属性的属性值，如class对应的a\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("最后，如果该标签是非自闭合标签，则将标签推入栈中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (!unary) {\n    stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs })\n    lastTag = tagName\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("如果该标签是自闭标签，现在就可以调用"),e("code",[s._v("start")]),s._v("钩子函数并传入处理好的参数来创建"),e("code",[s._v("AST")]),s._v("节点了，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (options.start) {\n    options.start(tagName, attrs, unary, match.start, match.end)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("解析结束标签")])]),s._v(" "),e("p",[s._v("结束标签的解析要比解析开始标签容易多了，因为它不需要解析什么属性，只需要判断剩下的模板字符串是否符合结束标签的特征，如果是，就将结束标签名提取出来，再调用 4 个钩子函数中的"),e("code",[s._v("end")]),s._v("函数就好了。")]),s._v(" "),e("p",[s._v("首先判断剩余的模板字符串是否符合结束标签的特征，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*'\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`)\nconst endTagMatch = html.match(endTag)\n\n'</div>'.match(endTag)  // [\"</div>\", \"div\", index: 0, input: \"</div>\", groups: undefined]\n'<div>'.match(endTag)  // null\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("如果模板字符串结束标签的特征，则会获得匹配结果数组；如果不合符，则得到 null。")]),s._v(" "),e("p",[s._v("接着再调用"),e("code",[s._v("end")]),s._v("钩子函数，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (endTagMatch) {\n    const curIndex = index\n    advance(endTagMatch[0].length)\n    parseEndTag(endTagMatch[1], curIndex, index)\n    continue\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("没有直接去调用 end 函数，而是调用了 parseEndTag 函数。")]),s._v(" "),e("p",[e("strong",[s._v("解析文本")])]),s._v(" "),e("p",[s._v("在解析模板字符串之前，我们先查找一下第一个"),e("code",[s._v("<")]),s._v("出现在什么位置，如果第一个"),e("code",[s._v("<")]),s._v("在第一个位置，那么说明模板字符串是以其它 5 种类型开始的；如果第一个"),e("code",[s._v("<")]),s._v("不在第一个位置而在模板字符串中某个位置，那么说明模板字符串是以文本开头的，那么从开头到第一个"),e("code",[s._v("<")]),s._v("出现的位置就都是文本内容了；如果在整个模板字符串里面没有找到"),e("code",[s._v("<")]),s._v("，那说明整个模板字符串都是文本，源码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let textEnd = html.indexOf('<')\n// '<' 在第一个位置，为其余5种类型\nif (textEnd === 0) {\n    // ...\n}\n// '<' 不在第一个位置，文本开头\nif (textEnd >= 0) {\n    // 如果html字符串不是以'<'开头,说明'<'前面的都是纯文本，无需处理\n    // 那就把'<'以后的内容拿出来赋给rest\n    rest = html.slice(textEnd)\n    while (\n        !endTag.test(rest) &&\n        !startTagOpen.test(rest) &&\n        !comment.test(rest) &&\n        !conditionalComment.test(rest)\n    ) {\n        // < in plain text, be forgiving and treat it as text\n        /**\n           * 用'<'以后的内容rest去匹配endTag、startTagOpen、comment、conditionalComment\n           * 如果都匹配不上，表示'<'是属于文本本身的内容\n           */\n        // 在'<'之后查找是否还有'<'\n        next = rest.indexOf('<', 1)\n        // 如果没有了，表示'<'后面也是文本\n        if (next < 0) break\n        // 如果还有，表示'<'是文本中的一个字符\n        textEnd += next\n        // 那就把next之后的内容截出来继续下一轮循环匹配\n        rest = html.slice(textEnd)\n    }\n    // '<'是结束标签的开始 ,说明从开始到'<'都是文本，截取出来\n    text = html.substring(0, textEnd)\n    advance(textEnd)\n}\n// 整个模板字符串里没有找到`<`,说明整个模板字符串都是文本\nif (textEnd < 0) {\n    text = html\n    html = ''\n}\n// 把截取出来的text转化成textAST\nif (options.chars && text) {\n    options.chars(text)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br")])]),e("p",[s._v("如果"),e("code",[s._v("<")]),s._v(" 不在第一个位置而在模板字符串间某个位置，那么说明模板字符串是以文本开头的，那么从开头到第一个"),e("code",[s._v("<")]),s._v("出现的位置就都是文本内容了，接着我们还要从第一个"),e("code",[s._v("<")]),s._v("的位置继续向后判断，因为还存在这样一种情况，那就是如果广西里面本来就包含一个"),e("code",[s._v("<")]),s._v("，例如"),e("code",[s._v("1<2</div>")]),s._v("。为了处理这种情况，我们把从第一个"),e("code",[s._v("<")]),s._v("的位置直到模板字符串结束都截取出来记作"),e("code",[s._v("rest")]),s._v("，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let rest = html.slice(textEnd)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("接着用"),e("code",[s._v("rest")]),s._v("去匹配以上 5 种类型的正则，如果都匹配不上，则表明这个"),e("code",[s._v("<")]),s._v("是属于文本本身的内容，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("while (\n    !endTag.test(rest) &&\n    !startTagOpen.test(rest) &&\n    !comment.test(rest) &&\n    !conditionalComment.test(rest)\n) {\n\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("如果都匹配不上，则表明这个"),e("code",[s._v("<")]),s._v("是属于文本本身的内容，接着以这个"),e("code",[s._v("<")]),s._v("的位置继续向后查找，看是否还有"),e("code",[s._v("<")]),s._v("，如果没有了，则表示后面的都是文本；如果后面还有下一个"),e("code",[s._v("<")]),s._v("，那表明至少在这个"),e("code",[s._v("<")]),s._v("到下一个"),e("code",[s._v("<")]),s._v("中间的内容都是文本，至于下一个"),e("code",[s._v("<")]),s._v("以后的内容是什么，则还需要重复以上的逻辑继续判断。代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("while (\n    !endTag.test(rest) &&\n    !startTagOpen.test(rest) &&\n    !comment.test(rest) &&\n    !conditionalComment.test(rest)\n) {\n    // < in plain text, be forgiving and treat it as text\n    /**\n    * 用'<'以后的内容rest去匹配endTag、startTagOpen、comment、conditionalComment\n    * 如果都匹配不上，表示'<'是属于文本本身的内容\n    */\n    // 在'<'之后查找是否还有'<'\n    next = rest.indexOf('<', 1)\n    // 如果没有了，表示'<'后面也是文本\n    if (next < 0) break\n    // 如果还有，表示'<'是文本中的一个字符\n    textEnd += next\n    // 那就把next之后的内容截出来继续下一轮循环匹配\n    rest = html.slice(textEnd)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[s._v("最后截取文本内容 "),e("code",[s._v("text")]),s._v(" 并调用 4 个钩子函数中的 "),e("code",[s._v("chars")]),s._v(" 函数创建文本型的"),e("code",[s._v("AST")]),s._v(" 节点。")]),s._v(" "),e("p",[e("strong",[s._v("如何保证 AST 节点层级关系")])]),s._v(" "),e("p",[e("code",[s._v("Vue")]),s._v("在"),e("code",[s._v("HTML")]),s._v("解析器的开头定义了一个栈"),e("code",[s._v("stack")]),s._v("，这个栈的作用就是用来维护"),e("code",[s._v("AST")]),s._v("节点层级的，"),e("code",[s._v("HTML")]),s._v("解析器在从前向后解析模板字符串时，每当遇到开始标签时就会调用"),e("code",[s._v("start")]),s._v("钩子函数，那么在"),e("code",[s._v("start")]),s._v("钩子函数内部我们可以将解析得到的开始标签推入栈中，而每当遇到结束标签时就会调用"),e("code",[s._v("end")]),s._v("钩子函数，那么我们也可以在"),e("code",[s._v("end")]),s._v("钩子函数内部将解析得到的结束标签所对应的开始标签从栈中弹出。")]),s._v(" "),e("p",[s._v("解析器"),e("code",[s._v("parseHTML")]),s._v("函数，函数定义如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function parseHTML(html, options) {\n\tvar stack = [];\n\tvar expectHTML = options.expectHTML;\n\tvar isUnaryTag$$1 = options.isUnaryTag || no;\n\tvar canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n\tvar index = 0;\n\tvar last, lastTag;\n\n\t// 开启一个 while 循环，循环结束的条件是 html 为空，即 html 被 parse 完毕\n\twhile (html) {\n\t\tlast = html;\n\t\t// 确保即将 parse 的内容不是在纯文本标签里 (script,style,textarea)\n\t\tif (!lastTag || !isPlainTextElement(lastTag)) {\n\t\t   let textEnd = html.indexOf('<')\n              /**\n               * 如果html字符串是以'<'开头,则有以下几种可能\n               * 开始标签:<div>\n               * 结束标签:</div>\n               * 注释:\x3c!-- 我是注释 --\x3e\n               * 条件注释:\x3c!-- [if !IE] --\x3e \x3c!-- [endif] --\x3e\n               * DOCTYPE:<!DOCTYPE html>\n               * 需要一一去匹配尝试\n               */\n            if (textEnd === 0) {\n                // 解析是否是注释\n        \t\tif (comment.test(html)) {\n\n                }\n                // 解析是否是条件注释\n                if (conditionalComment.test(html)) {\n\n                }\n                // 解析是否是DOCTYPE\n                const doctypeMatch = html.match(doctype)\n                if (doctypeMatch) {\n\n                }\n                // 解析是否是结束标签\n                const endTagMatch = html.match(endTag)\n                if (endTagMatch) {\n\n                }\n                // 匹配是否是开始标签\n                const startTagMatch = parseStartTag()\n                if (startTagMatch) {\n\n                }\n            }\n            // 如果html字符串不是以'<'开头,则解析文本类型\n            let text, rest, next\n            if (textEnd >= 0) {\n\n            }\n            // 如果在html字符串中没有找到'<'，表示这一段html字符串都是纯文本\n            if (textEnd < 0) {\n                text = html\n                html = ''\n            }\n            // 把截取出来的text转化成textAST\n            if (options.chars && text) {\n                options.chars(text)\n            }\n\t\t} else {\n\t\t\t// 父元素为script、style、textarea时，其内部的内容全部当做纯文本处理\n\t\t}\n\n\t\t//将整个字符串作为文本对待\n\t\tif (html === last) {\n\t\t\toptions.chars && options.chars(html);\n\t\t\tif (!stack.length && options.warn) {\n\t\t\t\toptions.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Clean up any remaining tags\n\tparseEndTag();\n\t//parse 开始标签\n\tfunction parseStartTag() {\n\n\t}\n\t//处理 parseStartTag 的结果\n\tfunction handleStartTag(match) {\n\n\t}\n\t//parse 结束标签\n\tfunction parseEndTag(tagName, start, end) {\n\n\t}\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br"),e("span",{staticClass:"line-number"},[s._v("86")]),e("br"),e("span",{staticClass:"line-number"},[s._v("87")]),e("br"),e("span",{staticClass:"line-number"},[s._v("88")]),e("br"),e("span",{staticClass:"line-number"},[s._v("89")]),e("br"),e("span",{staticClass:"line-number"},[s._v("90")]),e("br"),e("span",{staticClass:"line-number"},[s._v("91")]),e("br")])]),e("p",[s._v("上述代码中大致分为三部分：")]),s._v(" "),e("ul",[e("li",[s._v("定义的一些常量和变量")]),s._v(" "),e("li",[s._v("while 循环")]),s._v(" "),e("li",[s._v("解析过程中用到的辅助函数")])]),s._v(" "),e("p",[s._v("定义了几个常量，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const stack = []       // 维护AST节点层级的栈\nconst expectHTML = options.expectHTML\nconst isUnaryTag = options.isUnaryTag || no\nconst canBeLeftOpenTag = options.canBeLeftOpenTag || no   //用来检测一个标签是否是可以省略闭合标签的非自闭合标签\nlet index = 0   //解析游标，标识当前从何处开始解析模板字符串\nlet last,   // 存储剩余还未解析的模板字符串\n    lastTag  // 存储着位于 stack 栈顶的元素\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("接着开启 while 循环，循环的终止条件是 模板字符串 html 为空，即模板字符串被全部编译完毕。在每次 while 循环中， 先把 html 的值赋给变量 last，如"),e("code",[s._v("last = html")])]),s._v(" "),e("p",[s._v("这样做的目的是，如果经过上述所有处理逻辑处理过后，"),e("code",[s._v("html")]),s._v("字符串没有任何变化，即表示"),e("code",[s._v("html")]),s._v("字符串没有匹配上任何一条规则，那么就把"),e("code",[s._v("html")]),s._v("字符串当作纯文本对待，创建文本类型的"),e("code",[s._v("AST")]),s._v("节点并且如果抛出异常：模板字符串中标签格式有误。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('//将整个字符串作为文本对待\nif (html === last) {\n    options.chars && options.chars(html);\n    if (!stack.length && options.warn) {\n        options.warn(("Mal-formatted tag at end of template: \\"" + html + "\\""));\n    }\n    break\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("接着，我们继续看"),e("code",[s._v("while")]),s._v("循环体内的代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("while (html) {\n  // 确保即将 parse 的内容不是在纯文本标签里 (script,style,textarea)\n  if (!lastTag || !isPlainTextElement(lastTag)) {\n\n  } else {\n    // parse 的内容是在纯文本标签里 (script,style,textarea)\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("在循环体内，首先判断了待解析的"),e("code",[s._v("html")]),s._v("字符串是否在纯文本标签里，如"),e("code",[s._v("script")]),s._v("，"),e("code",[s._v("style")]),s._v("，"),e("code",[s._v("textarea")]),s._v("，因为在这三个标签里的内容肯定不会有"),e("code",[s._v("HTML")]),s._v("标签，所以我们可直接当作文本处理，判断条件如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("!lastTag || !isPlainTextElement(lastTag)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("code",[s._v("lastTag")]),s._v("为栈顶元素，"),e("code",[s._v("!lastTag")]),s._v("即表示当前"),e("code",[s._v("html")]),s._v("字符串没有父节点，而"),e("code",[s._v("isPlainTextElement(lastTag)")]),s._v(" 是检测 "),e("code",[s._v("lastTag")]),s._v(" 是否为是那三个纯文本标签之一，是的话返回"),e("code",[s._v("true")]),s._v("，不是返回"),e("code",[s._v("fasle")])]),s._v(" "),e("p",[e("strong",[s._v("parseEndTag 函数源码")])]),s._v(" "),e("p",[s._v("在解析结束标签时遗留的"),e("code",[s._v("parseEndTag")]),s._v("函数，该函数定义如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function parseEndTag (tagName, start, end) {\nlet pos, lowerCasedTagName\nif (start == null) start = index\nif (end == null) end = index\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase()\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (let i = stack.length - 1; i >= pos; i--) {\n        if (process.env.NODE_ENV !== 'production' &&\n          (i > pos || !tagName) &&\n          options.warn\n        ) {\n          options.warn(\n            `tag <${stack[i].tag}> has no matching end tag.`\n          )\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end)\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos\n      lastTag = pos && stack[pos - 1].tag\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end)\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end)\n      }\n      if (options.end) {\n        options.end(tagName, start, end)\n      }\n    }\n\n}\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br")])]),e("p",[s._v("该函数接收三个参数，分别是结束标签名"),e("code",[s._v("tagName")]),s._v("、结束标签在"),e("code",[s._v("html")]),s._v("字符串中的起始和结束位置"),e("code",[s._v("start")]),s._v("和"),e("code",[s._v("end")]),s._v("。")]),s._v(" "),e("p",[s._v("这个三参数其实都是可选的，根据选参的不同其功能也不同。")]),s._v(" "),e("ul",[e("li",[s._v("第一种是三个参数都传递，用于处理普通的结束标签")]),s._v(" "),e("li",[s._v("第二种是只传递"),e("code",[s._v("tagName")])]),s._v(" "),e("li",[s._v("第三种是三参数都不传递，用于处理栈中剩余未处理的标签")])]),s._v(" "),e("p",[s._v("如果"),e("code",[s._v("tagName")]),s._v("存在，那么就从后往前遍历栈，在栈中寻找与"),e("code",[s._v("tagName")]),s._v("相同的标签并记录其所在的位置"),e("code",[s._v("pos")]),s._v("，如果"),e("code",[s._v("tagName")]),s._v("不存在，则将"),e("code",[s._v("pos")]),s._v("置为 0。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (tagName) {\n    for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n            break\n        }\n    }\n} else {\n    // If no tag name is provided, clean shop\n    pos = 0\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("接着"),e("code",[s._v("pos>=0")]),s._v("时，开启一个"),e("code",[s._v("for")]),s._v("循环，从栈顶位置从后向前遍历直到"),e("code",[s._v("pos")]),s._v("处，如果发现"),e("code",[s._v("stack")]),s._v("栈中存在索引大于"),e("code",[s._v("pos")]),s._v("元素，那么该元素一定是缺少闭合标签的，这是因为在正常情况下，"),e("code",[s._v("stack")]),s._v("栈的栈顶元素应该和当前的结束标签"),e("code",[s._v("tagName")]),s._v("匹配，也就是说正常的"),e("code",[s._v("pos")]),s._v("应该是栈顶位置，后面不应该再有元素，如果后面还有元素，那么后面的元素就都缺少闭合标签那么这个时候如果是在非生产环境会抛出警告，告诉你缺少闭合标签。除此之外，还会调用"),e("code",[s._v("options.end(stack[i].tag, start, end)")]),s._v(" 立即将其闭合，这是为了保证解析结果的正确性。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('if (pos >= 0) {\n\t// Close all the open elements, up the stack\n\tfor (var i = stack.length - 1; i >= pos; i--) {\n\t\tif (i > pos || !tagName ) {\n\t\t\toptions.warn(\n\t\t\t\t("tag <" + (stack[i].tag) + "> has no matching end tag.")\n\t\t\t);\n\t\t}\n\t\tif (options.end) {\n\t\t\toptions.end(stack[i].tag, start, end);\n\t\t}\n\t}\n\n\t// Remove the open elements from the stack\n\tstack.length = pos;\n\tlastTag = pos && stack[pos - 1].tag;\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("最后把"),e("code",[s._v("pos")]),s._v("位置以后的元素都从"),e("code",[s._v("stack")]),s._v("栈中弹出，以及把"),e("code",[s._v("lastTag")]),s._v("更新为栈顶元素")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("stack.length = pos;\nlastTag = pos && stack[pos - 1].tag;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("接着，如果"),e("code",[s._v("pos")]),s._v("没有大于等于 0，即当"),e("code",[s._v("tagName")]),s._v("没有在"),e("code",[s._v("stack")]),s._v("栈中找到对应的开始标签时，"),e("code",[s._v("pos")]),s._v("为-1。那么此时再判断"),e("code",[s._v("tagName")]),s._v("是否为"),e("code",[s._v("br")]),s._v("或"),e("code",[s._v("p")]),s._v("标签，为什么要单独判断这两个标签呢？这是因为在浏览器中如果我们写了如下"),e("code",[s._v("HTML")]),s._v("：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("<div>\n    </br>\n    </p>\n</div>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("浏览器会自动把"),e("code",[s._v("</br>")]),s._v("标签解析为正常的"),e("code",[s._v("<br>")]),s._v("标签，而对于"),e("code",[s._v("</p>")]),s._v("浏览器则自动将其补全为"),e("code",[s._v("<p></p>")]),s._v("，所以 Vue 为了与浏览器对这两个标签的行为保持一致，故对这两个便签单独判断处理，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (lowerCasedTagName === 'br') {\n    if (options.start) {\n        options.start(tagName, [], true, start, end)  // 创建<br>AST节点\n    }\n}\n// 补全p标签并创建AST节点\nif (lowerCasedTagName === 'p') {\n    if (options.start) {\n        options.start(tagName, [], false, start, end)\n    }\n    if (options.end) {\n        options.end(tagName, start, end)\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("以上就是对结束标签的解析与处理。")]),s._v(" "),e("p",[s._v("另外，在"),e("code",[s._v("while")]),s._v("循环后面还有一行代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("parseEndTag()\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("这行代码执行的时机是"),e("code",[s._v("html===last")]),s._v("，即"),e("code",[s._v("html")]),s._v("字符串中的标签格式有误时会跳出"),e("code",[s._v("while")]),s._v("循环，此时就会执行这行代码，这行代码是调用"),e("code",[s._v("parseEndTag")]),s._v("函数并不传递任何参数，如果"),e("code",[s._v("parseEndTag")]),s._v("函数不传递任何参数是用于处理栈中剩余未处理的标签。这是因为如果不传递任何函数，此时"),e("code",[s._v("parseEndTag")]),s._v("函数里的"),e("code",[s._v("pos")]),s._v("就为 0，那么"),e("code",[s._v("pos>=0")]),s._v("就会恒成立，那么就会逐个警告缺少闭合标签并调用"),e("code",[s._v("options.end")]),s._v("将其闭合。")]),s._v(" "),e("p",[e("strong",[s._v("总结")])]),s._v(" "),e("p",[s._v("首先介绍了"),e("code",[s._v("HTML")]),s._v("解析器的工作流程，一句话概括就是：一边解析不同的内容一边调用对应的钩子对应的钩子函数生成对应的"),e("code",[s._v("AST")]),s._v("节点，最终完成将整个模板字符串转化成"),e("code",[s._v("AST")]),s._v("。")]),s._v(" "),e("p",[s._v("接着介绍了"),e("code",[s._v("HTML")]),s._v("解析器是如何解析用户所写的模板字符串中各种类型的内容的，把各种类型的解析方式都分别进行了介绍。")]),s._v(" "),e("p",[s._v("其次，介绍了在解析器内维护了一个栈，用来保证构建的"),e("code",[s._v("AST")]),s._v("节点层级与真正"),e("code",[s._v("DOM")]),s._v("层级一致。")]),s._v(" "),e("h4",{attrs:{id:"_4-4-文本解析器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-文本解析器"}},[s._v("#")]),s._v(" 4.4 文本解析器")]),s._v(" "),e("p",[s._v("当"),e("code",[s._v("HTML")]),s._v("解析器解析到文本内容时会调用 4 个钩子函数中的"),e("code",[s._v("chars")]),s._v("函数来创建文本型的"),e("code",[s._v("AST")]),s._v("节点，并且也就说了在"),e("code",[s._v("chars")]),s._v("函数中会根据文本内容是否包含变量再细分为创建含有变量"),e("code",[s._v("AST")]),s._v("节点和不包含变量的"),e("code",[s._v("AST")]),s._v("节点，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 当解析到标签的文本时，触发chars\nchars(text){\n    if(res = parseText(text)){\n       let element = {\n           type: 2,\n           expression: res.expression,\n           tokens: res.tokens,\n           text\n       }\n    } else {\n       let element = {\n           type: 3,\n           text\n       }\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("创建含有变量的"),e("code",[s._v("AST")]),s._v("节点时节点的"),e("code",[s._v("type")]),s._v("属性为 2，并且相较于不包含变量的"),e("code",[s._v("AST")]),s._v("节点多了两个属性："),e("code",[s._v("expression")]),s._v("和"),e("code",[s._v("tokens")]),s._v("。那么如何来判断文本里面是否包含变量以及多的那两个属性是什么呢？这就涉及到文本解析器了，当"),e("code",[s._v("Vue")]),s._v("用"),e("code",[s._v("HTML")]),s._v("解析器解析出文本时，再将解析出来的文本解析器，最后由文本解析器解析该段文本里面是否包含变量以及如果包含变量时再解析"),e("code",[s._v("expression")]),s._v("和"),e("code",[s._v("tokens")]),s._v("。")]),s._v(" "),e("p",[e("strong",[s._v("结果分析")])]),s._v(" "),e("p",[s._v("从上面"),e("code",[s._v("chars")]),s._v("函数的代码中可以看到，把"),e("code",[s._v("HTML")]),s._v("解析器解析得到的文本内容"),e("code",[s._v("text")]),s._v("传给文本解析器"),e("code",[s._v("parseText")]),s._v("函数，根据"),e("code",[s._v("parseText")]),s._v("函数是否有返回值判断该文本是否包含变量，以及从返回值中取需要的"),e("code",[s._v("expression")]),s._v("和"),e("code",[s._v("tokens")]),s._v("。")]),s._v(" "),e("p",[s._v("假设现有由 "),e("code",[s._v("HTML")]),s._v(" 解析器解析得到的文本内容如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('let text = "我叫{{name}}，我今年{{age}}岁了"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("经过文本解析器解析后得到：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('let res = parseText(text)\nres = {\n    expression:"我叫"+_s(name)+"，我今年"+_s(age)+"岁了",\n    tokens:[\n        "我叫",\n        {\'@binding\': name },\n        "，我今年"\n        {\'@binding\': age },\n    \t"岁了"\n    ]\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("从上面的结果中我们看到到，"),e("code",[s._v("expression")]),s._v("属性就是把广西中的变量和非变量提出来，然后把变量用"),e("code",[s._v("_s()")]),s._v("包裹，最后按照文本里的顺序把它们用"),e("code",[s._v("+")]),s._v("连接起来。而"),e("code",[s._v("tokens")]),s._v("是个数组，数组内容也是文本中的变量和非变量，不一样的是把变量构造成"),e("code",[s._v("{'@binding': xxx}")]),s._v("。")]),s._v(" "),e("p",[s._v("这主要是为了给后面代码生成阶段的生成"),e("code",[s._v("render")]),s._v("函数时用的。")]),s._v(" "),e("p",[s._v("文本解析器内部就干了三件事：")]),s._v(" "),e("ul",[e("li",[s._v("判断传入的文本是否包含变量")]),s._v(" "),e("li",[s._v("构造 expression")]),s._v(" "),e("li",[s._v("构造 tokens")])]),s._v(" "),e("p",[e("strong",[s._v("源码分析")])]),s._v(" "),e("p",[s._v("文本解析器的源码位于"),e("code",[s._v("src/compiler/parser/text-parsre.js")]),s._v("中，代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g\nconst buildRegex = cached(delimiters => {\nconst open = delimiters[0].replace(regexEscapeRE, '\\\\$&')\n  const close = delimiters[1].replace(regexEscapeRE, '\\\\$&')\nreturn new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n})\nexport function parseText (text,delimiters) {\nconst tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE\nif (!tagRE.test(text)) {\nreturn\n}\nconst tokens = []\nconst rawTokens = []\n/\\*\\*\n\n- let lastIndex = tagRE.lastIndex = 0\n- 上面这行代码等同于下面这两行代码:\n- tagRE.lastIndex = 0\n- let lastIndex = tagRE.lastIndex\n  \\*/\n  let lastIndex = tagRE.lastIndex = 0\n  let match, index, tokenValue\n  while ((match = tagRE.exec(text))) {\n  index = match.index\n  // push text token\n  if (index > lastIndex) {\n  // 先把'{{'前面的文本放入tokens中\n      rawTokens.push(tokenValue = text.slice(lastIndex, index))\n      tokens.push(JSON.stringify(tokenValue))\n    }\n    // tag token\n    // 取出'{{ }}'中间的变量 exp\n  const exp = parseFilters(match[1].trim())\n  // 把变量 exp 改成\\_s(exp)形式也放入 tokens 中\n  tokens.push(`_s(${exp})`)\n  rawTokens.push({ '@binding': exp })\n  // 设置 lastIndex 以保证下一轮循环时，只从'}}'后面再开始匹配正则\n  lastIndex = index + match[0].length\n  }\n  // 当剩下的 text 不再被正则匹配上时，表示所有变量已经处理完毕\n  // 此时如果 lastIndex < text.length，表示在最后一个变量后面还有文本\n  // 最后将后面的文本再加入到 tokens 中\n  if (lastIndex < text.length) {\n  rawTokens.push(tokenValue = text.slice(lastIndex))\n  tokens.push(JSON.stringify(tokenValue))\n  }\n\n// 最后把数组 tokens 中的所有元素用'+'拼接起来\nreturn {\nexpression: tokens.join('+'),\ntokens: rawTokens\n}\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br")])]),e("p",[s._v("我们看到，除开我们自己加的注释，代码其实不复杂，我们逐行分析。")]),s._v(" "),e("p",[e("code",[s._v("parseText")]),s._v("函数接收两个参数，一个是传入的待解析的文本内容"),e("code",[s._v("text")]),s._v("，一个包裹变量的符号"),e("code",[s._v("delimiters")]),s._v("。第一个参数好理解，那第二个参数是干什么的呢？")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("函数体内首先定义了变量"),e("code",[s._v("tagRE")]),s._v("，表示一个正则表达式。这个正则表达式是用来检查广西是否包含变量的。我们知道，通常我们在模板中写变量时是这样写的：hello。这里用"),e("code",[s._v("{{}}")]),s._v("包裹的内容就是变量。所以我们就知道，"),e("code",[s._v("tagRE")]),s._v("是用来检测文本内是否有"),e("code",[s._v("{{}}")]),s._v("。而 "),e("code",[s._v("tagRE")]),s._v(" 又是可变的，它是根据是否传入了 "),e("code",[s._v("delimiters")]),s._v(" 参数从而又不同的值，也就是说如果没有传入 "),e("code",[s._v("delimiters")]),s._v(" 参数，则是检测文本是否包含"),e("code",[s._v("{{}}")]),s._v("，如果传入了值，就会检测文本是否包含传入的值。换句话说在开发 Vue 项目中，用户可以自定义文本内包含变量所使用的符号，例如你可以使用"),e("code",[s._v("%")]),s._v("包裹变量如："),e("code",[s._v("hello %name%")]),s._v("。")]),s._v(" "),e("p",[s._v("接下来用"),e("code",[s._v("tagRE")]),s._v("去匹配传入的文本内容，判断是否包含变量，若不包含，则直接返回，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (!tagRE.test(text)) {\n    return\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("如果包含变量，那就继续往下看：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const tokens = []\nconst rawTokens = []\nlet lastIndex = tagRE.lastIndex = 0\nlet match, index, tokenValue\nwhile ((match = tagRE.exec(text))) {\n\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("接下来会开启一个"),e("code",[s._v("while")]),s._v("循环，循环结束条件是"),e("code",[s._v("tagRE.exec(text)")]),s._v("的结果"),e("code",[s._v("match")]),s._v("是否为"),e("code",[s._v("null")]),s._v("，"),e("code",[s._v("exec()")]),s._v("方法是在一个字符串中执行切匹配检索，如果它没有找到任何切尔西就返回"),e("code",[s._v("null")]),s._v("，但如果它找到了一个匹配就返回一个数组，例如：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('tagRE.exec("hello {{name}}，I am {{age}}")\n//返回：["{{name}}", "name", index: 6, input: "hello {{name}}，I am {{age}}", groups: undefined]\ntagRE.exec("hello")\n//返回：null\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("当匹配上时，匹配结果的第一个元素是字符串中第一个完整的带有包裹的变量，第二个元素是第一个被包裹的变量名，第三个元素是第一个变量字符串中的起始位置。")]),s._v(" "),e("p",[s._v("接着往下循环体内：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("while ((match = tagRE.exec(text))) {\n    index = match.index\n    if (index > lastIndex) {\n      // 先把'{{'前面的文本放入tokens中\n      rawTokens.push(tokenValue = text.slice(lastIndex, index))\n      tokens.push(JSON.stringify(tokenValue))\n    }\n    // tag token\n    // 取出'{{ }}'中间的变量exp\n    const exp = match[1].trim()\n    // 把变量exp改成_s(exp)形式也放入tokens中\n    tokens.push(`_s(${exp})`)\n    rawTokens.push({ '@binding': exp })\n    // 设置lastIndex 以保证下一轮循环时，只从'}}'后面再开始匹配正则\n    lastIndex = index + match[0].length\n  }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("首先取得字符串中第一个变量在字符串中的起始位置赋给"),e("code",[s._v("index")]),s._v("，然后比较"),e("code",[s._v("index")]),s._v("和"),e("code",[s._v("lastIndex")]),s._v("的大小，此时你可能有疑问了，这个"),e("code",[s._v("lastIndex")]),s._v("是什么呢？在上面定义变量中，定义了 "),e("code",[s._v("let lastIndex = tagRE.lastIndex = 0")]),s._v(",所以 "),e("code",[s._v("lastIndex")]),s._v(" 就是 "),e("code",[s._v("tagRE.lastIndex")]),s._v("，而 "),e("code",[s._v("tagRE.lastIndex")]),s._v(" 又是什么呢？当调用 "),e("code",[s._v("exec( )")]),s._v("的正则表达式对象具有修饰符 "),e("code",[s._v("g")]),s._v(" 时，它将把当前正则表达式对象的 "),e("code",[s._v("lastIndex")]),s._v(" 属性设置为紧挨着匹配子串的字符位置，当同一个正则表达式第二次调用 "),e("code",[s._v("exec( )")]),s._v("，它会将从 "),e("code",[s._v("lastIndex")]),s._v(" 属性所指示的字符串处开始检索，如果 "),e("code",[s._v("exec( )")]),s._v("没有发现任何匹配结果，它会将 "),e("code",[s._v("lastIndex")]),s._v(" 重置为 0。示例如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('const tagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g\ntagRE.exec("hello {{name}}，I am {{age}}")\ntagRE.lastIndex   // 14\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("code",[s._v("tagRE.lastIndex")]),s._v("就是第一个包裹变量最后一个"),e("code",[s._v("}")]),s._v("所在字符串中的位置。"),e("code",[s._v("lastIndex")]),s._v(" 初始值为 0。")]),s._v(" "),e("p",[s._v("当"),e("code",[s._v("index>lastIndex")]),s._v("时，表示变量前面有纯文本，那么就把这段纯文本截取出来，存入"),e("code",[s._v("rawTokens")]),s._v("中，同时再调用"),e("code",[s._v("JSON.stringify")]),s._v("给这段文本包裹上双引号，存入"),e("code",[s._v("tokens")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (index > lastIndex) {\n    // 先把'{{'前面的文本放入tokens中\n    rawTokens.push(tokenValue = text.slice(lastIndex, index))\n    tokens.push(JSON.stringify(tokenValue))\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("如果"),e("code",[s._v("index")]),s._v("不大于"),e("code",[s._v("lastIndex")]),s._v("，那说明"),e("code",[s._v("index")]),s._v("也为 0，即该文本一开始就是变量，例如："),e("code",[s._v("hello")]),s._v("。那么此时变量前面没有纯文本，那就不用截取，直接取出匹配结果的第一个元素变量名，将其用"),e("code",[s._v("_s()")]),s._v("包裹存入"),e("code",[s._v("tokens")]),s._v("中，同时再把变量名构造成"),e("code",[s._v("{'@binding': exp}")]),s._v("存入 "),e("code",[s._v("rawTokens")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 取出'{{ }}'中间的变量exp\nconst exp = match[1].trim()\n// 把变量exp改成_s(exp)形式也放入tokens中\ntokens.push(`_s(${exp})`)\nrawTokens.push({ '@binding': exp })\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("接着，更新 "),e("code",[s._v("lastIndex")]),s._v(" 以保证下一轮循环时，只从"),e("code",[s._v("}}")]),s._v("后面再开始匹配正则，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("lastIndex = index + match[0].length\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("接着，当"),e("code",[s._v("while")]),s._v("循环完毕时，表明文本中所有变量已经被解析完毕，如果此时"),e("code",[s._v("lastIndex < text.length")]),s._v("，那就说明最后一个变量的后面还有纯文本，那就将其再存入"),e("code",[s._v("tokens")]),s._v("和"),e("code",[s._v("rawTokens")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 当剩下的text不再被正则匹配上时，表示所有变量已经处理完毕\n// 此时如果lastIndex < text.length，表示在最后一个变量后面还有文本\n// 最后将后面的文本再加入到tokens中\nif (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex))\n    tokens.push(JSON.stringify(tokenValue))\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("最后，把"),e("code",[s._v("tokens")]),s._v("数组里的元素用"),e("code",[s._v("+")]),s._v("连接，和"),e("code",[s._v("rawTokens")]),s._v("一并返回，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[e("strong",[s._v("总结")])]),s._v(" "),e("p",[s._v("文本解析器的作用就是将"),e("code",[s._v("HTML")]),s._v("解析器解析得到的文本内容进行二次解析，解析文本内容中是否包含变量，如果包含变量，则将变量提取出进行加工，为后续生产"),e("code",[s._v("render")]),s._v("函数做准备。")]),s._v(" "),e("h4",{attrs:{id:"_4-5-优化阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-优化阶段"}},[s._v("#")]),s._v(" 4.5 优化阶段")]),s._v(" "),e("p",[s._v("模板编译的最终目的是用模板生成一个"),e("code",[s._v("render")]),s._v("函数，而用"),e("code",[s._v("render")]),s._v("函数就可以生成与模板对应的"),e("code",[s._v("VNode")]),s._v("，之后再进行"),e("code",[s._v("patch")]),s._v("算法，最后完成视图渲染。这中间的"),e("code",[s._v("patch")]),s._v("算法又是用来对比新旧"),e("code",[s._v("VNode")]),s._v("之间存在的差异。静态节点不管状态怎么变化它是不会变的，基于此，在"),e("code",[s._v("patch")]),s._v("过程中不用去对比这些静态节点了。")]),s._v(" "),e("p",[s._v("我们在模板编译的时候就先找出模板中所有的静态节点和静态根节点，然后给它们打上标记，用于告诉后面"),e("code",[s._v("patch")]),s._v("过程打了标记的这些节点是不需要对比的，你只要把它们克隆一份去用就好啦。这就是优化阶段存在的意义。")]),s._v(" "),e("p",[s._v("优化阶段其实干了两件事：")]),s._v(" "),e("ol",[e("li",[s._v("在"),e("code",[s._v("AST")]),s._v("中找出所有静态节点并打上标记；")]),s._v(" "),e("li",[s._v("在"),e("code",[s._v("AST")]),s._v("中找出所有表态根节点并打上标记；")])]),s._v(" "),e("p",[s._v("优化阶段的源码位于"),e("code",[s._v("src/compiler/optimizer.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nexport function optimize (root: ?ASTElement, options: CompilerOptions) {\nif (!root) return\nisStaticKey = genStaticKeysCached(options.staticKeys || '')\nisPlatformReservedTag = options.isReservedTag || no\n// 标记静态节点\nmarkStatic(root)\n// 标记静态根节点\nmarkStaticRoots(root, false)\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[e("strong",[s._v("标记静态节点")])]),s._v(" "),e("p",[s._v("从"),e("code",[s._v("AST")]),s._v("中找出所有静态节点并标记其实不难，我们只需从根节点开始，先标记点是否静态节点，然后看根节点如果是元素节点，那么就向下递归它的子节点，子节点如果还有子节点那就继续向下递归，直到标记完所有节点。代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nfunction markStatic (node: ASTNode) {\nnode.static = isStatic(node)\nif (node.type === 1) {\n// do not make component slot content static. this avoids\n// 1. components not able to mutate slot nodes\n// 2. static slot content fails for hot-reloading\nif (\n!isPlatformReservedTag(node.tag) &&\nnode.tag !== 'slot' &&\nnode.attrsMap['inline-template'] == null\n) {\nreturn\n}\nfor (let i = 0, l = node.children.length; i < l; i++) {\nconst child = node.children[i]\nmarkStatic(child)\nif (!child.static) {\nnode.static = false\n}\n}\nif (node.ifConditions) {\nfor (let i = 1, l = node.ifConditions.length; i < l; i++) {\nconst block = node.ifConditions[i].block\nmarkStatic(block)\nif (!block.static) {\nnode.static = false\n}\n}\n}\n}\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br")])]),e("p",[s._v("上面代码中，首先调用"),e("code",[s._v("isStatic")]),s._v("函数标记节点是否为静态节点，该函数若返回"),e("code",[s._v("true")]),s._v("表示该节点是静态节点，若返回"),e("code",[s._v("false")]),s._v("表示该节点不是静态节点，函数实现如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nfunction isStatic (node: ASTNode): boolean {\nif (node.type === 2) { // 包含变量的动态文本节点\nreturn false\n}\nif (node.type === 3) { // 不包含变量的纯文本节点\nreturn true\n}\nreturn !!(node.pre || (\n!node.hasBindings && // no dynamic bindings\n!node.if && !node.for && // not v-if or v-for or v-else\n!isBuiltInTag(node.tag) && // not a built-in\nisPlatformReservedTag(node.tag) && // not a component\n!isDirectChildOfTemplateFor(node) &&\nObject.keys(node).every(isStaticKey)\n))\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("p",[s._v("该函数的实现过程其实也说明了如何判断一个节点是否为静态节点。还记得在"),e("code",[s._v("HTML")]),s._v("解析器在调用钩子函数创建"),e("code",[s._v("AST")]),s._v("节点时会根据节点类型的不同为节点加上不同的"),e("code",[s._v("type")]),s._v("属性，用"),e("code",[s._v("type")]),s._v("属性来标记"),e("code",[s._v("AST")]),s._v("节点的节点类型，其对应关系如下：")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("type 取值")]),s._v(" "),e("th",[s._v("对应的 AST 节点类型")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("1")]),s._v(" "),e("td",[s._v("元素节点")])]),s._v(" "),e("tr",[e("td",[s._v("2")]),s._v(" "),e("td",[s._v("包含变量的动态文本节点")])]),s._v(" "),e("tr",[e("td",[s._v("3")]),s._v(" "),e("td",[s._v("不包含变量的纯文本节点")])])])]),s._v(" "),e("p",[s._v("在判断一个节点是否为静态节点时首先会根据"),e("code",[s._v("type")]),s._v("值")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("如果"),e("code",[s._v("type")]),s._v("值为 2，")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (node.type === 3) { // 不包含变量的纯文本节点\n    return true\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("如果"),e("code",[s._v("type")]),s._v("值为 1")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("node.pre ||\n(\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("如果元素节点是静态节点，那就必须满足以下几点要求：")]),s._v(" "),e("ul",[e("li",[s._v("如果节点使用"),e("code",[s._v("v-pre")]),s._v("指令，那就断定它是静态节点；")]),s._v(" "),e("li",[s._v("如果节点没有使用"),e("code",[s._v("v-pre")]),s._v("指令，那它要成为静态节点必须满足：\n"),e("ul",[e("li",[s._v("不能使用动态绑定语法，即标签上不能有"),e("code",[s._v("v-")]),s._v("、"),e("code",[s._v("@")]),s._v("、"),e("code",[s._v(":")]),s._v("开头的属性；")]),s._v(" "),e("li",[s._v("不能使用"),e("code",[s._v("v-if")]),s._v("、"),e("code",[s._v("v-else")]),s._v("、"),e("code",[s._v("v-for")]),s._v(" 指令；")]),s._v(" "),e("li",[s._v("不能是内置组件，即标签名不能是"),e("code",[s._v("slot")]),s._v("和"),e("code",[s._v("component")]),s._v(";")]),s._v(" "),e("li",[s._v("标签名必须是平台保留标签，即不能是组件；")]),s._v(" "),e("li",[s._v("当前节点的父节点不能是带有"),e("code",[s._v("v-for")]),s._v("和"),e("code",[s._v("template")]),s._v("标签；")]),s._v(" "),e("li",[s._v("节点的所有属性的"),e("code",[s._v("key")]),s._v("都必须是静态节点才有的"),e("code",[s._v("key")]),s._v("，注：静态节点的"),e("code",[s._v("key")]),s._v("是有限的，它只能是"),e("code",[s._v("type")]),s._v("、"),e("code",[s._v("tag")]),s._v("、"),e("code",[s._v("attrsList")]),s._v("、"),e("code",[s._v("attrsMap")]),s._v("、"),e("code",[s._v("plain")]),s._v("、"),e("code",[s._v("parent")]),s._v("、"),e("code",[s._v("children")]),s._v("、"),e("code",[s._v("attrs")]),s._v("之一；")])])])]),s._v(" "),e("p",[s._v("标记完当前节点是否为静态节点之后，如果该节点是元素节点，那么还要继续去递归判断它的子节点，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("for (let i = 0, l = node.children.length; i < l; i++) {\n    const child = node.children[i]\n    markStatic(child)\n    if (!child.static) {\n    node.static = false\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("新增了一个判断：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (!child.static) {\n    node.static = false\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("如果当前节点的子节点有一个不是静态节点，那就把当前节点也标记为非静态节点。我们在判断的时候是从上往下判断的，也就是说先判断当前节点，再判断当前节点的子节点，如果当前在一开始被标记为了静态节点，但是通过判断子节点的时候发现有一个子节点却不是静态节点，这就有问题了，我们之前说过一旦标记为静态节点，就说明这个节点首次渲染之后不会再发生任何变化，但是它的一个子节点却又是可以变化的，就出现了自相矛盾，所以我们需要当发现它的子节点中有一个不是静态节点的时候，就得把当前节点重新设置为非静态节点。")]),s._v(" "),e("p",[s._v("循环"),e("code",[s._v("node.children")]),s._v("后还不算把所有子节点都遍历完，因为如果当前节点的子节点中有标签带有"),e("code",[s._v("v-if")]),s._v("、"),e("code",[s._v("v-else-if")]),s._v("、"),e("code",[s._v("v-else")]),s._v("等指令时，这些子节点在每次渲染时都只渲染一个，所以其余没有被渲染的肯定不在"),e("code",[s._v("node.children")]),s._v("中，而是存在于"),e("code",[s._v("node.ifConditions")]),s._v("，所以我们还要把"),e("code",[s._v("node.ifConditions")]),s._v("循环一遍，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (node.ifConditions) {\n    for (let i = 1, l = node.ifConditions.length; i < l; i++) {\n        const block = node.ifConditions[i].block\n        markStatic(block)\n        if (!block.static) {\n            node.static = false\n        }\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("同理，如果当前节点的"),e("code",[s._v("node.ifConditions")]),s._v("中有一个子节点不是静态节点也要将当前节点设置为非静态节点。")]),s._v(" "),e("p",[e("strong",[s._v("标记静态根节点")])]),s._v(" "),e("p",[s._v("寻找表态根节点找静态节点的逻辑类似，都是从"),e("code",[s._v("AST")]),s._v("根节点递归向上遍历寻找，其代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function markStaticRoots (node: ASTNode, isInFor: boolean) {\nif (node.type === 1) {\nif (node.static || node.once) {\nnode.staticInFor = isInFor\n}\n// For a node to qualify as a static root, it should have children that\n// are not just static text. Otherwise the cost of hoisting out will\n// outweigh the benefits and it's better off to just always render it fresh.\nif (node.static && node.children.length && !(\nnode.children.length === 1 &&\nnode.children[0].type === 3\n)) {\nnode.staticRoot = true\nreturn\n} else {\nnode.staticRoot = false\n}\nif (node.children) {\nfor (let i = 0, l = node.children.length; i < l; i++) {\nmarkStaticRoots(node.children[i], isInFor || !!node.for)\n}\n}\nif (node.ifConditions) {\nfor (let i = 1, l = node.ifConditions.length; i < l; i++) {\nmarkStaticRoots(node.ifConditions[i].block, isInFor)\n}\n}\n}\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br")])]),e("p",[e("code",[s._v("markStaticRoots")]),s._v("第二个参数是"),e("code",[s._v("isInFor")]),s._v("，对于已经是"),e("code",[s._v("static")]),s._v("的节点或者是"),e("code",[s._v("v-once")]),s._v("指令的节点，"),e("code",[s._v("node.staicInFor = isInFor")]),s._v("，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (node.static || node.once) {\n    node.staticInFor = isInFor\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("接着判断该节点是否为静态根节点，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (node.static && node.children.length && !(\n    node.children.length === 1 &&\n    node.children[0].type === 3\n)) {\n    node.staticRoot = true\n    return\n} else {\n    node.staticRoot = false\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("一个节点要想成为表态根节点，它必须满足以下要求：")]),s._v(" "),e("ul",[e("li",[s._v("节点本身必须是静态节点；")]),s._v(" "),e("li",[s._v("必须拥有子节点"),e("code",[s._v("children")]),s._v("；")]),s._v(" "),e("li",[s._v("子节点不能只是只有一个")])]),s._v(" "),e("p",[s._v("否则的话，对它的优化成本将大于优化后带来的收益。")]),s._v(" "),e("p",[s._v("如果当前节点不是静态根节点，那就继续递归遍历它的子节点"),e("code",[s._v("node.children和node.ifConditions")]),s._v("，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (node.children) {\n    for (let i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for)\n    }\n}\nif (node.ifConditions) {\n    for (let i = 1, l = node.ifConditions.length; i < l; i++) {\n        markStaticRoots(node.ifConditions[i].block, isInFor)\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[e("strong",[s._v("总结")])]),s._v(" "),e("p",[s._v("首先，介绍了为什么要有优化阶段，是为了提高虚拟"),e("code",[s._v("DOM")]),s._v("中"),e("code",[s._v("patch")]),s._v("过程的性能。在优化阶段将所有表态节点都打上标记，这样在"),e("code",[s._v("patch")]),s._v("过程中就可以跳过对比这些节点。")]),s._v(" "),e("p",[s._v("接着，介绍了优化阶段主要干了两件事件，分别是从构建出的"),e("code",[s._v("AST")]),s._v("中找出并标记所有静态节点和所有表态根节点。")]),s._v(" "),e("h4",{attrs:{id:"_4-6-代码生成阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-代码生成阶段"}},[s._v("#")]),s._v(" 4.6 代码生成阶段")]),s._v(" "),e("p",[e("code",[s._v("Vue")]),s._v("实例在挂载的时候会调用其自身的"),e("code",[s._v("render")]),s._v("函数来生成实例上的"),e("code",[s._v("template")]),s._v("选项所对应的"),e("code",[s._v("VNode")]),s._v("，简单的来说就是"),e("code",[s._v("Vue")]),s._v("只要调用了"),e("code",[s._v("render")]),s._v("函数，就可以把模板转换成对应的虚拟"),e("code",[s._v("DOM")]),s._v("。那么"),e("code",[s._v("Vue")]),s._v("要想调用"),e("code",[s._v("render")]),s._v("函数，那必须先有这个"),e("code",[s._v("render")]),s._v("函数，那这个"),e("code",[s._v("render")]),s._v("函数又是从哪来的呢？是用户手写的还是"),e("code",[s._v("Vue")]),s._v("自己生成的？答案是都有可能。我们在日常开发中是可以在"),e("code",[s._v("Vue")]),s._v("组件选项中手写一个"),e("code",[s._v("render")]),s._v("选项，其值对应一个函数，那这个函数就是"),e("code",[s._v("render")]),s._v("函数，当用户手写了"),e("code",[s._v("render")]),s._v("函数时，那么"),e("code",[s._v("Vue")]),s._v("在挂载该组件的时候就会调用用户手写的这个"),e("code",[s._v("render")]),s._v("函数。那如果用户没有写呢？那这个时候"),e("code",[s._v("Vue")]),s._v("就要自己根据模板内容生成一个"),e("code",[s._v("render")]),s._v("函数供组件挂载的时候调用。")]),s._v(" "),e("p",[e("strong",[s._v("如何根据 AST 生成 render 函数")])]),s._v(" "),e("p",[s._v("代码生成阶段主要的工作就是根据已有的"),e("code",[s._v("AST")]),s._v("生成对应的"),e("code",[s._v("render")]),s._v("函数供组件挂载时调用，组件只要调用的这个"),e("code",[s._v("render")]),s._v("函数就可以得到"),e("code",[s._v("AST")]),s._v("对应的虚拟"),e("code",[s._v("DOM")]),s._v("的"),e("code",[s._v("VNode")]),s._v("。那么如何根据"),e("code",[s._v("AST")]),s._v("生成"),e("code",[s._v("render")]),s._v("函数呢？")]),s._v(" "),e("p",[s._v("假设现有如下模板：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<div id="NLRX"><p>Hello {{name}}</p></div>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("该模板经过解析并优化后对应的"),e("code",[s._v("AST")]),s._v("如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("ast = {\n    'type':1,\n    'tag':'div',\n    'attrsList':[\n        {\n            'name':'id',\n            'value':'NLRX'\n        }\n    ],\n    'attrsMap':{\n        'id':'NLRX'\n    },\n    'static':false,\n    'parent':undefined,\n    'plain':false,\n    'children':[{\n        'type':1,\n        'tag':'p',\n        'plain':false,\n        'static':false,\n        'children':[\n            {\n                'type': 2,\n                'expression': '\"Hello \"+_s(name)',\n                'text': 'Hello {{name}}',\n                'static':false,\n            }\n        ]\n    }]\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br")])]),e("p",[s._v("根据已有的这个"),e("code",[s._v("AST")]),s._v("来生成对应的"),e("code",[s._v("render")]),s._v("函数。生成"),e("code",[s._v("render")]),s._v("函数的过程其实就是一个递归的过程，从顶向下依次递归"),e("code",[s._v("AST")]),s._v("中的每一个节点，根据不同的"),e("code",[s._v("AST")]),s._v("节点类型创建不同的"),e("code",[s._v("VNode")]),s._v("类型。接下来我们就来照已有的模板和"),e("code",[s._v("AST")]),s._v("实际演示了一下生成"),e("code",[s._v("render")]),s._v("函数的过程。")]),s._v(" "),e("ol",[e("li",[s._v("首先，根节点"),e("code",[s._v("div")]),s._v("是一个元素型"),e("code",[s._v("AST")]),s._v("节点，那么我们就要创建一个元素型"),e("code",[s._v("VNode")]),s._v("，我们把创建元素型"),e("code",[s._v("VNode")]),s._v("的方法叫做"),e("code",[s._v("_c(tagName,data,children)")]),s._v("。我们暂且不管"),e("code",[s._v("_c()")]),s._v("是什么，只需知道调用"),e("code",[s._v("_c()")]),s._v("就可以创建一个元素型"),e("code",[s._v("VNode")]),s._v("。那么就可以生成如下代码：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('_c(\'div\',{attrs:{"id":"NLRX"}},[/*子节点列表*/])\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("根节点"),e("code",[s._v("div")]),s._v("有子节点，那么我们进入子节点列表"),e("code",[s._v("children")]),s._v("里遍历子节点，发现子节点"),e("code",[s._v("p")]),s._v("也是元素型的，那就继续创建元素型"),e("code",[s._v("VNode")]),s._v("并将其放入上述代码中根节点的子节点列表中，如下：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("_c('div',{attrs:{\"id\":\"NLRX\"}},[_c('p',{attrs:{}},[/*子节点列表*/])])\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ol",{attrs:{start:"3"}},[e("li",[s._v("同理，继续遍历"),e("code",[s._v("p")]),s._v("节点的子节点，发现是一个文本型节点，那就创建一个文本型"),e("code",[s._v("VNode")]),s._v("并将其插入到"),e("code",[s._v("p")]),s._v("节点的子节点列表中，同理，创建文本型"),e("code",[s._v("VNode")]),s._v("我们调用"),e("code",[s._v("_v()")]),s._v("方法，如下：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('_c(\'div\',{attrs:{"id":"NLRX"}},[_c(\'p\',{attrs:{}},[_v("Hello "+_s(name))])])\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ol",{attrs:{start:"4"}},[e("li",[s._v("到此，整个"),e("code",[s._v("AST")]),s._v("就遍历完毕了，我们将得到的代码再包装一下，如下：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(' with(this){\n   reurn _c(\n     \'div\',\n     {\n       attrs:{"id":"NLRX"},\n     },\n     [\n       _c(\n         \'p\',\n         {\n           attrs:{}\n         },\n         [\n           _v("Hello "+_s(name))\n         ]\n       )\n     ]\n   )\n }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("ol",{attrs:{start:"5"}},[e("li",[s._v("最后，我们将上面得到的这个函数字符串传递给"),e("code",[s._v("createFunction")]),s._v("函数，"),e("code",[s._v("createFunction")]),s._v("函数会帮我们把得到的函数字符串转换成真正的函数，赋给组件中的"),e("code",[s._v("render")]),s._v("选项，从而就是"),e("code",[s._v("render")]),s._v("选项，从而就是"),e("code",[s._v("render")]),s._v("函数了。如下：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("res.render = createFunction(compiled.render, fnGenErrors)\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err, code })\n    return noop\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[e("strong",[s._v("源码分析")])]),s._v(" "),e("p",[s._v("代码生成阶段的源码位于"),e("code",[s._v("src/compiler/codegen/index.js")]),s._v("中，源码虽然很长，但是逻辑不复杂，核心逻辑如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function generate (ast,option) {\n  const state = new CodegenState(options)\n  const code = ast ? genElement(ast, state) : '_c(\"div\")'\n  return {\n    render: `with(this){return ${code}}`,\n    staticRenderFns: state.staticRenderFns\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("调用"),e("code",[s._v("generate")]),s._v("函数并传入优化后得到的"),e("code",[s._v("ast")]),s._v("，在"),e("code",[s._v("generate")]),s._v("函数内部先判断"),e("code",[s._v("ast")]),s._v("是否为空，不为空则调用"),e("code",[s._v("genElement(ast, state)")]),s._v("函数创建"),e("code",[s._v("VNode")]),s._v("，为空则创建一上空的元素型"),e("code",[s._v("div")]),s._v("的"),e("code",[s._v("VNode")]),s._v("。然后将得到的结果用"),e("code",[s._v("with(this){return ${code}}")]),s._v("包裹返回。可以看出，真正起作用的是"),e("code",[s._v("genElement")]),s._v("函数。")]),s._v(" "),e("p",[e("code",[s._v("genElement")]),s._v("函数定义如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function genElement (el, state) {\n  if (el.parent) {\n    el.pre = el.pre || el.parent.pre\n  }\n\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    let code\n    if (el.component) {\n      code = genComponent(el.component, el, state)\n    } else {\n      let data\n      if (!el.plain || (el.pre && state.maybeComponent(el))) {\n        data = genData(el, state)\n      }\n\n      const children = el.inlineTemplate ? null : genChildren(el, state, true)\n      code = `_c('${el.tag}'${\n        data ? `,${data}` : '' // data\n      }${\n        children ? `,${children}` : '' // children\n      })`\n    }\n    // module transforms\n    for (let i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code)\n    }\n    return code\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br")])]),e("p",[e("code",[s._v("genElement")]),s._v("函数逻辑很清晰，就是根据当前"),e("code",[s._v("AST")]),s._v("元素节点属性不同从而执行不同的代码生成函数。虽然元素节点属性的情况有很多种，但是最后真正创建出来的"),e("code",[s._v("VNode")]),s._v("无非就三种，分别是元素节点，文本节点，注释节点。")]),s._v(" "),e("p",[e("strong",[s._v("元素节点")])]),s._v(" "),e("p",[s._v("生成元素型节点的"),e("code",[s._v("render")]),s._v("函数代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const data = el.plain ? undefined : genData(el, state)\n\nconst children = el.inlineTemplate ? null : genChildren(el, state, true)\ncode = `_c('${el.tag}'${\ndata ? `,${data}` : '' // data\n}${\nchildren ? `,${children}` : '' // children\n})`\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("生成元素节点的"),e("code",[s._v("render")]),s._v("函数就是生成一个"),e("code",[s._v("_c()")]),s._v("函数调用的字符串，上文提到了"),e("code",[s._v("_c()")]),s._v("函数接收三个参数，分别是节点的标签名"),e("code",[s._v("tagName")]),s._v("，节点属性"),e("code",[s._v("data")]),s._v("，节点的子节点列表"),e("code",[s._v("children")]),s._v("。我们只需将这三部分都填进去即可。")]),s._v(" "),e("ol",[e("li",[s._v("获取节点属性 data")])]),s._v(" "),e("p",[s._v("首先判断"),e("code",[s._v("plain")]),s._v("属性是否为"),e("code",[s._v("true")]),s._v("，若为"),e("code",[s._v("true")]),s._v("则表示节点没有属性，将"),e("code",[s._v("data")]),s._v("赋值为"),e("code",[s._v("undefined")]),s._v("；如果不为"),e("code",[s._v("true")]),s._v("则调用"),e("code",[s._v("genData")]),s._v("函数获取节点属性"),e("code",[s._v("data")]),s._v("数据。"),e("code",[s._v("genData")]),s._v("函数定义如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function genData (el: ASTElement, state: CodegenState): string {\n  let data = '{'\n  const dirs = genDirectives(el, state)\n  if (dirs) data += dirs + ','\n\n    // key\n    if (el.key) {\n        data += `key:${el.key},`\n    }\n    // ref\n    if (el.ref) {\n        data += `ref:${el.ref},`\n    }\n    if (el.refInFor) {\n        data += `refInFor:true,`\n    }\n    // pre\n    if (el.pre) {\n        data += `pre:true,`\n    }\n    // 篇幅所限，省略其他情况的判断\n    data = data.replace(/,$/, '') + '}'\n    return data\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br")])]),e("p",[s._v("源码中"),e("code",[s._v("genData")]),s._v("虽然很长，但是其逻辑非常简单，就是在拼接字符串,先给"),e("code",[s._v("data")]),s._v("赋值为一个"),e("code",[s._v("{")]),s._v("，然后判断存在哪些属性数据，就将这些数据拼接到"),e("code",[s._v("data")]),s._v("中，最后再加一个"),e("code",[s._v("}")]),s._v("，最终得到节点全部属性"),e("code",[s._v("data")]),s._v("。")]),s._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[s._v("获取子节点列表 children")])]),s._v(" "),e("p",[s._v("获取子节点列表"),e("code",[s._v("children")]),s._v("其实就是遍历"),e("code",[s._v("AST")]),s._v("的"),e("code",[s._v("children")]),s._v("属性中的元素，然后根据元素属性的不同生成不同的"),e("code",[s._v("VNode")]),s._v("创建函数调用字符串，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function genChildren (el):  {\n    if (children.length) {\n        return `[${children.map(c => genNode(c, state)).join(',')}]`\n    }\n}\nfunction genNode (node: ASTNode, state: CodegenState): string {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("ol",{attrs:{start:"3"}},[e("li",[s._v("上面两步完成之后，生成"),e("code",[s._v("_c()")]),s._v("函数调用字符串，如下：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("code = `_c('${el.tag}'${\n    data ? `,${data}` : '' // data\n}${\n    children ? `,${children}` : '' // children\n})`\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[e("strong",[s._v("文本节点")])]),s._v(" "),e("p",[s._v("文本型的"),e("code",[s._v("VNode")]),s._v("可以调用"),e("code",[s._v("_v(text)")]),s._v("函数来创建，所以生成文本节点的"),e("code",[s._v("render")]),s._v("函数就是生成一个"),e("code",[s._v("_v(text)")]),s._v("函数调用的字符串。"),e("code",[s._v("_v()")]),s._v("函数接收文本内容作为参数，如果文本是动态文本，则使用动态文本"),e("code",[s._v("AST")]),s._v("节点的"),e("code",[s._v("expression")]),s._v("属性，如果是纯静态文本，则使用"),e("code",[s._v("text")]),s._v("属性，其生成代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function genText (text: ASTText | ASTExpression): string {\n  return `_v(${text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))\n  })`\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("strong",[s._v("注释节点")])]),s._v(" "),e("p",[s._v("注释型的"),e("code",[s._v("VNode")]),s._v("可以调用"),e("code",[s._v("_e(text)")]),s._v("函数来创建，所以生成注释节点的"),e("code",[s._v("render")]),s._v("函数就是生成一个"),e("code",[s._v("_e(text)")]),s._v("函数调用的字符串。"),e("code",[s._v("_e()")]),s._v("函数接收注释内容作为参数，其生成代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function genComment (comment: ASTText): string {\n  return `_e(${JSON.stringify(comment.text)})`\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("总结")])]),s._v(" "),e("p",[s._v("首先，介绍了为什么要有代码生成阶段以及代码生成阶段主要干什么。我们知道了，代码生成其实就是根据模板对应的抽象语法树"),e("code",[s._v("AST")]),s._v("生成一个函数供组件挂载时调用，通过调用这个函数就可以得到模板对应的虚拟"),e("code",[s._v("DOM")]),s._v("。")]),s._v(" "),e("p",[s._v("接着，我们通过一个简单的模板演示了把模板经过递归遍历最后生成"),e("code",[s._v("render")]),s._v("函数的过程。")]),s._v(" "),e("p",[s._v("最后，我们回归源码，通过分析源码了解了生成"),e("code",[s._v("render")]),s._v("函数的具体实现过程。")]),s._v(" "),e("h4",{attrs:{id:"_4-7-整体流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-整体流程"}},[s._v("#")]),s._v(" 4.7 整体流程")]),s._v(" "),e("p",[s._v("模板编译就是把模板转化成供"),e("code",[s._v("Vue")]),s._v("实例在挂载时可以调用的"),e("code",[s._v("render")]),s._v("函数。那么我们就从"),e("code",[s._v("Vue")]),s._v("实例挂载时入手，一步一步从后往前推。"),e("code",[s._v("Vue")]),s._v("实例在挂载时会调用全局实例方法——"),e("code",[s._v("$mount")]),s._v("方法。"),e("code",[s._v("$mount")]),s._v("方法，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.prototype.$mount = function(el) {\n  const options = this.$options;\n  // 如果用户没有手写render函数\n  if (!options.render) {\n    // 获取模板，先尝试获取内部模板，如果获取不到则获取外部模板\n    let template = options.template;\n    if (template) {\n    } else {\n      template = getOuterHTML(el);\n    }\n    const { render, staticRenderFns } = compileToFunctions(\n      template,\n      {\n        shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      },\n      this\n    );\n    options.render = render;\n    options.staticRenderFns = staticRenderFns;\n  }\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br")])]),e("p",[s._v("首先从"),e("code",[s._v("Vue")]),s._v("实例的属性选项中获取"),e("code",[s._v("render")]),s._v("选项，如果没有获取到，说明用户没有手写"),e("code",[s._v("render")]),s._v("函数，那么此时，需要"),e("code",[s._v("Vue")]),s._v("自己将模板转化成"),e("code",[s._v("render")]),s._v("函数。接着获取模板，先尝试获取内部模板，如果获取不到则获取外部模板。最后，调用"),e("code",[s._v("compileToFunctions")]),s._v("函数将模板转化成 "),e("code",[s._v("render")]),s._v(" 函数，再将 "),e("code",[s._v("render")]),s._v(" 函数赋值给 "),e("code",[s._v("options.render")]),s._v("。")]),s._v(" "),e("p",[s._v("核心部分是调用 "),e("code",[s._v("compileToFunctions")]),s._v(" 函数生成 "),e("code",[s._v("render")]),s._v(" 函数的部分，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const { render, staticRenderFns } = compileToFunctions(\n  template,\n  {\n    shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref,\n    delimiters: options.delimiters,\n    comments: options.comments\n  },\n  this\n);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("将模板"),e("code",[s._v("template")]),s._v("传给"),e("code",[s._v("compileToFunctions")]),s._v("函数就可以得到"),e("code",[s._v("render")]),s._v("函数，那这个"),e("code",[s._v("compileToFunctions")]),s._v("函数是怎么来的呢？")]),s._v(" "),e("p",[s._v("通过代码跳转发现"),e("code",[s._v("compileToFunctions")]),s._v("函数的出处如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const { compile, compileToFunctions } = createCompiler(baseOptions);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("code",[s._v("compileToFunctions")]),s._v("函数是"),e("code",[s._v("createCompiler")]),s._v("函数的返回值对象中的其中一个，"),e("code",[s._v("createCompiler")]),s._v("函数顾名思义他的作用就是创建一个编译器。")]),s._v(" "),e("p",[e("code",[s._v("createCompiler")]),s._v("函数出处位于源码的"),e("code",[s._v("src/complier/index.js")]),s._v("文件中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export const createCompiler = createCompilerCreator(function baseCompile(\n  template: string,\n  options: CompilerOptions\n): CompiledResult {\n  // 模板解析阶段：用正则等方式解析 template 模板中的指令、class、style等数据，形成AST\n  const ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    // 优化阶段：遍历AST，找出其中的静态节点，并打上标记；\n    optimize(ast, options);\n  }\n  // 代码生成阶段：将AST转换成渲染函数；\n  const code = generate(ast, options);\n  return {\n    ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  };\n});\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("p",[e("code",[s._v("createCompiler")]),s._v("函数是又调用"),e("code",[s._v("createCompilerCreator")]),s._v("函数返回得到的，"),e("code",[s._v("createCompilerCreator")]),s._v("函数接收一个"),e("code",[s._v("baseCompile")]),s._v("函数作为参数。这个"),e("code",[s._v("baseCompile")]),s._v("函数，这个函数就是我们据说的模板编译三大阶段的主函数。这个函数传给"),e("code",[s._v("createCompilerCreator")]),s._v("函数就可以得到"),e("code",[s._v("createCompiler")]),s._v("函数，那么我们再往前推，看一下"),e("code",[s._v("createCompilerCreator")]),s._v("函数又是怎么定义的。")]),s._v(" "),e("p",[e("code",[s._v("createCompilerCreator")]),s._v("函数的定义位于源码的"),e("code",[s._v("src/complier/create-compiler.js")]),s._v("文件中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function createCompilerCreator(baseCompile) {\n  return function createCompiler(baseOptions) {};\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("调用"),e("code",[s._v("createCompilerCreator")]),s._v("函数会返回"),e("code",[s._v("createCompiler")]),s._v("函数，可以看到"),e("code",[s._v("createCompiler")]),s._v("函数的定义，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function createCompiler(baseOptions) {\n  function compile() {}\n  return {\n    compile,\n    compileToFunctions: createCompileToFunctionFn(compile)\n  };\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("在"),e("code",[s._v("createCompiler")]),s._v("函数的内部定义了一个子函数"),e("code",[s._v("compile")]),s._v("，同时返回一个对象，其中这个对象的第二个属性就是我们在开头看到的"),e("code",[s._v("compileToFunctions")]),s._v("，其值对应的是"),e("code",[s._v("createCompileToFunctionFn(compile)")]),s._v("函数的返回值。")]),s._v(" "),e("p",[e("code",[s._v("createCompileToFunctionFn(compile)")]),s._v("函数的出处位于源码的"),e("code",[s._v("src/complier/to-function.js")]),s._v("文件中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function createCompileToFunctionFn(compile) {\n  return function compileToFunctions() {\n    // compile\n    const res = {};\n    const compiled = compile(template, options);\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(code => {\n      return createFunction(code, fnGenErrors);\n    });\n    return res;\n  };\n}\n\nfunction createFunction(code, errors) {\n  try {\n    return new Function(code);\n  } catch (err) {\n    errors.push({ err, code });\n    return noop;\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("调用"),e("code",[s._v("createCompileToFunctionFn")]),s._v("函数就可以得到")]),s._v(" "),e("p",[e("code",[s._v("compileToFunctions")]),s._v("函数内部会调用传入的"),e("code",[s._v("compile")]),s._v("函数，而这个"),e("code",[s._v("compile")]),s._v("函数是"),e("code",[s._v("createCompiler")]),s._v("函数内部定义的子函数，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function compile(template, options) {\n  const compiled = baseCompile(template, finalOptions);\n  compiled.errors = errors;\n  compiled.tips = tips;\n  return compiled;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("在"),e("code",[s._v("compile")]),s._v("函数内部又会调用传入的"),e("code",[s._v("baseCompile")]),s._v("函数，而这个"),e("code",[s._v("baseCompile")]),s._v("函数就是我们所说的模板编译三大阶段的主线函数，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function baseCompile (\n  template: string,\n  options: CompilerOptions\n): CompiledResult {\n  // 模板解析阶段：用正则等方式解析 template 模板中的指令、class、style等数据，形成AST\n  const ast = parse(template.trim(), options)\n  if (options.optimize !== false) {\n    // 优化阶段：遍历AST，找出其中的静态节点，并打上标记；\n    optimize(ast, options)\n  }\n  // 代码生成阶段：将AST转换成渲染函数；\n  const code = generate(ast, options)\n  return {\n    ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("最开始调用的"),e("code",[s._v("compileToFunctions")]),s._v("函数内部调用了"),e("code",[s._v("compile")]),s._v("函数，在"),e("code",[s._v("compile")]),s._v("函数内部又调用了"),e("code",[s._v("baseCompile")]),s._v("函数，而"),e("code",[s._v("baseCompile")]),s._v("函数返回的是代码生成阶段生成好的"),e("code",[s._v("render")]),s._v(" 函数字符串。所以在"),e("code",[s._v("compileToFunctions")]),s._v("函数内部调用"),e("code",[s._v("compile")]),s._v("函数就可以拿到生成好的"),e("code",[s._v("render")]),s._v("函数字符串，然后在"),e("code",[s._v("compileToFunctions")]),s._v("函数内部将"),e("code",[s._v("render")]),s._v("函数字符串传给"),e("code",[s._v("createFunction")]),s._v("函数从而变成真正的"),e("code",[s._v("render")]),s._v("函数返回出去，最后将其赋值给"),e("code",[s._v("options.render")]),s._v("。画出其上述过程的流程图。如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:"vue18.jpg",alt:"images"}})]),s._v(" "),e("p",[s._v("模板编译的整体流程。")]),s._v(" "),e("p",[e("strong",[s._v("整体导图")])]),s._v(" "),e("p",[e("img",{attrs:{src:"vue19.jpg",alt:"images"}})]),s._v(" "),e("h3",{attrs:{id:"五、生命周期篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、生命周期篇"}},[s._v("#")]),s._v(" 五、生命周期篇")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#_5-1-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%98%B6%E6%AE%B5"}},[s._v("初始化阶段")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#_5-2-%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5"}},[s._v("模板编译阶段")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#_5-3-%E6%8C%82%E8%BD%BD%E9%98%B6%E6%AE%B5"}},[s._v("挂载阶段")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#_5-4-%E9%94%80%E6%AF%81%E9%98%B6%E6%AE%B5"}},[s._v("销毁阶段")])])]),s._v(" "),e("p",[e("code",[s._v("Vue")]),s._v("实例的生命周期大致可分为 4 个阶段：")]),s._v(" "),e("ul",[e("li",[s._v("初始化阶段：为"),e("code",[s._v("Vue")]),s._v("实例上初始化一些属性，事件以及响应式数据；")]),s._v(" "),e("li",[s._v("模板编译阶段：将模板编译成渲染函数；")]),s._v(" "),e("li",[s._v("挂载阶段：将实例挂载到指定的"),e("code",[s._v("DOM")]),s._v("上，即将模板渲染到真实"),e("code",[s._v("DOM")]),s._v("中；")]),s._v(" "),e("li",[s._v("销毁阶段：将实例自身从父组件中删除，并取消依赖追踪及事件监听器；")])]),s._v(" "),e("h4",{attrs:{id:"_5-1-初始化阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-初始化阶段"}},[s._v("#")]),s._v(" 5.1 初始化阶段")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("new Vue")])]),s._v(" "),e("li",[e("code",[s._v("initLifecycle")])]),s._v(" "),e("li",[e("code",[s._v("initEvents")])]),s._v(" "),e("li",[e("code",[s._v("initInjections")])]),s._v(" "),e("li",[e("code",[s._v("initState")])])]),s._v(" "),e("p",[e("strong",[s._v("new Vue 都干了什么")])]),s._v(" "),e("p",[s._v("初始化阶段所做的第一件事就是"),e("code",[s._v("new Vue()")]),s._v("创建一个"),e("code",[s._v("Vue")]),s._v("实例，那么"),e("code",[s._v("new Vue()")]),s._v("的内部都干了什么呢？我们知道，"),e("code",[s._v("new")]),s._v("关键字在"),e("code",[s._v("JS")]),s._v("中表示从一个类中实例化出一个对象来，由此可见，"),e("code",[s._v("Vue")]),s._v("实际上是一个类。所以"),e("code",[s._v("new Vue()")]),s._v("实际上是执行了"),e("code",[s._v("Vue")]),s._v("类的构造函数，"),e("code",[s._v("Vue")]),s._v("类的定义是在源码的"),e("code",[s._v("src/core/instance/index.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nfunction Vue (options) {\nif (process.env.NODE_ENV !== 'production' &&\n!(this instanceof Vue)\n) {\nwarn('Vue is a constructor and should be called with the `new` keyword')\n}\nthis._init(options)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("可以看到，"),e("code",[s._v("Vue")]),s._v("类的定义非常简单，其构造函数核心就一行代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("this._init(options)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("调用原型上的"),e("code",[s._v("_init(options)")]),s._v("方法并把用户所写的选项"),e("code",[s._v("options")]),s._v("传入。在"),e("code",[s._v("Vue")]),s._v("类定义的下面还有几行代码，其中之一就是：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("initMixin(Vue)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("这一行代码执行了"),e("code",[s._v("initMixin")]),s._v("函数，那"),e("code",[s._v("initMixin")]),s._v("函数又是从哪儿来的呢？该函数定义位于源码的``中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    const vm = this\n    vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n    )\n    vm._self = vm\n    initLifecycle(vm)\n    initEvents(vm)\n    initRender(vm)\n    callHook(vm, 'beforeCreate')\n    initInjections(vm) // resolve injections before data/props\n    initState(vm)\n    initProvide(vm) // resolve provide after data/props\n    callHook(vm, 'created')\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el)\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("p",[s._v("在"),e("code",[s._v("initMixin")]),s._v("函数内部就只干了一件事，那就是给"),e("code",[s._v("Vue")]),s._v("类的原型上绑定"),e("code",[s._v("_init")]),s._v("方法，同时"),e("code",[s._v("_init")]),s._v(" 方法的定义也在该函数内部。"),e("code",[s._v("new Vue()")]),s._v(" 会执行"),e("code",[s._v("Vue")]),s._v("类的构造函数，构造函数内部会执行"),e("code",[s._v("_init")]),s._v("方法，所以"),e("code",[s._v("new Vue()")]),s._v("所干的事情其实就是"),e("code",[s._v("_init")]),s._v("方法所干的事情。")]),s._v(" "),e("p",[s._v("首先，把"),e("code",[s._v("Vue")]),s._v("实例赋值给变量"),e("code",[s._v("vm")]),s._v("，并且把用户传递的"),e("code",[s._v("options")]),s._v("选项与当前构造函数的"),e("code",[s._v("options")]),s._v("属性及其父级构造函数的"),e("code",[s._v("options")]),s._v("属性进行合并，得到一个新的"),e("code",[s._v("options")]),s._v("选项赋值给$options 属性，并将"),e("code",[s._v("$options")]),s._v("属性挂载到"),e("code",[s._v("Vue")]),s._v("实例上，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$options = mergeOptions(\n    resolveConstructorOptions(vm.constructor),\n    options || {},\n    vm\n)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("接着，通过调用一些初始化函数来为"),e("code",[s._v("Vue")]),s._v("实例初始化一些属性，事件，响应式数据等，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("initLifecycle(vm)       // 初始化生命周期\ninitEvents(vm)        // 初始化事件\ninitRender(vm)         // 初始化渲染\ncallHook(vm, 'beforeCreate')  // 调用生命周期钩子函数\ninitInjections(vm)   //初始化injections\ninitState(vm)    // 初始化props,methods,data,computed,watch\ninitProvide(vm) // 初始化 provide\ncallHook(vm, 'created')  // 调用生命周期钩子函数\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("可以看到，除了调用初始化函数来进行相关数据的初始化之外，还在合适的时机调用了"),e("code",[s._v("callHook")]),s._v("函数来触发生命周期的钩子，关于"),e("code",[s._v("callHook")]),s._v("函数是如何触发生命周期的钩子会在下面介绍，我们先继续往下看：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (vm.$options.el) {\n    vm.$mount(vm.$options.el)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("在所有的初始化工作都完成以后，最后，会判断用户是否传入了"),e("code",[s._v("el")]),s._v("选项，如果传入了则调用"),e("code",[s._v("$mount")]),s._v("函数进入模板编译与挂载阶段，如果没有传入 el 选项，则不进入下一个生命周期阶段，需要用户手动执行"),e("code",[s._v("vm.$mount")]),s._v("方法才进入下一个生命周期阶段。")]),s._v(" "),e("p",[s._v("以上就是"),e("code",[s._v("new Vue()")]),s._v("所做的所有事情，可以看到，整个初始化阶段都是在"),e("code",[s._v("new Vue()")]),s._v("里完成的，关于"),e("code",[s._v("new Vue()")]),s._v("里调用的一些初始化函数具体是如何进行初始化的，我们将在接下来的几篇文章里逐一介绍。下面我们先来看看上文中遗留的属性合并及"),e("code",[s._v("callHook")]),s._v("函数是如何触发生命周期的钩子的问题。")]),s._v(" "),e("p",[e("strong",[s._v("合并属性")])]),s._v(" "),e("p",[s._v("在上文中，"),e("code",[s._v("_init")]),s._v("方法里首先会调用"),e("code",[s._v("mergeOptions")]),s._v("函数来进行属性合并，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$options = mergeOptions(\nresolveConstructorOptions(vm.constructor),\noptions || {},\nvm\n)\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("它实际上就是把 "),e("code",[s._v("resolveConstructorOptions(vm.constructor)")]),s._v(" 的返回值和 "),e("code",[s._v("options")]),s._v(" 做合并，返回"),e("code",[s._v("vm.constructor.options")]),s._v("，相当于"),e("code",[s._v("Vue.options")]),s._v("，那么这个"),e("code",[s._v("Vue.options")]),s._v("又是什么呢，其实在"),e("code",[s._v("initGlobalAPI(Vue)")]),s._v("的时候定义了这个值，代码在"),e("code",[s._v("src/core/global-api/index.js")]),s._v("中：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function initGlobalAPI (Vue: GlobalAPI) {\n// ...\nVue.options = Object.create(null)\nASSET_TYPES.forEach(type => {\nVue.options[type + 's'] = Object.create(null)\n})\n\nextend(Vue.options.components, builtInComponents)\n// ...\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("首先通过"),e("code",[s._v("Vue.options = Object.create(null)")]),s._v("创建一个空对象，然后遍历"),e("code",[s._v("ASSET_TYPES")]),s._v("，"),e("code",[s._v("ASSET_TYPES")]),s._v("的定义在"),e("code",[s._v("src/shared/contstants.js")]),s._v("中：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export const ASSET_TYPES = [\n'component',\n'directive',\n'filter'\n]\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("上面遍历"),e("code",[s._v("ASSET_TYPES")]),s._v("后代码相当于：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.options.components = {}\nVue.options.directives = {}\nVue.options.filters = {}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("最后通过"),e("code",[s._v("extend(Vue.options.components,builtInCompontents)")]),s._v("把一些内置组件扩展到"),e("code",[s._v("Vue.options.components")]),s._v("上，"),e("code",[s._v("Vue")]),s._v("的内置组件目前有"),e("code",[s._v("<keep-alive>")]),s._v("、"),e("code",[s._v("<transition>")]),s._v("和"),e("code",[s._v("<transition-group>")]),s._v("组件，这也就是为什么我们在其它组件中使用这些组件不需要注册的原因。")]),s._v(" "),e("p",[e("code",[s._v("mergeOptions")]),s._v("这个函数，它的定义在"),e("code",[s._v("src/core/util/options.js")]),s._v("中：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("  export function mergeOptions (\n  parent: Object,\n  child: Object,\n  vm?: Component\n  ): Object {\n  if (process.env.NODE_ENV !== 'production') {\n  checkComponents(child)\n  }\n\n    if (typeof child === 'function') {\n    child = child.options\n    }\n\nnormalizeProps(child, vm)\nnormalizeInject(child, vm)\nnormalizeDirectives(child)\n\n// Apply extends and mixins on the child options,\n// but only if it is a raw options object that isn't\n// the result of another mergeOptions call.\n// Only merged options has the \\_base property.\nif (!child.\\_base) {\nif (child.extends) {\nparent = mergeOptions(parent, child.extends, vm)\n}\nif (child.mixins) {\nfor (let i = 0, l = child.mixins.length; i < l; i++) {\nparent = mergeOptions(parent, child.mixins[i], vm)\n}\n}\n}\n\nconst options = {}\nlet key\nfor (key in parent) {\nmergeField(key)\n}\nfor (key in child) {\nif (!hasOwn(parent, key)) {\nmergeField(key)\n}\n}\nfunction mergeField (key) {\nconst strat = strats[key] || defaultStrat\noptions[key] = strat(parent[key], child[key], vm, key)\n}\nreturn options\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br")])]),e("p",[s._v("可以看出，"),e("code",[s._v("mergeOptions")]),s._v("函数的主要功能是把"),e("code",[s._v("parent")]),s._v("和"),e("code",[s._v("child")]),s._v("这两个对象根据一些合并策略，合并成一个新对象并返回。首先递归把"),e("code",[s._v("extends")]),s._v("和"),e("code",[s._v("mixins")]),s._v("合并到"),e("code",[s._v("parent")]),s._v("上")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" const extendsFrom = child.extends\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm)\n  }\n  if (child.mixins) {\n    for (let i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm)\n    }\n  }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("然后创建一个空对象"),e("code",[s._v("options")]),s._v("，遍历"),e("code",[s._v("parent")]),s._v("，把"),e("code",[s._v("parent")]),s._v("中的每一项通过调用"),e("code",[s._v("mergeField")]),s._v("函数合并到空对象"),e("code",[s._v("options")]),s._v("里")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const options = {}\nlet key\nfor (key in parent) {\n    mergeField(key)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("接着再遍历"),e("code",[s._v("child")]),s._v("，把存在于"),e("code",[s._v("child")]),s._v("里但又不在"),e("code",[s._v("parent")]),s._v("中的属性继续调用"),e("code",[s._v("mergeField")]),s._v("函数合并到空对象"),e("code",[s._v("options")]),s._v("里。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("for (key in child) {\n    if (!hasOwn(parent, key)) {\n        mergeField(key)\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[e("code",[s._v("options")]),s._v("就是最终合并后得到的结果，将其返回。")]),s._v(" "),e("p",[s._v("值得一提的是"),e("code",[s._v("mergeField")]),s._v("函数，它不是简单的把属性从一个对象里复制到另外一个对象里，而是根据被合并的不同的选项有着不同的合并策略。")]),s._v(" "),e("p",[s._v("生命周期钩子函数的合并策略如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function mergeHook(parentVal,childVal){\n    return childVal? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(hook => {\n    strats[hook] = mergeHook\n})\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("这其中的"),e("code",[s._v("LIFECYCLE_HOOKS")]),s._v("的定义在"),e("code",[s._v("src/shared/constants.js")]),s._v("中：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export const LIFECYCLE_HOOKS = [\n'beforeCreate',\n'created',\n'beforeMount',\n'mounted',\n'beforeUpdate',\n'updated',\n'beforeDestroy',\n'destroyed',\n'activated',\n'deactivated',\n'errorCaptured'\n]\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("这里定义了所有钩子函数名称，所以对于钩子函数的合并策略都是"),e("code",[s._v("mergeHook")]),s._v("函数。"),e("code",[s._v("mergeHook")]),s._v("函数的实现了一个多层嵌套的三元运算符，如果嵌套太不好理解的话我们可以将其展开，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function mergeHook (parentVal,childVal):  {\n if (childVal) {\n   if (parentVal) {\n     return parentVal.concat(childVal)\n   } else {\n     if (Array.isArray(childVal)) {\n       return childVal\n     } else {\n       return [childVal]\n     }\n   }\n } else {\n   return parentVal\n }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("它的合并策略是这样子的：如果"),e("code",[s._v("childVal")]),s._v("不存在，就返回"),e("code",[s._v("parentVal")]),s._v("；否则再判断是否存在"),e("code",[s._v("parentVal")]),s._v("，如果存在就把"),e("code",[s._v("childVal")]),s._v(" 添加到 "),e("code",[s._v("parentVal")]),s._v(" 后返回新数组；否则返回 "),e("code",[s._v("childVal")]),s._v(" 的数组。所以回到 "),e("code",[s._v("mergeOptions")]),s._v(" 函数，一旦 "),e("code",[s._v("parent")]),s._v("和 "),e("code",[s._v("child")]),s._v(" 都定义了相同的钩子函数，那么它们会把 2 个钩子函数合并成一个数组。")]),s._v(" "),e("p",[e("strong",[s._v("callHook 函数如何触发钩子函数")])]),s._v(" "),e("p",[s._v("关于"),e("code",[s._v("callHook")]),s._v("函数如何触发钩子函数的问题，我们只需看一下该函数的实现源码即可，该函数的源码位于"),e("code",[s._v("src/core/instance/lifecycle.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nexport function callHook(vm,hook){\nconst handlers = vm.\\$options[hook]\nif(handlers){\nfor(let i = 0,j = handlers.length;i<j;i++){\ntry{\nhanlders[i].call(vm)\n}catch(e){\nhandleError(e,vm,`${hook} hook`)\n}\n}\n}\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("可以看到，"),e("code",[s._v("callHook")]),s._v("函数逻辑非常简单。首先从实例的"),e("code",[s._v("$options")]),s._v("中获取到需要触发的钩子名称所对应的钩子函数数组"),e("code",[s._v("handlers")]),s._v("，每个生命周期钩子名称都对应一个钩子函数数组。然后遍历该数组，将数组中的每个钩子函数都执行一遍。")]),s._v(" "),e("p",[e("strong",[s._v("总结")])]),s._v(" "),e("p",[s._v("首先，分析了"),e("code",[s._v("new Vue()")]),s._v("时其内部都干了些什么。其主要逻辑就是：合并配置，调用一些初始化函数，触发生命周期钩子函数，调用"),e("code",[s._v("$mount")]),s._v("开启下一个阶段。")]),s._v(" "),e("p",[s._v("接着，就合并属性进行了详细介绍，知道了对于不同的选项有着不同的合并策略，并挑出钩子函数的合并特事特办进行了分析。")]),s._v(" "),e("p",[s._v("最后，分析了"),e("code",[s._v("callHook")]),s._v("函数的源码，知道了"),e("code",[s._v("callHook")]),s._v("函数如何触发钩子函数的。")]),s._v(" "),e("p",[e("strong",[s._v("initLifecycle 函数分析")])]),s._v(" "),e("p",[e("code",[s._v("initLifecycle")]),s._v("函数的定义的位于源码的"),e("code",[s._v("src/core/instance/lifecycle.js")]),s._v("中，其代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function initLifecycle (vm: Component) {\nconst options = vm.$options\n\n// locate first non-abstract parent\nlet parent = options.parent\nif (parent && !options.abstract) {\nwhile (parent.$options.abstract && parent.$parent) {\nparent = parent.$parent\n    }\n    parent.$children.push(vm)\n}\n\nvm.$parent = parent\n  vm.$root = parent ? parent.\\$root : vm\n\nvm.$children = []\n  vm.$refs = {}\n\nvm._watcher = null\nvm._inactive = null\nvm._directInactive = false\nvm._isMounted = false\nvm._isDestroyed = false\nvm._isBeingDestroyed = false\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br")])]),e("p",[e("code",[s._v("initLifecycle")]),s._v("函数主要是给"),e("code",[s._v("Vue")]),s._v("实例上挂载了一 hxxf 属性并设置了默认值，值得一提的是挂载"),e("code",[s._v("$parent")]),s._v("属性和"),e("code",[s._v("$root")]),s._v("属性。")]),s._v(" "),e("p",[s._v("首先给实例上挂载"),e("code",[s._v("$parent")]),s._v("属性，代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let parent = options.parent\nif (parent && !options.abstract) {\n  while (parent.$options.abstract && parent.$parent) {\n    parent = parent.$parent\n  }\n  parent.$children.push(vm)\n}\n\nvm.$parent = parent\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("如果当前组件不是抽象组件并且存在父级，那么就通过"),e("code",[s._v("while")]),s._v("循环来向上循环，如果当前组件的父级是抽象组件并且也存在父级，那那就继续向上查找当前组件父级的父级，直到找到第一个不是抽象类型的父级时，将其赋值"),e("code",[s._v("vm.$parent")]),s._v("，同时把该实例自身添加进找到的父级的"),e("code",[s._v("$children")]),s._v("属性中。这样就确保了在子组件的"),e("code",[s._v("$parent")]),s._v("属性上能访问到父组件实例，在父组件的"),e("code",[s._v("$children")]),s._v("属性上也能访问子组件的实例。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$root = parent ? parent.$root : vm\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("实例的"),e("code",[s._v("$root")]),s._v("属性表示当前实例的根实例，挂载该属性时，首先会判断如果当前实例存在父级，那么当前实例的根实例"),e("code",[s._v("$root")]),s._v("属性就是其父级的根实例"),e("code",[s._v("$root")]),s._v("属性，如果不存在，那么根实例"),e("code",[s._v("$root")]),s._v("属性就是它自己。这很好理解，举个例子：假如有一个人，他如果有父亲，那么他父亲的祖先肯定也是他的祖先，同理，他的儿子的祖先也肯定是他的祖先，我们不需要真正的一层一层的向上递归查找到他祖先本人，只需要知道他父亲的祖先是谁然后告诉他即可。如果他没有父亲，那说明他自己就是祖先，那么他后面的儿子、孙子的"),e("code",[s._v("$root")]),s._v("属性就是他自己了。")]),s._v(" "),e("p",[s._v("这就是一个自上到下将根实例的"),e("code",[s._v("$root")]),s._v("属性依次传递给每一个子实例的过程。")]),s._v(" "),e("p",[s._v("最后，再初始化了一些其它属性，因为都是简单的赋初始值，这里就不再一一介绍，等后面内容涉及到的时候再介绍。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$children = []\nvm.$refs = {}\n\nvm._watcher = null\nvm._inactive = null\nvm._directInactive = false\nvm._isMounted = false\nvm._isDestroyed = false\nvm._isBeingDestroyed = false\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[e("strong",[s._v("总结")])]),s._v(" "),e("p",[e("code",[s._v("initLifecycle")]),s._v("函数，就是给实例初始化了一些属性，包括以"),e("code",[s._v("$")]),s._v("开头的供用户使用的外部属性，也包括以"),e("code",[s._v("_")]),s._v("开头的供内部使用的内部属性。")]),s._v(" "),e("p",[e("strong",[s._v("解析事件")])]),s._v(" "),e("p",[s._v("在"),e("code",[s._v("Vue")]),s._v("中，当我们在父组件中使用子组件时可以给子组件上注册一些事件，这些事件包括使用"),e("code",[s._v("v-on")]),s._v("或"),e("code",[s._v("@")]),s._v("注册的自定义事件，也包括注册的浏览器原生事件，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<child @select="selectHandler" @click.native="clickHandler"></child>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("上面代码，我们先从解析事件开始说起，当遇到开始标签的时候，除了会解析开始标签，还会调用"),e("code",[s._v("processAttrs")]),s._v("方法解析标签中的属性，"),e("code",[s._v("processAttrs")]),s._v("方法位于源码的"),e("code",[s._v("src/compiler/parser/index.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export const onRE = /^@|^v-on:/\nexport const dirRE = /^v-|^@|^:/\n\nfunction processAttrs (el) {\n  const list = el.attrsList\n  let i, l, name, value, modifiers\n  for (i = 0, l = list.length; i < l; i++) {\n    name  = list[i].name\n    value = list[i].value\n    if (dirRE.test(name)) {\n      // 解析修饰符\n      modifiers = parseModifiers(name)\n      if (modifiers) {\n        name = name.replace(modifierRE, '')\n      }\n      if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '')\n        addHandler(el, name, value, modifiers, false, warn)\n      }\n    }\n  }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("p",[s._v("在对标签属性进行解析时，判断如果属性是指令，首先通过"),e("code",[s._v("parseModifiers")]),s._v("解析出属性的修饰符，然后判断如果是事件的指令，则执行"),e("code",[s._v("addHandler(el, name, value, modifiers, false, warn)")]),s._v("方法，该方法在"),e("code",[s._v("src/compiler/helpers.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function addHandler (el,name,value,modifiers) {\n  modifiers = modifiers || emptyObject\n\n  // check capture modifier 判断是否有capture修饰符\n  if (modifiers.capture) {\n    delete modifiers.capture\n    name = '!' + name // 给事件名前加'!'用以标记capture修饰符\n  }\n  // 判断是否有once修饰符\n  if (modifiers.once) {\n    delete modifiers.once\n    name = '~' + name // 给事件名前加'~'用以标记once修饰符\n  }\n  // 判断是否有passive修饰符\n  if (modifiers.passive) {\n    delete modifiers.passive\n    name = '&' + name // 给事件名前加'&'用以标记passive修饰符\n  }\n\n  let events\n  if (modifiers.native) {\n    delete modifiers.native\n    events = el.nativeEvents || (el.nativeEvents = {})\n  } else {\n    events = el.events || (el.events = {})\n  }\n\n  const newHandler: any = {\n    value: value.trim()\n  }\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers\n  }\n\n  const handlers = events[name]\n  if (Array.isArray(handlers)) {\n    handlers.push(newHandler)\n  } else if (handlers) {\n    events[name] = [handlers, newHandler]\n  } else {\n    events[name] = newHandler\n  }\n\n  el.plain = false\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br")])]),e("p",[s._v("在"),e("code",[s._v("addHandler")]),s._v("函数里做了 3 件事件，首先根据"),e("code",[s._v("modifier")]),s._v("修饰符对事件名"),e("code",[s._v("name")]),s._v("做处理，接着根据"),e("code",[s._v("modifier.native")]),s._v("判断事件是一件浏览器原生事件还是自定义事件，分别对应"),e("code",[s._v("el.nativeEvents")]),s._v("和"),e("code",[s._v("el.events")]),s._v("，最后按照"),e("code",[s._v("name")]),s._v("对事件做归类，并把回调函数的字符串保留到对应的事件中。")]),s._v(" "),e("p",[s._v("父组件的"),e("code",[s._v("child")]),s._v(" 节点生成的 "),e("code",[s._v("el.events")]),s._v(" 和 "),e("code",[s._v("el.nativeEvents")]),s._v(" 如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("el.events = {\n  select: {\n    value: 'selectHandler'\n  }\n}\n\nel.nativeEvents = {\n  click: {\n    value: 'clickHandler'\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("然后在模板编译的代码生成阶段，会在"),e("code",[s._v("genData")]),s._v("函数中根据"),e("code",[s._v("AST")]),s._v("元素节点上的"),e("code",[s._v("events")]),s._v("和"),e("code",[s._v("naitveEvents")]),s._v("生成"),e("code",[s._v("_c(tagName,data,children)")]),s._v("函数中所需要的"),e("code",[s._v("data")]),s._v("数据，它的定义在 "),e("code",[s._v("src/compiler/codegen/index.js")]),s._v(" 中：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function genData (el state) {\n  let data = '{'\n  // ...\n  if (el.events) {\n    data += `${genHandlers(el.events, false,state.warn)},`\n  }\n  if (el.nativeEvents) {\n    data += `${genHandlers(el.nativeEvents, true, state.warn)},`\n  }\n  // ...\n  return data\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("生成的"),e("code",[s._v("data")]),s._v("数据如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('{\n  // ...\n  on: {"select": selectHandler},\n  nativeOn: {"click": function($event) {\n      return clickHandler($event)\n    }\n  }\n  // ...\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("最开始的模板中标签上注册的事件最终会被解析成用于创建元素型"),e("code",[s._v("VNode")]),s._v("的"),e("code",[s._v("_c(tagName,data,children)")]),s._v("函数中"),e("code",[s._v("data")]),s._v("数据中的两个对象，自定义事件对象"),e("code",[s._v("on")]),s._v("，浏览器原生事件"),e("code",[s._v("nativeOn")]),s._v("。")]),s._v(" "),e("p",[s._v("模板编译的最终目的是创建"),e("code",[s._v("render")]),s._v("函数供挂载的时候调用生成虚拟"),e("code",[s._v("DOM")]),s._v("，那么在挂载阶段，如果被挂载的节点是一个组件节点，则通过"),e("code",[s._v("createComponent")]),s._v("函数创建一个组件"),e("code",[s._v("vnode")]),s._v("，该函数位于源码的 "),e("code",[s._v("src/core/vdom/create-component.js")]),s._v(" 中， 如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function createComponent (\n  Ctor: Class<Component> | Function | Object | void,\n  data: ?VNodeData,\n  context: Component,\n  children: ?Array<VNode>,\n  tag?: string\n): VNode | Array<VNode> | void {\n  // ...\n  const listeners = data.on\n\n  data.on = data.nativeOn\n\n  // ...\n  const name = Ctor.options.name || tag\n  const vnode = new VNode(\n    `vue-component-${Ctor.cid}${name ? `-${name}` : ''}`,\n    data, undefined, undefined, undefined, context,\n    { Ctor, propsData, listeners, tag, children },\n    asyncFactory\n  )\n\n  return vnode\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("p",[s._v("把自定义事件"),e("code",[s._v("data.on")]),s._v("赋值给了"),e("code",[s._v("listeners")]),s._v("，把浏览器原生事件"),e("code",[s._v("data.nativeOn")]),s._v("赋值给了"),e("code",[s._v("data.on")]),s._v("，这说明所有的原生浏览器事件处理是在当前父组件环境中处理的。而对于自定义事件，会把"),e("code",[s._v("listeners")]),s._v(" 作为"),e("code",[s._v("vnode")]),s._v(" 的 "),e("code",[s._v("componentOptions")]),s._v(" 传入，放在子组件初始化阶段中处理， 在子组件的初始化的时候， 拿到了父组件传入的"),e("code",[s._v("listeners")]),s._v("，然后在执行 "),e("code",[s._v("initEvents")]),s._v(" 的过程中，会处理这个 "),e("code",[s._v("listeners")]),s._v("。")]),s._v(" "),e("p",[s._v("父组件给子组件的注册事件中，把自定义事件传给子组件，在子组件实例化的时候进行初始化；而")]),s._v(" "),e("p",[s._v("换句话说：实例初始化阶段调用的初始化事件函数 initEvents 实际上初始化的是父组件在模板中使用"),e("code",[s._v("v-on")]),s._v(" 或"),e("code",[s._v("@")]),s._v("注册的监听子组件内触发的事件")]),s._v(" "),e("p",[e("strong",[s._v("initEvents 函数分析")])]),s._v(" "),e("p",[s._v("了解了以上过程之后，开始分析"),e("code",[s._v("initEvents")]),s._v("函数，该函数位于源码的"),e("code",[s._v("src/instance/events.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nexport function initEvents (vm: Component) {\n    vm._events = Object.create(null)\n    vm._hasHookEvent = false\n    const listeners = vm.$options._parentListeners\n    if (listeners) {\n        updateComponentListeners(vm, listeners)\n    }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[e("code",[s._v("initEvents")]),s._v("函数首先在"),e("code",[s._v("vm")]),s._v("上新增"),e("code",[s._v("_events")]),s._v("属性并将其赋值为空对象，用来存储事件。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm._events = Object.create(null)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("接着，获取父组件注册的事件赋给"),e("code",[s._v("listeners")]),s._v("，如果"),e("code",[s._v("listeners")]),s._v("不为空，则调用"),e("code",[s._v("updateComponentListeners")]),s._v("函数，将父组件向子组件注册的事件到子组件的实例中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const listeners = vm.$options._parentListeners\nif (listeners) {\n  updateComponentListeners(vm, listeners)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("这个"),e("code",[s._v("updateComponentListeners")]),s._v("函数是什么呢？该函数定义如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function updateComponentListeners (\nvm: Component,\nlisteners: Object,\noldListeners: ?Object\n) {\ntarget = vm\nupdateListeners(listeners, oldListeners || {}, add, remove, createOnceHandler, vm)\ntarget = undefined\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("可以看到，"),e("code",[s._v("updateComponentListeners")]),s._v("其实也没有干什么，只是调用了"),e("code",[s._v("updateListeners")]),s._v("函数并把"),e("code",[s._v("listeners")]),s._v("以及"),e("code",[s._v("add")]),s._v("和"),e("code",[s._v("remove")]),s._v("这两个函数传入，"),e("code",[s._v("updateListeners")]),s._v("函数位于源码的"),e("code",[s._v("src/vdom/helpers/update-listeners.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function updateListeners (\n  on: Object,\n  oldOn: Object,\n  add: Function,\n  remove: Function,\n  vm: Component\n) {\n  let name, def, cur, old, event\n  for (name in on) {\n    def = cur = on[name]\n    old = oldOn[name]\n    event = normalizeEvent(name)\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        `Invalid handler for event \"${event.name}\": got ` + String(cur),\n        vm\n      )\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur)\n      }\n      add(event.name, cur, event.once, event.capture, event.passive, event.params)\n    } else if (cur !== old) {\n      old.fns = cur\n      on[name] = old\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name)\n      remove(event.name, oldOn[name], event.capture)\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("p",[s._v("该函数的作用是对比"),e("code",[s._v("listeners")]),s._v(" 和 "),e("code",[s._v("oldListeners")]),s._v("的不同，并调用参数中提供的"),e("code",[s._v("add")]),s._v(" 和"),e("code",[s._v("remove")]),s._v("进行相应的注册事件和卸载事件。其思想是：如果"),e("code",[s._v("listeners")]),s._v("对象中存在某个"),e("code",[s._v("key")]),s._v("（即事件名）而"),e("code",[s._v("oldListeners")]),s._v("中不存在，则说明这个事件是需要新增的；反之，如果"),e("code",[s._v("oldListeners")]),s._v("对象中存在某个"),e("code",[s._v("key")]),s._v("（即事件名）而"),e("code",[s._v("listeners")]),s._v("中不存在，则说明这个事件是需要从事件系统中卸载的；")]),s._v(" "),e("p",[s._v("该函数接收 5 个参数，分别是"),e("code",[s._v("on")]),s._v("、"),e("code",[s._v("oldOn")]),s._v("、"),e("code",[s._v("add")]),s._v("、"),e("code",[s._v("remove")]),s._v("、"),e("code",[s._v("vm")]),s._v("，其中"),e("code",[s._v("on")]),s._v("对应"),e("code",[s._v("listeners")]),s._v("，"),e("code",[s._v("oldOn")]),s._v("对应"),e("code",[s._v("oldListeners")]),s._v("。")]),s._v(" "),e("p",[s._v("首先对"),e("code",[s._v("on")]),s._v("进行遍历，获得每一个事件名，然后调用"),e("code",[s._v("normalizeEvent")]),s._v("函数处理，处理完事件名后，判断事件就把值是否存在，如果不存在则抛出警告，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("for (name in on) {\n  def = cur = on[name]\n  old = oldOn[name]\n  event = normalizeEvent(name)\n  if (isUndef(cur)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      `Invalid handler for event \"${event.name}\": got ` + String(cur),\n      vm\n    )\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("如果存在，则继续判断该事件名在"),e("code",[s._v("oldOn")]),s._v("中是否存在，如果不存在，则调用"),e("code",[s._v("add")]),s._v("注册事件，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (isUndef(old)) {\n  if (isUndef(cur.fns)) {\n    cur = on[name] = createFnInvoker(cur)\n  }\n  add(event.name, cur, event.once, event.capture, event.passive, event.params)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("这里定义了"),e("code",[s._v("createFnInvoker")]),s._v("方法并返回"),e("code",[s._v("invoker")]),s._v("函数：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function createFnInvoker (fns) {\n  function invoker () {\n    const fns = invoker.fns\n    if (Array.isArray(fns)) {\n      const cloned = fns.slice()\n      for (let i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments)\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns\n  return invoker\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("由于一个事件可能会对应多个回调函数，所以这里做了数组的判断，")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (cur !== old) {\n  old.fns = cur\n  on[name] = old\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("最后遍历"),e("code",[s._v("oldOn")]),s._v("，获得每一个事件名，判断如果事件名在"),e("code",[s._v("on")]),s._v("中不存在，则表示该事件是需要从事件系统中卸载事件，则调用"),e("code",[s._v("remove")]),s._v("方法卸载该事件。")]),s._v(" "),e("p",[e("code",[s._v("updateListeners")]),s._v("函数遗留了一个"),e("code",[s._v("normalizeEvent")]),s._v("函数是干什么用的？我们在解析事件的时候，当事件上有修饰符的时候，我们会根据不同的修饰符给事件名前面添加不同的符号以作标识，其实这个"),e("code",[s._v("normalizeEvent")]),s._v("函数就是个反向操作，根据事件名前面的不同标识反向解析出该事件所带的何种修饰符，其代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const normalizeEvent = cached((name: string): {\n  name: string,\n  once: boolean,\n  capture: boolean,\n  passive: boolean,\n  handler?: Function,\n  params?: Array<any>\n} => {\n  const passive = name.charAt(0) === '&'\n  name = passive ? name.slice(1) : name\n  const once = name.charAt(0) === '~'\n  name = once ? name.slice(1) : name\n  const capture = name.charAt(0) === '!'\n  name = capture ? name.slice(1) : name\n  return {\n    name,\n    once,\n    capture,\n    passive\n  }\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("判断事件名的第一个字符是何种标识进而判断出事件带有何种修饰符，最终将真实事件名及所带的修饰符返回。")]),s._v(" "),e("p",[e("strong",[s._v("总结")])]),s._v(" "),e("p",[s._v("首先从模板编译时对组件标签上的事件解析入手分析，父组件既可以给既可以给子组件上绑定自定义事件，也可以绑定浏览器原生事件。这两种事件有着不同的处理时机，浏览器原生事件是由父组件处理，而自定义事件是在子组件初始化时候由父组件父给子组件，再由子组件注册到实例的事件系统中。")]),s._v(" "),e("p",[s._v("初始化事件函数"),e("code",[s._v("initEvents")]),s._v("实际上初始化的是父组件在模板中使用"),e("code",[s._v("v-on")]),s._v("或"),e("code",[s._v("@")]),s._v("注册的监听子组件内触发的事件。")]),s._v(" "),e("p",[s._v("最后分析了"),e("code",[s._v("initEvents")]),s._v("函数的具体实现过程，该函数内部首先在实例上新增了"),e("code",[s._v("_events")]),s._v("属性并将其赋值为空对象，用来存储事件。接着通过调用"),e("code",[s._v("updateComponentListeners")]),s._v("函数，将父组件向子组件注册的事件注册到子组件实例中的"),e("code",[s._v("_events")]),s._v("对象里。")]),s._v(" "),e("p",[e("strong",[s._v("initInjections 函数分析")])]),s._v(" "),e("p",[s._v("从函数名字上来看，该函数是用来初始化实例中的"),e("code",[s._v("inject")]),s._v("选项的。说到"),e("code",[s._v("inject")]),s._v("选项，那必然离不开"),e("code",[s._v("provide")]),s._v("选项，这两个选项都是成对出现的，它们的作用是：鸡毛一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间始终生效。")]),s._v(" "),e("p",[e("code",[s._v("provide")]),s._v("选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。在该对象中你可以使用 ES 2015 Symbols 作为 key，但是只在原生支持"),e("code",[s._v("Symbol")]),s._v("和"),e("code",[s._v("Reflect.ownKeys")]),s._v("的环境下可工作。")]),s._v(" "),e("p",[e("code",[s._v("inject")]),s._v("选项应该是：")]),s._v(" "),e("ul",[e("li",[s._v("一个字符串数组或")]),s._v(" "),e("li",[s._v("一个对象，对象的 key 是本地的绑定名，value 是：\n"),e("ul",[e("li",[s._v("在可用的注入内容中搜索用的 key，或")]),s._v(" "),e("li",[s._v("一个对象，该对象的：\n"),e("ul",[e("li",[e("code",[s._v("from")]),s._v("属性是在可用的注入")]),s._v(" "),e("li",[e("code",[s._v("default")]),s._v("属性是降级情况下使用的 value")])])])])])]),s._v(" "),e("p",[s._v("官方文档使用示例，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/ 父级组件提供 'foo'\nvar Parent = {\n  provide: {\n    foo: 'bar'\n  },\n  // ...\n}\n\n// 子组件注入 'foo'\nvar Child = {\n  inject: ['foo'],\n  created () {\n    console.log(this.foo) // => \"bar\"\n  }\n  // ...\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("利用 ES2015 Symbols、函数"),e("code",[s._v("provide")]),s._v("和对象"),e("code",[s._v("inject")]),s._v("：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const s = Symbol()\n\nconst Provider = {\n  provide () {\n    return {\n      [s]: 'foo'\n    }\n  }\n}\n\nconst Child = {\n  inject: { s },\n  // ...\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("使用一个注入的值作为一个属性的默认值：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const Child = {\n  inject: ['foo'],\n  props: {\n    bar: {\n      default () {\n        return this.foo\n      }\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("使用一个注入的值作为数据入口：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const Child = {\n  inject: ['foo'],\n  data () {\n    return {\n      bar: this.foo\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("blockquote",[e("p",[s._v("在 2.5.0+ 的注入可以通过设置默认值使其变成可选项：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const Child = {\n  inject: {\n    foo: { default: 'foo' }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("如果它需要从一个不同名字的属性注入，则使用 from 来表示其源属性：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const Child = {\n  inject: {\n    foo: {\n      from: 'bar',\n      default: 'foo'\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("与 prop 的默认值类似，你需要对非原始值使用一个工厂方法：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const Child = {\n  inject: {\n    foo: {\n      from: 'bar',\n      default: () => [1, 2, 3]\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("父组件可以使用"),e("code",[s._v("provide")]),s._v("选项给自己的下游子孙组件内注入一些数据，在下游子孙组件中可以使用"),e("code",[s._v("inject")]),s._v("选项来接收这些数据以便为自己所用。")]),s._v(" "),e("p",[s._v("需要注意："),e("code",[s._v("provide")]),s._v(" 和 "),e("code",[s._v("inject")]),s._v(" 选项绑定的数据不是响应式的。")]),s._v(" "),e("p",[e("strong",[s._v("initInjections 函数分析")])]),s._v(" "),e("p",[e("code",[s._v("provide")]),s._v("选项注入的值作为数据入口，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const Child = {\n  inject: ['foo'],\n  data () {\n    return {\n      bar: this.foo\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("数据就是我们通常所写"),e("code",[s._v("data")]),s._v("、"),e("code",[s._v("props")]),s._v("、"),e("code",[s._v("watch")]),s._v("、"),e("code",[s._v("computed")]),s._v("及"),e("code",[s._v("method")]),s._v("，所以"),e("code",[s._v("inject")]),s._v("选项接收到注入的值有可能被以上这些数据所使用到，所以在初始化完"),e("code",[s._v("inject")]),s._v("后需要先初始化这些数据，然后才能再初始化"),e("code",[s._v("provide")]),s._v("，所以在调用"),e("code",[s._v("initInjections")]),s._v("函数对"),e("code",[s._v("inject")]),s._v("初始化完之后需要先调用"),e("code",[s._v("initState")]),s._v("函数对数据进行初始化，最后再调用"),e("code",[s._v("initProvide")]),s._v("函数对"),e("code",[s._v("provide")]),s._v("进行初始化。")]),s._v(" "),e("p",[e("code",[s._v("initInjections")]),s._v("函数的具体原理，该函数定义在位于源码的"),e("code",[s._v("src/core/instance/inject.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function initInjections (vm: Component) {\n    const result = resolveInject(vm.\\$options.inject, vm)\n    if (result) {\n        toggleObserving(false)\n        Object.keys(result).forEach(key => {\n            /\\* istanbul ignore else \\*/\n            if (process.env.NODE_ENV !== 'production') {\n                defineReactive(vm, key, result[key], () => {\n                    warn(\n                    `Avoid mutating an injected value directly since the changes will be` +\n                    `overwritten whenever the provided component re-renders.` +\n                    `injection being mutated: \"${key}\"`,\n                    vm\n                    )\n                })\n            } else {\n            defineReactive(vm, key, result[key])\n            }\n        })\n        toggleObserving(true)\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("p",[e("code",[s._v("initInjections")]),s._v("函数首先调用"),e("code",[s._v("resolveInject")]),s._v("把"),e("code",[s._v("inject")]),s._v("选项中的数据转化成键值对的形式赋给"),e("code",[s._v("result")]),s._v("，"),e("code",[s._v("result")]),s._v("样子如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 父级组件提供 'foo'\nvar Parent = {\n  provide: {\n    foo: 'bar'\n  }\n}\n\n// 子组件注入 'foo'\nvar Child = {\n  inject: ['foo'],\n}\n\n// result\nresult = {\n    'foo':'bar'\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("然后遍历"),e("code",[s._v("result")]),s._v("中的每一对键值，调用"),e("code",[s._v("defineReactive")]),s._v("函数将其添加当前实例上，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (result) {\n    toggleObserving(false)\n    Object.keys(result).forEach(key => {\n        defineReactive(vm, key, result[key])\n    }\n    toggleObserving(true)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("在把"),e("code",[s._v("result")]),s._v("中的键值添加到当前实例上之前，会先调用"),e("code",[s._v("toggleObserving(false)")]),s._v("，而这个函数内部是把"),e("code",[s._v("shouldObserve = false")]),s._v("，这是为了告诉"),e("code",[s._v("defineReactive")]),s._v("函数仅仅是把键值添加到当前实例上而不需要将其转换成响应式。")]),s._v(" "),e("p",[e("strong",[s._v("resolveInject 函数分析")])]),s._v(" "),e("p",[e("code",[s._v("inject")]),s._v("选项中的每一个数据"),e("code",[s._v("key")]),s._v(" 都是由其上游父级组件提供的，所以我们应该把每一个数据"),e("code",[s._v("key")]),s._v("从当前组件起，不断的向上游父级组件中查找该数据"),e("code",[s._v("key")]),s._v("对应的值，直到找到为止。如果在上游所有父级组件中没找到，那么就看在"),e("code",[s._v("inject")]),s._v("选项是否为该数据"),e("code",[s._v("key")]),s._v("设置了默认值，如果设置了就使用默认值，如果没有设置，则抛出异常。")]),s._v(" "),e("p",[e("code",[s._v("resolveInject")]),s._v("函数的源码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function resolveInject (inject: any, vm: Component): ?Object {\n  if (inject) {\n    const result = Object.create(null)\n    const keys =  Object.keys(inject)\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n      const provideKey = inject[key].from\n      let source = vm\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey]\n          break\n        }\n        source = source.$parent\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          const provideDefault = inject[key].default\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault\n        } else if (process.env.NODE_ENV !== 'production') {\n          warn(`Injection \"${key}\" not found`, vm)\n        }\n      }\n    }\n    return result\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br")])]),e("p",[s._v("在分析函数源码之前，我们对照着官网给出的示例，这样会比较好理解一些。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var Parent = {\n  provide: {\n    foo: 'bar'\n  },\n  // ...\n}\nconst Child = {\n  inject: {\n    foo: {\n      from: 'bar',\n      default: () => [1, 2, 3]\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var Parent = {\n  provide: {\n    foo: 'bar'\n  },\n  // ...\n}\nconst Child = {\n  inject: {\n    foo: {\n      from: 'bar',\n      default: () => [1, 2, 3]\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("for (let i = 0; i < keys.length; i++) {\n  const key = keys[i]\n  const provideKey = inject[key].from\n  let source = vm\n  while (source) {\n    if (source._provided && hasOwn(source._provided, provideKey)) {\n      result[key] = source._provided[provideKey]\n      break\n    }\n    source = source.$parent\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (!source) {\n  if ('default' in inject[key]) {\n    const provideDefault = inject[key].default\n    result[key] = typeof provideDefault === 'function'\n        ? provideDefault.call(vm)\n    : provideDefault\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(`Injection \"${key}\" not found`, vm)\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 写法一\nvar Child = {\n  inject: ['foo']\n}\n\n// 写法二\nconst Child = {\n  inject: {\n    foo: { default: 'xxx' }\n  }\n}\n\n// 写法三\nconst Child = {\n  inject: {\n    foo\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const Child = {\n  inject: {\n    foo: {\n      from: 'foo',\n      default: 'xxx'  //如果有默认的值就有default属性\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function normalizeInject (options: Object, vm: ?Component) {\n  const inject = options.inject\n  if (!inject) return\n  const normalized = options.inject = {}\n  if (Array.isArray(inject)) {\n    for (let i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] }\n    }\n  } else if (isPlainObject(inject)) {\n    for (const key in inject) {\n      const val = inject[key]\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val }\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      `Invalid value for option \"inject\": expected an Array or an Object, ` +\n      `but got ${toRawType(inject)}.`,\n      vm\n    )\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("p",[e("strong",[s._v("总结")])]),s._v(" "),e("p",[e("strong",[s._v("initState 函数分析")])]),s._v(" "),e("p",[s._v("这个函数是用来初始化实例状态的，主要包括"),e("code",[s._v("props")]),s._v("、"),e("code",[s._v("data")]),s._v("、"),e("code",[s._v("methods")]),s._v("、"),e("code",[s._v("computed")]),s._v("、"),e("code",[s._v("watch")]),s._v("，我们把这些选项称为实例的状态选项。也就是说，"),e("code",[s._v("initState")]),s._v("函数就是用来初始化这些状态的。")]),s._v(" "),e("p",[s._v("首先我们先来分析"),e("code",[s._v("initState")]),s._v("函数，该函数的定义位于源码的"),e("code",[s._v("src/core/instance/state.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nexport function initState (vm: Component) {\n    vm._watchers = []\n    const opts = vm.$options\n    if (opts.props) initProps(vm, opts.props)\n    if (opts.methods) initMethods(vm, opts.methods)\n    if (opts.data) {\n        initData(vm)\n    } else {\n        observe(vm._data = {}, true)\n    }\n    if (opts.computed) initComputed(vm, opts.computed)\n    if (opts.watch && opts.watch !== nativeWatch) {\n        initWatch(vm, opts.watch)\n    }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("首先，给实例上新增了一个属性"),e("code",[s._v("_watchers")]),s._v("，用来存储当前实例中所有的"),e("code",[s._v("watcher")]),s._v("实例，无论是使用"),e("code",[s._v("vm.$watch")]),s._v("注册的"),e("code",[s._v("watcher")]),s._v("实例还是使用"),e("code",[s._v("watch")]),s._v("选项注册的"),e("code",[s._v("watcher")]),s._v("实例，都会被保存到该属性中。")]),s._v(" "),e("p",[e("code",[s._v("Vue")]),s._v("中对数据变化的侦测是使用属性拦截的方式实现的，但是"),e("code",[s._v("Vue")]),s._v("并不是对所有数据使用属性拦截的方式侦测变化，这是因为数据越多，数据上所绑定的依赖就会多，从而造成依赖追踪的内存开销就会很大，所以从"),e("code",[s._v("Vue 2.0")]),s._v("版本起，"),e("code",[s._v("Vue")]),s._v("不再对所有数据都进行侦测，而是将侦测粒度提高到组件层面，对每个组件进行侦测，所以在每个组件上新增了"),e("code",[s._v("vm._watchers")]),s._v("属性，用来存放这个组件内用到的所有状态的依赖，当其中一个状态发生变化时，就会通知到组件，然后由组件内部使用虚拟"),e("code",[s._v("DOM")]),s._v("进行数据比对，从而降低内存开销，提高性能。")]),s._v(" "),e("p",[s._v("先判断实例中是否有"),e("code",[s._v("props")]),s._v("选项，如果有，就调用"),e("code",[s._v("props")]),s._v("选项初始化函数"),e("code",[s._v("initProps")]),s._v("去初始"),e("code",[s._v("props")]),s._v("选项；")]),s._v(" "),e("p",[s._v("再判断实例中是否有"),e("code",[s._v("methods")]),s._v("选项，如果有，就调用"),e("code",[s._v("methods")]),s._v("选项初始函数"),e("code",[s._v("initMethods")]),s._v("去初始化"),e("code",[s._v("methods")]),s._v("选项；")]),s._v(" "),e("p",[s._v("接着再判断实例中是否有"),e("code",[s._v("data")]),s._v("选项，如果有，就调用"),e("code",[s._v("data")]),s._v("选项寝化函数"),e("code",[s._v("initData")]),s._v("去初始化"),e("code",[s._v("data")]),s._v("选项；如果没有，就把"),e("code",[s._v("data")]),s._v("当作空对象并将其转换成响应式；")]),s._v(" "),e("p",[s._v("接着再判断实例中是否有"),e("code",[s._v("computed")]),s._v("选项，如果有，就调用"),e("code",[s._v("computed")]),s._v("选项初始化函数"),e("code",[s._v("initComputed")]),s._v("去初始化"),e("code",[s._v("computed")]),s._v("选项；")]),s._v(" "),e("p",[s._v("最后判断实例中是否有"),e("code",[s._v("watch")]),s._v("选项，如果有，就调用"),e("code",[s._v("watch")]),s._v("选项初始化函数"),e("code",[s._v("initWatch")]),s._v("去初始化"),e("code",[s._v("watch")]),s._v("选项；")]),s._v(" "),e("p",[e("strong",[s._v("初始化 props")])]),s._v(" "),e("p",[e("code",[s._v("props")]),s._v("选项通常是由当前组件的父级组件传入的，当父组件在调用子组件的时候，通常会把"),e("code",[s._v("props")]),s._v("属性值作为标签属性添加在子组件的标签上，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<Child prop1="xxx" prop2="yyy"></Child>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("在模板编译的时候，当解析到组件标签时会将所有的标签属性都解析出来然后在子组件实例化的时候传给子组件。")]),s._v(" "),e("p",[s._v("在子组件内部，通过"),e("code",[s._v("props")]),s._v("选项来接收父组件传来的数据，在接收的时候可以这样写：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 写法一\nprops: ['name']\n\n// 写法二\nprops: {\n    name: String, // [String, Number]\n}\n\n// 写法三\nprops: {\n    name:{\n\t\ttype: String\n    }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[e("code",[s._v("Vue")]),s._v("给用户提供了"),e("code",[s._v("props")]),s._v("选项写法非常自由，根据"),e("code",[s._v("Vue")]),s._v("的惯例，写法虽多但最终处理的时候肯定只处理一种写法，此时你肯定会想到，处理之前先对数据进行规范化，将所有写法都转化成一种写法。")]),s._v(" "),e("p",[e("strong",[s._v("规范化数据")])]),s._v(" "),e("p",[e("code",[s._v("props")]),s._v("数据规范化函数的定义位于源码的"),e("code",[s._v("src/core/util/options.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function normalizeProps (options: Object, vm: ?Component) {\n  const props = options.props\n  if (!props) return\n  const res = {}\n  let i, val, name\n  if (Array.isArray(props)) {\n    i = props.length\n    while (i--) {\n      val = props[i]\n      if (typeof val === 'string') {\n        name = camelize(val)\n        res[name] = { type: null }\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.')\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (const key in props) {\n      val = props[key]\n      name = camelize(key)\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val }\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      `Invalid value for option \"props\": expected an Array or an Object, ` +\n      `but got ${toRawType(props)}.`,\n      vm\n    )\n  }\n  options.props = res\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br")])]),e("p",[s._v("首先拿到实例中的"),e("code",[s._v("props")]),s._v("选项，如果不存在，则直接返回。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const props = options.props\nif (!props) return\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("如果存在，则定义一个空对象"),e("code",[s._v("res")]),s._v("，用来存储最终的结果。接着判断如果"),e("code",[s._v("props")]),s._v("选项是一个数组（写法一），则遍历该数组中的每一项元素，如果该元素是字符串，那么先将该元素统一转化成驼峰式命名，然后将该元素作为"),e("code",[s._v("key")]),s._v("，将"),e("code",[s._v("{type:null}")]),s._v("作为"),e("code",[s._v("value")]),s._v("存入"),e("code",[s._v("res")]),s._v("中；如果不是字符串，则抛出异常，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (Array.isArray(props)) {\n    i = props.length\n    while (i--) {\n        val = props[i]\n        if (typeof val === 'string') {\n            name = camelize(val)\n            res[name] = { type: null }\n        } else if (process.env.NODE_ENV !== 'production') {\n            warn('props must be strings when using array syntax.')\n        }\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("如果"),e("code",[s._v("props")]),s._v("选项不是数组那就判断是不是一个对象，如果是一个对象，那就是遍历对象中的每一对键值，拿到每一对键值后，先将键名统一转化成驼峰式命名，然后判断值是否还是一个对象，如果值是对象（写法三），那么就将该键值对存入"),e("code",[s._v("res")]),s._v("中；如果值不是对象（写法二），那么就将键名作为"),e("code",[s._v("key")]),s._v("，将"),e("code",[s._v("{type:null}")]),s._v("作为"),e("code",[s._v("value")]),s._v("存入"),e("code",[s._v("res")]),s._v("中。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (isPlainObject(props)) {\n    for (const key in props) {\n        val = props[key]\n        name = camelize(key)\n        res[name] = isPlainObject(val)\n            ? val\n        : { type: val }\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("如果"),e("code",[s._v("props")]),s._v("选项既不是数组也不是对象，那么如果在非生产环境下就抛出异常，最后将"),e("code",[s._v("res")]),s._v("作为规范化后的结果重新赋值给实例的"),e("code",[s._v("props")]),s._v("选项。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (process.env.NODE_ENV !== 'production') {\n    warn(\n        `Invalid value for option \"props\": expected an Array or an Object, ` +\n        `but got ${toRawType(props)}.`,\n        vm\n    )\n}\noptions.props = res\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("无论是三种写法的哪一种，最终都会被转化成如下写法：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("props: {\n    name:{\n        type: xxx\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[e("strong",[s._v("initProps 函数分析")])]),s._v(" "),e("p",[s._v("将"),e("code",[s._v("props")]),s._v("选项规范化完成之后，接下来我们就可以真正的初始化"),e("code",[s._v("props")]),s._v("选项了，"),e("code",[s._v("initProps")]),s._v("函数的定义位于源码的"),e("code",[s._v("src/core/instance/state.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('function initProps (vm: Component, propsOptions: Object) {\n    const propsData = vm.$options.propsData || {}\n    const props = vm._props = {}\n    const keys = vm.$options.\\_propKeys = []\n    const isRoot = !vm.\\$parent\n    // root instance props should be converted\n    if (!isRoot) {\n        toggleObserving(false)\n    }\nfor (const key in propsOptions) {\n    keys.push(key)\n    const value = validateProp(key, propsOptions, propsData, vm)\n    if (process.env.NODE_ENV !== \'production\') {\n        const hyphenatedKey = hyphenate(key)\n        if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {\n            warn(`"${hyphenatedKey}" is a reserved attribute and cannot be used as component prop.`,vm)\n        }\n        defineReactive(props, key, value, () => {\n            if (!isRoot && !isUpdatingChildComponent) {\n            warn(\n                `Avoid mutating a prop directly since the value will be` +\n                `overwritten whenever the parent component re-renders.` +\n                `Instead, use a data or computed property based on the prop\'s` +\n                `value. Prop being mutated: "${key}"`,\n                vm\n            )\n        }\n    })\n    } else {\n    defineReactive(props, key, value)\n    }\n    if (!(key in vm)) {\n        proxy(vm, `_props`, key)\n    }\n}\n    toggleObserving(true)\n}\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br")])]),e("p",[s._v("可以看到，该函数接收两个参数：当前"),e("code",[s._v("Vue")]),s._v("实例和当前实例规范化后的"),e("code",[s._v("props")]),s._v("选项。")]),s._v(" "),e("p",[s._v("在函数内部首先定义了 4 个变量，分别是：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const propsData = vm.$options.propsData || {}\nconst props = vm._props = {}\nconst keys = vm.$options._propKeys = []\nconst isRoot = !vm.$parent\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ul",[e("li",[s._v("propsData：父组件传入的真实"),e("code",[s._v("props")]),s._v("数据。")]),s._v(" "),e("li",[s._v("props：指向"),e("code",[s._v("vm._props")]),s._v("指针，所有设置到")]),s._v(" "),e("li",[s._v("keys：指向"),e("code",[s._v("vm.$options._propKeys")]),s._v("的指针，缓存")]),s._v(" "),e("li",[s._v("isRoot：当前组件是否为根组件。")])]),s._v(" "),e("p",[e("strong",[s._v("初始化 methods")])]),s._v(" "),e("p",[s._v("初始化"),e("code",[s._v("methods")]),s._v("相较而言就比较简单了，它的初始函数定义位于源码的"),e("code",[s._v("src/core/instance/state.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\nfunction initMethods (vm: Component, methods: Object) {\n    const props = vm.$options.props\n    for (const key in methods) {\n        if (process.env.NODE_ENV !== \'production\') {\n            if (typeof methods[key] !== \'function\') {\n                warn(\n                    `Method "${key}" has type "${typeof methods[key]}" in the component definition.` +\n                    `Did you reference the function correctly?`,vm\n                )\n            }\n            if (props && hasOwn(props, key)) {\n                warn(\n                `Method "${key}" has already been defined as a prop.`,\n                vm\n                )\n            }\n            if ((key in vm) && isReserved(key)) {\n                warn(\n                `Method "${key}" conflicts with an existing Vue instance method.` +\n                `Avoid defining component methods that start with _ or $.`\n                )\n            }\n    }\n        vm[key] = typeof methods[key] !== \'function\' ? noop : bind(methods[key], vm)\n    }\n}\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("p",[e("strong",[s._v("初始化 data")])]),s._v(" "),e("p",[s._v("初始化"),e("code",[s._v("data")]),s._v("也比较简单，它的初始化函数定义位于源码的"),e("code",[s._v("src/core/instance/state.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nexport function initState (vm: Component) {\n    vm._watchers = []\n    const opts = vm.$options\n    if (opts.props) initProps(vm, opts.props)\n    if (opts.methods) initMethods(vm, opts.methods)\n    if (opts.data) {\n        initData(vm)\n    } else {\n        observe(vm._data = {}, true)\n    }\n    if (opts.computed) initComputed(vm, opts.computed)\n    if (opts.watch && opts.watch !== nativeWatch) {\n        initWatch(vm, opts.watch)\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[e("strong",[s._v("初始化 computed")])]),s._v(" "),e("p",[s._v("初始化"),e("code",[s._v("initComputed")]),s._v("的内部原理是怎样的。"),e("code",[s._v("initComputed")]),s._v("函数的定义位于源码的"),e("code",[s._v("src/core/instance/state.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nfunction initComputed (vm: Component, computed: Object) {\n    const watchers = vm._computedWatchers = Object.create(null)\n    const isSSR = isServerRendering()\n    for (const key in computed) {\n        const userDef = computed[key]\n        const getter = typeof userDef === 'function' ? userDef : userDef.get\n        if (process.env.NODE_ENV !== 'production' && getter == null) {\n            warn(\n            `Getter is missing for computed property \"${key}\".`,\n            vm\n            )\n        }\n\n        if (!isSSR) {\n            watchers[key] = new Watcher(\n                vm,\n                getter || noop,\n                noop,\n                computedWatcherOptions\n            )\n        }\n\n        if (!(key in vm)) {\n            defineComputed(vm, key, userDef)\n        } else if (process.env.NODE_ENV !== 'production') {\n            if (key in vm.$data) {\n                warn(`The computed property \"${key}\" is already defined in data.`, vm)\n            } else if (vm.$options.props && key in vm.$options.props) {\n                warn(`The computed property \"${key}\" is already defined as a prop.`, vm)\n            }\n        }\n    }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br")])]),e("p",[e("strong",[s._v("初始化 watch")])]),s._v(" "),e("p",[s._v("初始化"),e("code",[s._v("watch")]),s._v("选项，在日常开发中"),e("code",[s._v("watch")]),s._v("选项也经常会使用到，它可以用来侦听某个已有的数据，当该数据发生变化时执行对应的回调函数。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nfunction initWatch (vm: Component, watch: Object) {\n    for (const key in watch) {\n        const handler = watch[key]\n        if (Array.isArray(handler)) {\n            for (let i = 0; i < handler.length; i++) {\n                createWatcher(vm, key, handler[i])\n            }\n        } else {\n            createWatcher(vm, key, handler)\n        }\n    }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("h4",{attrs:{id:"_5-2-模板编译阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-模板编译阶段"}},[s._v("#")]),s._v(" 5.2 模板编译阶段")]),s._v(" "),e("p",[s._v("模板编译阶段主要工作是获取到用户传入的模板内容并将其编译成渲染函数。")]),s._v(" "),e("p",[s._v("模板编译阶段并不是存在于"),e("code",[s._v("Vue")]),s._v("的所有构建版本中，它只存在于完整版中。在只包含运行时版本中并不存在该阶段，这是因为当使用"),e("code",[s._v("vue-loader")]),s._v("或"),e("code",[s._v("vueify")]),s._v("时，"),e("code",[s._v("*.vue")]),s._v("文件内部的模板会在构建时预编译成渲染函数，所以是不需要编译的，从而不存在模板编译阶段，由上一步的初始化阶段直接进入下一阶段的挂载阶段。")]),s._v(" "),e("p",[e("code",[s._v("vue")]),s._v("基于源码构建的有两个版本，一个是"),e("code",[s._v("runtime only")]),s._v("（一个只包含运行时的版本），另一个是"),e("code",[s._v("runtime+compiler")]),s._v("（一个同时包含编译器和运行时的完整版本）。而两个版本的区别仅在于后者包含了一个编译器。")]),s._v(" "),e("ul",[e("li",[s._v("完整版本")])]),s._v(" "),e("p",[s._v("一个完整的 "),e("code",[s._v("Vue")]),s._v("版本是包含编译器的，我们可以使用"),e("code",[s._v("template")]),s._v("选项进行模板编写。编译器会自动将"),e("code",[s._v("template")]),s._v("选项中的模板字符串编译成渲染函数的代码，源码中就是"),e("code",[s._v("render")]),s._v("函数。如果你需要在客户端编译模板（比如传入一个字符串给"),e("code",[s._v("template")]),s._v("选项，或挂载到一个元素上并以其 "),e("code",[s._v("DOM")]),s._v("内部的"),e("code",[s._v("HTML")]),s._v("作为模板），就需要一个包含编译器的版本，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//  需要编译器的版本\nnew Vue({\n    template:'<div>{{hi}}</div>'\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ul",[e("li",[s._v("只包含运行时版本")])]),s._v(" "),e("p",[s._v("只包含运行时的版本拥有创建"),e("code",[s._v("Vue")]),s._v("实例、渲染并处理"),e("code",[s._v("Virtual DOM")]),s._v("等功能，基本上就是除去编译器外的完整代码。该版本的适用场景有两种：")]),s._v(" "),e("ol",[e("li",[s._v("我们在选项中通过手写"),e("code",[s._v("render")]),s._v("函数去定义渲染过程，这个时候并不需要包含编译器的版本便可完整执行。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 不需要编译器\nnew Vue({\n    render(h){\n        return h('div',this.hi)\n    }\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("借助"),e("code",[s._v("vue-loader")]),s._v("这样的编译工具进行编译，当我们利用"),e("code",[s._v("wepback")]),s._v("进行"),e("code",[s._v("vue")]),s._v("的工程化开发时，常常会利用"),e("code",[s._v("vue-loader")]),s._v("对"),e("code",[s._v("*.vue")]),s._v("文件进行编译，尽管我们也是利用"),e("code",[s._v("template")]),s._v("模板标签去书写代码，但是此时的"),e("code",[s._v("Vue")]),s._v("已经不需要利用编译器去负责模板的编译工作了，这个过程交给了插件去实现。")])]),s._v(" "),e("p",[s._v("编译过程对性能会造成一定的损耗，并且由于加入了编译的流程代码，"),e("code",[s._v("Vue")]),s._v("代码的总体积也更加庞大（运行时版本相比完整版体积要小大约 30%）。因此在实际开发中，我们需要借助像"),e("code",[s._v("webpack")]),s._v("的"),e("code",[s._v("vue-loader")]),s._v("这类工具进行编译，将"),e("code",[s._v("vue")]),s._v("对模板的编译阶段合并到"),e("code",[s._v("webpack")]),s._v("的构建流程中，这样不仅减少了生产环境代码的体积，也大大提高了运行时的性能，一举两得。")]),s._v(" "),e("p",[e("strong",[s._v("模板编译阶段分析")])]),s._v(" "),e("p",[s._v("完整版本和只包含运行时版之间的差异主要在于是否有模板编译阶段，而是否有模板编译阶段主要表现在"),e("code",[s._v("vm.$mount")]),s._v("方法的实现上。实现上"),e("code",[s._v("$mount")]),s._v("也有两个版本。")]),s._v(" "),e("p",[e("strong",[s._v("两种"),e("code",[s._v("$mount")]),s._v("方法对比")])]),s._v(" "),e("p",[s._v("只包含运行时版本的"),e("code",[s._v("$mount")]),s._v("代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.prototype.$mount = function(el,hydrating){\n    el = el && inBrowser ? query(el) : undefined;\n    return mountComponent(this, el, hydrating)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("在该版本中的"),e("code",[s._v("$mount")]),s._v("方法内部获取到"),e("code",[s._v("el")]),s._v("选项对应的"),e("code",[s._v("DOM")]),s._v("元素后直接调用"),e("code",[s._v("mountComponent")]),s._v("函数进行挂载操作，关于该函数我们会在挂载阶段详细介绍。")]),s._v(" "),e("p",[s._v("而完整版本的"),e("code",[s._v("$mount")]),s._v("代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var mount = Vue.prototype.$mount;\nVue.prototype.$mount = function (el,hydrating) {\n  // 省略获取模板及编译代码\n\n  return mount.call(this, el, hydrating)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("在完整版本的"),e("code",[s._v("$mount")]),s._v("定义之前，先将"),e("code",[s._v("Vue")]),s._v("原型上的"),e("code",[s._v("$mount")]),s._v("方法先缓存起来，记作变量"),e("code",[s._v("mount")]),s._v("。其实在源码中，是先定义史包含运行时版本的"),e("code",[s._v("$mount")]),s._v("方法，再定义完整版本的"),e("code",[s._v("$mount")]),s._v("方法，所以此时缓存的"),e("code",[s._v("mount")]),s._v("变量就是只包含运行时版本的"),e("code",[s._v("$mount")]),s._v("方法。")]),s._v(" "),e("p",[e("strong",[s._v("完整版的"),e("code",[s._v("vm.$mount")]),s._v("方法分析")])]),s._v(" "),e("p",[s._v("完整版的"),e("code",[s._v("vm.$mount")]),s._v("方法定义位于源码的"),e("code",[s._v("src/platforms/web/entry-runtime-with-compiler.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const mount = Vue.prototype.$mount\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && query(el)\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      `Do not mount Vue to <html> or <body> - mount to normal elements instead.`\n    )\n    return this\n  }\n\n  const options = this.$options\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    let template = options.template\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template)\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              `Template element not found or is empty: ${options.template}`,\n              this\n            )\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this)\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el)\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile')\n      }\n\n      const { render, staticRenderFns } = compileToFunctions(template, {\n        outputSourceRange: process.env.NODE_ENV !== 'production',\n        shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this)\n      options.render = render\n      options.staticRenderFns = staticRenderFns\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile end')\n        measure(`vue ${this._name} compile`, 'compile', 'compile end')\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br")])]),e("p",[s._v("从代码中可以看到，该函数可以大致分为三部分：")]),s._v(" "),e("ul",[e("li",[s._v("根据传入的"),e("code",[s._v("el")]),s._v("参数获取"),e("code",[s._v("DOM")]),s._v("元素")]),s._v(" "),e("li",[s._v("在用户没有手写"),e("code",[s._v("render")]),s._v("函数的情况下获取传入的模板"),e("code",[s._v("template")]),s._v("；")]),s._v(" "),e("li",[s._v("将获取到的"),e("code",[s._v("template")]),s._v("编译成"),e("code",[s._v("render")]),s._v("函数；")])]),s._v(" "),e("p",[s._v("首先，根据传入的"),e("code",[s._v("el")]),s._v("参数获取"),e("code",[s._v("DOM")]),s._v("元素。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("el = el && query(el);\n\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("由于"),e("code",[s._v("el")]),s._v("参数可以是元素，也可以是字符串类型的元素选择器，所以调用"),e("code",[s._v("query")]),s._v("函数来获取到"),e("code",[s._v("el")]),s._v("对应的"),e("code",[s._v("DOM")]),s._v("元素。由于"),e("code",[s._v("query")]),s._v("函数比较简单，就是根据传入的"),e("code",[s._v("el")]),s._v("参数是否为字符串从而以不同方式获取到对应的"),e("code",[s._v("DOM")]),s._v("元素。")]),s._v(" "),e("p",[s._v("另外，这里还多了一个判断，就是判断获取到"),e("code",[s._v("el")]),s._v("对应的"),e("code",[s._v("DOM")]),s._v("元素如果是"),e("code",[s._v("body")]),s._v("或"),e("code",[s._v("html")]),s._v("元素时，将会抛出警告。这是因为"),e("code",[s._v("Vue")]),s._v("会将模板中的内容替换"),e("code",[s._v("el")]),s._v("对应的"),e("code",[s._v("DOM")]),s._v("元素，如果是"),e("code",[s._v("body")]),s._v("或"),e("code",[s._v("html")]),s._v("元素时，替换之后将会破坏整个"),e("code",[s._v("DOM")]),s._v("文档，所以不允许"),e("code",[s._v("el")]),s._v("是"),e("code",[s._v("body")]),s._v("或"),e("code",[s._v("html")]),s._v("。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('if (el === document.body || el === document.documentElement) {\n  warn(\n    "Do not mount Vue to <html> or <body> - mount to normal elements instead."\n  );\n  return this\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("接着，在用户没有手写"),e("code",[s._v("render")]),s._v("函数的情况下获取传入的模板"),e("code",[s._v("template")]),s._v("；如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (!options.render) {\n  var template = options.template;\n  if (template) {\n    if (typeof template === 'string') {\n      if (template.charAt(0) === '#') {\n        template = idToTemplate(template);\n        /* istanbul ignore if */\n        if (!template) {\n          warn(\n            (\"Template element not found or is empty: \" + (options.template)),\n            this\n          );\n        }\n      }\n    } else if (template.nodeType) {\n        template = template.innerHTML;\n    } else {\n      {\n        warn('invalid template option:' + template, this);\n      }\n      return this\n    }\n  } else if (el) {\n    template = getOuterHTML(el);\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br")])]),e("p",[s._v("首先获取用户传入的"),e("code",[s._v("template")]),s._v("选项赋给变量"),e("code",[s._v("template")]),s._v("，如果变量"),e("code",[s._v("template")]),s._v("存在，则接着判断如果"),e("code",[s._v("template")]),s._v("字符串并且以"),e("code",[s._v("#")]),s._v("开头，则认为"),e("code",[s._v("template")]),s._v("是"),e("code",[s._v("id")]),s._v("选择符，则调用"),e("code",[s._v("idToTemplate")]),s._v("函数获取到选择符对应的"),e("code",[s._v("DOM")]),s._v("元素的"),e("code",[s._v("innerHTML")]),s._v("作为模板，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (template) {\n  if (typeof template === 'string') {\n    if (template.charAt(0) === '#') {\n      template = idToTemplate(template);\n    }\n  }\n}\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("如果"),e("code",[s._v("template")]),s._v("不是字符串，那就判断它是不是一个"),e("code",[s._v("DOM")]),s._v("元素，如果是，则使用该"),e("code",[s._v("DOM")]),s._v("元素的"),e("code",[s._v("innerHTML")]),s._v("作为模板，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (template.nodeType) {\n  template = template.innerHTML;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("总结")])]),s._v(" "),e("p",[s._v("介绍了"),e("code",[s._v("Vue")]),s._v("源码构建的两种版本：完整版本和只包含运行时版本。并且我们知道了模板编译阶段只存在于完整版中，在只包含运行时版本中不存在该阶段，这是因为在只包含运行时版本中，当使用"),e("code",[s._v("vue-loader")]),s._v("或"),e("code",[s._v("vueify")]),s._v("时，"),e("code",[s._v("*.vue")]),s._v("文件内部的模板会在构建时预编译成渲染函数，所以是不需要编译的，从而不存在模板编译阶段。")]),s._v(" "),e("p",[s._v("然后对比了两种版本"),e("code",[s._v("$mount")]),s._v("方法的区别。它们的区别在于在"),e("code",[s._v("$mount")]),s._v("方法中是否进行了模板编译。在只包含运行时版本的"),e("code",[s._v("$mount")]),s._v("方法中获取到"),e("code",[s._v("DOM")]),s._v("元素后直接进入挂载阶段，而在完整的"),e("code",[s._v("$mount")]),s._v("方法中是先将模板进行编译，然后回过头调用只包含运行时版本的"),e("code",[s._v("$mount")]),s._v("方法进入挂载阶段。")]),s._v(" "),e("p",[s._v("最后，我们知道了分析模板编译阶段其实就是分析完整版本的"),e("code",[s._v("vm.$mount")]),s._v("方法的实现，我们将完整版本的"),e("code",[s._v("vm.$mount")]),s._v("方法源码进行了逐行分析。知道了在该阶段所做的工作就是：从用户传入的"),e("code",[s._v("el")]),s._v("选项和"),e("code",[s._v("template")]),s._v("选项中获取到用户传入的内部或外部模板，然后将获取到的模板编译成渲染函数。")]),s._v(" "),e("h4",{attrs:{id:"_5-3-挂载阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-挂载阶段"}},[s._v("#")]),s._v(" 5.3 挂载阶段")]),s._v(" "),e("p",[s._v("挂载阶段所做的主要工作是创建"),e("code",[s._v("Vue")]),s._v("实例并用其替换"),e("code",[s._v("el")]),s._v("选项对应的"),e("code",[s._v("DOM")]),s._v("元素，同时还要开启对模板中数据（状态）的监控，当数据（状态）发生变化时通知其依赖进行视图更新。")]),s._v(" "),e("p",[e("img",{attrs:{src:"vue17.jpg",alt:"images"}})]),s._v(" "),e("p",[e("strong",[s._v("挂载阶段分析")])]),s._v(" "),e("p",[s._v("在完整版本的"),e("code",[s._v("$mount")]),s._v("方法中将模板编译完成之后，会回过头去调只包含运行时版本的"),e("code",[s._v("$mount")]),s._v("方法进入挂载阶段，要想分析挂载阶段我们必须从只包含运行时版本的"),e("code",[s._v("$mount")]),s._v("方法入手。")]),s._v(" "),e("p",[s._v("只包含运行时版本的"),e("code",[s._v("$mount")]),s._v("代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.prototype.$mount = function (el,hydrating) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("在该函数内部首先获取到"),e("code",[s._v("el")]),s._v("选项对应的"),e("code",[s._v("DOM")]),s._v("元素，然后调用"),e("code",[s._v("mountComponent")]),s._v("函数并将"),e("code",[s._v("el")]),s._v("选项对应的"),e("code",[s._v("DOM")]),s._v("元素传入，进入挂载阶段。")]),s._v(" "),e("p",[e("code",[s._v("mountComponent")]),s._v("函数的定义位于源码的"),e("code",[s._v("src/core/instance/lifecycle.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function mountComponent (vm,el,hydrating) {\n    vm.$el = el\n    if (!vm.$options.render) {\n        vm.$options.render = createEmptyVNode\n    }\n    callHook(vm, 'beforeMount')\n\n    let updateComponent\n\n    updateComponent = () => {\n        vm._update(vm._render(), hydrating)\n    }\n    new Watcher(vm, updateComponent, noop, {\n        before () {\n            if (vm._isMounted) {\n                callHook(vm, 'beforeUpdate')\n            }\n        }\n    }, true /* isRenderWatcher */)\n    hydrating = false\n\n    if (vm.$vnode == null) {\n        vm._isMounted = true\n        callHook(vm, 'mounted')\n    }\n    return vm\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("p",[s._v("可以看到，在该函数中，首先会判断实例上是否存在渲染函数，如果不存在，则设置一个默认的渲染函数"),e("code",[s._v("createEmptyVNode")]),s._v("，该渲染函数会创建一个注释类型的"),e("code",[s._v("VNode")]),s._v("节点。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$el = el\nif (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("然后调用"),e("code",[s._v("callHook")]),s._v("函数来触发"),e("code",[s._v("beforeMount")]),s._v("生命同期钩子函数，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("callHook(vm, 'beforeMount')\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("该钩子函数触发后标志着正式开始执行挂载操作。")]),s._v(" "),e("p",[s._v("接下来定义了一个"),e("code",[s._v("updateComponent")]),s._v("函数，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("updateComponent = () => {\n    vm._update(vm._render(), hydrating)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("在该函数内部，首先执行渲染函数"),e("code",[s._v("vm._render()")]),s._v("得到一份最新的"),e("code",[s._v("VNode")]),s._v("节点树，然后执行"),e("code",[s._v("vm._update()")]),s._v("方法对最新的"),e("code",[s._v("VNode")]),s._v("节点树与上一次渲染的旧"),e("code",[s._v("VNode")]),s._v("节点树进行对比并更新"),e("code",[s._v("DOM")]),s._v("节点（即"),e("code",[s._v("patch")]),s._v("操作），完成一次渲染。")]),s._v(" "),e("p",[s._v("如果调用了"),e("code",[s._v("updateComponent")]),s._v("函数，就会将最新的模板内容渲染到视图页面中，这样就完成了挂载操作的一半工作。")]),s._v(" "),e("p",[s._v("这是因为在挂载阶段不但要将模板渲染到视图中，同时还要开启对模板中数据（状态）的监控，当数据（状态）发生变化时通知其依赖进行视图更新。")]),s._v(" "),e("p",[s._v("接下来创建了一个"),e("code",[s._v("Watcher")]),s._v("实例，并将定义好的"),e("code",[s._v("updateComponent")]),s._v("函数传入。要想开启对模板中数据（状态）的监控，这一段代码是关键，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("new Watcher(\n    vm,                    // 第一个参数\n    updateComponent,       // 第二个参数\n    noop,                  // 第三个参数\n    {                      // 第四个参数\n        before () {\n          if (vm._isMounted) {\n            callHook(vm, 'beforeUpdate')\n          }\n        }\n\t},\n    true                    // 第五个参数\n)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[s._v("在创建"),e("code",[s._v("Watcher")]),s._v("实例的时候，传入的第二个参数是"),e("code",[s._v("updateComponent")]),s._v("函数。Watcher 类构造函数的第二个参数支持两种类型：函数和数据路径（如"),e("code",[s._v("a.b.c")]),s._v("）。如果是数据路径，会根据路径去读取这个数据；如果是函数，会执行这个函数。一旦读取了数据或者执行了函数，就会触发数据或者函数内数据的"),e("code",[s._v("getter")]),s._v("方法，而在"),e("code",[s._v("getter")]),s._v("方法中会将"),e("code",[s._v("watcher")]),s._v("实例添加到该数据的依赖列表中，当该数据发生变化时就会通知依赖列表中所有的依赖，依赖接收到通知后就会调用第四个参数回调函数去更新视图。")]),s._v(" "),e("p",[s._v("换句话说，上面代码中把"),e("code",[s._v("updateComponent")]),s._v("函数作为第二个参数传给"),e("code",[s._v("Watcher")]),s._v("类从而创建了"),e("code",[s._v("watcher")]),s._v("实例，那么"),e("code",[s._v("updateComponent")]),s._v("函数中读取的所有数据都将被"),e("code",[s._v("watcher")]),s._v("所监控，这些数据中只要有任何一个发生了变化，那么"),e("code",[s._v("watcher")]),s._v("都将会得到通知，从而会去调用第四个参数回调函数去更新视图，如此反复，直到实例被销毁。")]),s._v(" "),e("p",[e("strong",[s._v("总结")])]),s._v(" "),e("p",[s._v("在该阶段中所做的主要工作是创建"),e("code",[s._v("Vue")]),s._v("实例并且用其替换"),e("code",[s._v("el")]),s._v(" 选项对应的"),e("code",[s._v("DOM")]),s._v("元素，同时还要开启对模板中数据（状态）的监控，当数据（状态）发生变化时通知其依赖进行视图更新。")]),s._v(" "),e("p",[s._v("我们将挂载阶段所做的工作分成两部分进行了分析，第一部分是将模板渲染到视图上，第二部分是开启对模板中数据（状态）的监控。两部分工作都完成以后挂载阶段才算真正的完成了。")]),s._v(" "),e("h4",{attrs:{id:"_5-4-销毁阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-销毁阶段"}},[s._v("#")]),s._v(" 5.4 销毁阶段")]),s._v(" "),e("p",[s._v("销毁阶段所做的主要工作是将当前的"),e("code",[s._v("Vue")]),s._v("实例从其父级实例中删除，取消当前实例上的所有依赖追踪并且移除实例上的所有事件监听器。")]),s._v(" "),e("p",[e("strong",[s._v("销毁阶段分析")])]),s._v(" "),e("p",[s._v("当调用了实例的"),e("code",[s._v("$destroy")]),s._v("方法之后，当前实例就进入了销毁阶段。所以分析销毁阶段就是分析"),e("code",[s._v("$destroy")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.prototype.$destroy = function () {\n    const vm: Component = this\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy')\n    vm._isBeingDestroyed = true\n    // remove self from parent\n    const parent = vm.$parent\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm)\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown()\n    }\n    let i = vm._watchers.length\n    while (i--) {\n      vm._watchers[i].teardown()\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--\n    }\n    // call the last hook...\n    vm._isDestroyed = true\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null)\n    // fire destroyed hook\n    callHook(vm, 'destroyed')\n    // turn off all instance listeners.\n    vm.$off()\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br")])]),e("h3",{attrs:{id:"六、实例方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六、实例方法"}},[s._v("#")]),s._v(" 六、实例方法")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#_6-1-%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B9%E6%B3%95"}},[s._v("数据相关的方法")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#_6-2-%E4%BA%8B%E4%BB%B6%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B9%E6%B3%95"}},[s._v("事件相关的方法")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#_6-3-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B9%E6%B3%95"}},[s._v("生命周期相关的方法")])])]),s._v(" "),e("h4",{attrs:{id:"_6-1-数据相关的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-数据相关的方法"}},[s._v("#")]),s._v(" 6.1 数据相关的方法")]),s._v(" "),e("p",[s._v("参考小节"),e("a",{attrs:{href:"#2.3-%E5%8F%98%E5%8C%96%E4%BE%A6%E6%B5%8B%E7%9A%84-API-%E5%AE%9E%E7%8E%B0"}},[s._v("变化侦测的 API 实现")])]),s._v(" "),e("h4",{attrs:{id:"_6-2-事件相关的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-事件相关的方法"}},[s._v("#")]),s._v(" 6.2 事件相关的方法")]),s._v(" "),e("p",[s._v("与事件相关的实例方法有 4 个，分别是"),e("code",[s._v("vm.$on")]),s._v("、"),e("code",[s._v("vm.$emit")]),s._v("、"),e("code",[s._v("vm.$off")]),s._v("和"),e("code",[s._v("vm.$once")]),s._v("。它们是在"),e("code",[s._v("eventsMixin")]),s._v("函数中挂载到"),e("code",[s._v("Vue")]),s._v("原型上的，代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function eventsMixin (Vue) {\n    Vue.prototype.$on = function (event, fn) {}\n    Vue.prototype.$once = function (event, fn) {}\n    Vue.prototype.$off = function (event, fn) {}\n    Vue.prototype.$emit = function (event) {}\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("当执行"),e("code",[s._v("eventsMixin")]),s._v("函数后，会向"),e("code",[s._v("Vue")]),s._v("原型上挂载上述 4 个实例方法。")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("vm.$on")])]),s._v(" "),e("li",[e("code",[s._v("vm.$emit")])]),s._v(" "),e("li",[e("code",[s._v("vm.$off")])]),s._v(" "),e("li",[e("code",[s._v("vm.$once")])])]),s._v(" "),e("p",[e("strong",[e("code",[s._v("vm.$on")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$on( event, callback )\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[e("strong",[s._v("参数：")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("{string | Array<string>} event")]),s._v("(数组只在 2.2.0+中支持)")]),s._v(" "),e("li",[e("code",[s._v("{Function} callback")])])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("作用：")])])])]),s._v(" "),e("p",[s._v("监听当前实例上的自定义事件。事件可以由"),e("code",[s._v("vm.$emit")]),s._v("触发。回调函数会接收所有传入事件触发函数的额外参数")]),s._v(" "),e("p",[s._v("示例：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$on('test', function (msg) {\n  console.log(msg)\n})\nvm.$emit('test', 'hi')\n// => \"hi\"\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("内部原理：")])])]),s._v(" "),e("p",[e("code",[s._v("$on")]),s._v("和"),e("code",[s._v("$emit")]),s._v("这两个方法的内部原理是设计模式中最典型的发布订阅模式，首先定义一个事件中心，通过"),e("code",[s._v("$on")]),s._v("订阅事件，将事件存储在事件中心里面，然后通过"),e("code",[s._v("$emit")]),s._v("触发事件中心里面存储的订阅事件。")]),s._v(" "),e("p",[s._v("该方法的定义位于源码的"),e("code",[s._v("src/core/instance/event.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.prototype.$on = function (event, fn) {\n    const vm: Component = this\n    if (Array.isArray(event)) {\n        for (let i = 0, l = event.length; i < l; i++) {\n            this.$on(event[i], fn)\n        }\n    } else {\n        (vm._events[event] || (vm._events[event] = [])).push(fn)\n    }\n    return vm\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[e("code",[s._v("$on")]),s._v("方法接收两个参数，第一个参数是订阅的事件名，可以是数组，表示订阅多个事件。第二个参数是回调函数，当触发所订阅的事件时会执行该回调函数。")]),s._v(" "),e("p",[s._v("首先，判断传入的事件名是否是一个数组，如果是数组，就表示需要一次性订阅多个事件，就遍历该数组，将数组中的每一个事件都递归调用"),e("code",[s._v("$on")]),s._v(" 方法将其作为单个事件订阅。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (Array.isArray(event)) {\n    for (let i = 0, l = event.length; i < l; i++) {\n        this.$on(event[i], fn)\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("如果不是数组，那就当做单个事件名来处理，以该事件名作为 "),e("code",[s._v("key")]),s._v("，先尝试在当前实例的"),e("code",[s._v("_events")]),s._v(" 属性中获取其对应的事件列表，如果获取不到就给其赋空数组为默认值，并将第二个参数回调函数添加进去。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("else {\n    (vm._events[event] || (vm._events[event] = [])).push(fn)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("当前实例的"),e("code",[s._v("_events")]),s._v("属性是干嘛的呢？")]),s._v(" "),e("p",[s._v("生命周期初始化阶段的初始化事件 "),e("code",[s._v("initEvents")]),s._v(" 函数中，在该函数中，首先在当前实例上绑定了"),e("code",[s._v("_events")]),s._v(" 属性并给其赋值为空对象，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function initEvents (vm: Component) {\n    vm._events = Object.create(null)\n    // ...\n\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("这个"),e("code",[s._v("_events")]),s._v("属性就是用来作为当前实例的事件中心，所有绑定在这个实例上的事件都会存储在事件中心"),e("code",[s._v("_events")]),s._v("属性中。")]),s._v(" "),e("p",[e("strong",[e("code",[s._v("vm.$emit")])])]),s._v(" "),e("p",[e("code",[s._v("vm.$emit")]),s._v("用法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$emit( eventName, […args] )\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("内部原理")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Vue.prototype.$emit = function (event: string): Component {\n    const vm: Component = this\n    let cbs = vm._events[event]\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs\n      const args = toArray(arguments, 1)\n      for (let i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args)\n        } catch (e) {\n          handleError(e, vm, `event handler for "${event}"`)\n        }\n      }\n    }\n    return vm\n  }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[e("strong",[e("code",[s._v("vm.$off")])])]),s._v(" "),e("p",[s._v("该函数的用法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$off( [event, callback] )\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[e("strong",[s._v("参数")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("{string | Array<string>} event")])]),s._v(" "),e("li",[e("code",[s._v("{Function} [callback]")])])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("作用")])]),s._v(" "),e("p",[s._v("移除自定义事件监听器。")]),s._v(" "),e("ul",[e("li",[s._v("如果没有提供参数，则移除所有的事件监听器；")]),s._v(" "),e("li",[s._v("如果只提供了事件，则移除该事件所有的监听器；")]),s._v(" "),e("li",[s._v("如果同时提供了事件与回调，则只移除这个回调的监听器。")])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("内部原理")])])])]),s._v(" "),e("p",[s._v("该方法的定义位于源码的"),e("code",[s._v("src/core/instance/event.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.prototype.$off = function (event, fn) {\n    const vm: Component = this\n    // all\n    if (!arguments.length) {\n        vm._events = Object.create(null)\n        return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n        for (let i = 0, l = event.length; i < l; i++) {\n            this.$off(event[i], fn)\n        }\n        return vm\n    }\n    // specific event\n    const cbs = vm._events[event]\n    if (!cbs) {\n        return vm\n    }\n    if (!fn) {\n        vm._events[event] = null\n        return vm\n    }\n    if (fn) {\n        // specific handler\n        let cb\n        let i = cbs.length\n        while (i--) {\n            cb = cbs[i]\n            if (cb === fn || cb.fn === fn) {\n                cbs.splice(i, 1)\n                break\n            }\n        }\n    }\n    return vm\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br")])]),e("p",[s._v("该方法内部就是通过不断判断所传参数的情况进而不同的逻辑处理。")]),s._v(" "),e("p",[s._v("首先，判断如果没有传入任何参数，这就是第一种情况：如果没有提供参数，则移除所有的事件监听器。我们")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (!arguments.length) {\n    vm._events = Object.create(null)\n    return vm\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("接着，判断如果传入的需要移除的事件名是一个数组，就表示需要一次性移除多个事件，那么我们只需订阅多个事件一样，遍历该数组，然后将数组中的每一个事件都递归调用"),e("code",[s._v("$off")]),s._v("方法进行移除即可。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (Array.isArray(event)) {\n    for (let i = 0, l = event.length; i < l; i++) {\n        this.$off(event[i], fn)\n    }\n    return vm\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("strong",[e("code",[s._v("vm.$once")])])]),s._v(" "),e("p",[s._v("官方文档用法：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$once( event, callback )\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[e("strong",[s._v("参数：")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("{string} event")])]),s._v(" "),e("li",[e("code",[s._v("{Function} callback")])])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("作用：")])])])]),s._v(" "),e("p",[s._v("监听一个自定义事件，但是只触发一次。一旦触发之后，监听器就会被移除。")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("内部原理")])])]),s._v(" "),e("p",[s._v("该方法的作用是先订阅事件，但是该事件只能触发一次，也就是说当该事件被触发后会立即移除。要实现这个功能也不难，我们可以定义一个子函数，用这个子函数来替换原本订阅的事件所对应的回调，也就是当触发订阅事件时，其实执行的是这个子函数，然后再子函数内部先把订阅移除，再执行原本的回调。")]),s._v(" "),e("p",[s._v("该方法的定义位于源码的"),e("code",[s._v("src/core/instance/event.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.prototype.$once = function (event, fn) {\n    const vm: Component = this\n    function on () {\n        vm.$off(event, on)\n        fn.apply(vm, arguments)\n    }\n    on.fn = fn\n    vm.$on(event, on)\n    return vm\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("h4",{attrs:{id:"_6-3-生命周期相关的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-生命周期相关的方法"}},[s._v("#")]),s._v(" 6.3 生命周期相关的方法")]),s._v(" "),e("p",[s._v("与生命周期想着的实例方法有 4 个，分别是"),e("code",[s._v("vm.$mount")]),s._v("、"),e("code",[s._v("vm.$forceUpdate")]),s._v("、"),e("code",[s._v("vm.$nextTick")]),s._v("和"),e("code",[s._v("vm.$destory")]),s._v("。")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("vm.$mount")])]),s._v(" "),e("li",[e("code",[s._v("vm.$forceUpdate")])]),s._v(" "),e("li",[e("code",[s._v("vm.$nextTick")])]),s._v(" "),e("li",[e("code",[s._v("vm.$destory")])])]),s._v(" "),e("p",[e("strong",[e("code",[s._v("vm.$mount")])])]),s._v(" "),e("p",[s._v("官方使用如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$mount( [elementOrSelector] )\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[e("strong",[s._v("参数")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("{Element | string} [elementOrSelector]")])]),s._v(" "),e("li",[e("code",[s._v("{boolean} [hydrating]")])])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("返回值")]),s._v("："),e("code",[s._v("vm")]),s._v("- 实例自身")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("作用")]),s._v("\n如果"),e("code",[s._v("Vue")]),s._v("实例在实例化时没有收到 el 选项，则它处于“未挂载”状态，没有关联的 DOM 元素。可以使用"),e("code",[s._v("vm.$mount()")]),s._v("手动地挂载一个未挂载的实例。")]),s._v(" "),e("p",[s._v("如果没有提供"),e("code",[s._v("elementOrSelector")]),s._v("参数，模板将被渲染为文档之外的元素，并且你必须使用原生"),e("code",[s._v("DOM API")]),s._v("把它插入文档中。")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("内部原理")])])])]),s._v(" "),e("p",[s._v("该方法的内部原理在介绍"),e("strong",[s._v("生命周期篇的模板编译阶段")]),s._v("中已经详细分析过，此处不再重复。")]),s._v(" "),e("p",[e("strong",[e("code",[s._v("vm.$forceUpdate")])])]),s._v(" "),e("p",[s._v("用法如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$forceUpdate()\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[e("strong",[s._v("作用：")]),s._v(" 迫使"),e("code",[s._v("Vue")]),s._v("实例重新渲染")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("内部原理")])])])]),s._v(" "),e("p",[s._v("关于该方法的内部原理在介绍"),e("strong",[s._v("生命周期篇的模板编译阶段")]),s._v("中已经详细分析过，此处不再重复。")]),s._v(" "),e("p",[e("strong",[e("code",[s._v("vm.$forceUpdate")])])]),s._v(" "),e("p",[s._v("其使用如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$forceUpdate()\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("作用：")])])]),s._v(" "),e("p",[s._v("迫使"),e("code",[s._v("Vue")]),s._v("实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("内部原理")])])]),s._v(" "),e("p",[s._v("当实例依赖的数据发生变化时，变化的数据会通知其收集的依赖列表中的依赖进行更新，收集依赖就是收集"),e("code",[s._v("watcher")]),s._v("，依赖更新就是"),e("code",[s._v("watcher")]),s._v("调用"),e("code",[s._v("update")]),s._v("方法更新，所以实例依赖的数据发生变化时，就会通知实例"),e("code",[s._v("watcher")]),s._v("去执行"),e("code",[s._v("update")]),s._v("方法进行更新。")]),s._v(" "),e("p",[s._v("代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.prototype.$forceUpdate = function () {\n    const vm: Component = this\n    if (vm._watcher) {\n        vm._watcher.update()\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("strong",[e("code",[s._v("vm.$nextTick")])])]),s._v(" "),e("p",[s._v("参考"),e("a",{attrs:{href:"https://km.xiaowuzi.info/js/vue-nexttick.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue.netTick 理解与分析"),e("OutboundLink")],1)]),s._v(" "),e("p",[e("strong",[e("code",[s._v("vm.$destory")])])]),s._v(" "),e("p",[s._v("其官方用法：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vm.$destroy()\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("用法：")])])]),s._v(" "),e("p",[s._v("完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器。")]),s._v(" "),e("p",[s._v("触发 "),e("code",[s._v("beforeDestroy")]),s._v(" 和 "),e("code",[s._v("destroyed")]),s._v(" 的钩子。")]),s._v(" "),e("h3",{attrs:{id:"七、全局-api-篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七、全局-api-篇"}},[s._v("#")]),s._v(" 七、全局 API 篇")]),s._v(" "),e("p",[s._v("与实例方法不同，实例方法是将方法挂载到"),e("code",[s._v("Vue")]),s._v("的原型上，而全局 API 是直接在"),e("code",[s._v("Vue")]),s._v("上挂载方法。在"),e("code",[s._v("Vue")]),s._v("中，全局 API 一共有 12 个，分别是"),e("code",[s._v("Vue.extend")]),s._v("、"),e("code",[s._v("Vue.nextTick")]),s._v("、"),e("code",[s._v("Vue.set")]),s._v("、"),e("code",[s._v("Vue.delete")]),s._v("、"),e("code",[s._v("Vue.directive")]),s._v("、"),e("code",[s._v("Vue.filter")]),s._v("、"),e("code",[s._v("Vue.component")]),s._v("、"),e("code",[s._v("Vue.use")]),s._v("、"),e("code",[s._v("Vue.mixin")]),s._v("、"),e("code",[s._v("Vue.observable")]),s._v("、"),e("code",[s._v("Vue.version")]),s._v("。这 12 个 API 中有的是我们在日常业务开发中经常会用到的，有的是对 Vue 内部或外部插件提供的，我们在日常业务开发中几乎用不到。")]),s._v(" "),e("ol",[e("li",[s._v("Vue.extend")]),s._v(" "),e("li",[s._v("Vue.nextTick")]),s._v(" "),e("li",[s._v("Vue.set")]),s._v(" "),e("li",[s._v("Vue.delete")]),s._v(" "),e("li",[s._v("Vue.directive")]),s._v(" "),e("li",[s._v("Vue.filter")]),s._v(" "),e("li",[s._v("Vue.component")]),s._v(" "),e("li",[s._v("directive、filter、component 小结")]),s._v(" "),e("li",[s._v("Vue.use")]),s._v(" "),e("li",[s._v("Vue.mixin")]),s._v(" "),e("li",[s._v("Vue.compile")]),s._v(" "),e("li",[s._v("Vue.observable")]),s._v(" "),e("li",[s._v("Vue.version")])]),s._v(" "),e("h4",{attrs:{id:"_7-1-vue-extend"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-vue-extend"}},[s._v("#")]),s._v(" 7.1 Vue.extend")]),s._v(" "),e("p",[s._v("既然是"),e("code",[s._v("Vue")]),s._v("类的子类，那么除了它本身独有的一些属性方法，还有一些是从"),e("code",[s._v("Vue")]),s._v("类中继承而来，所以创建子类的过程其实就是一边给子类上添加上独有的属性，一边将父类的公共属性到子类上。接下来，我们就来看看源码是如何实现这个过程的。")]),s._v(" "),e("p",[s._v("该 API 的定义位于源码的"),e("code",[s._v("src/core/global-api/extend.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nVue.extend = function (extendOptions: Object): Function {\nextendOptions = extendOptions || {}\nconst Super = this\nconst SuperId = Super.cid\nconst cachedCtors = extendOptions.\\_Ctor || (extendOptions.\\_Ctor = {})\nif (cachedCtors[SuperId]) {\nreturn cachedCtors[SuperId]\n}\n\n    const name = extendOptions.name || Super.options.name\n    if (process.env.NODE_ENV !== 'production' && name) {\n        validateComponentName(name)\n    }\n\n    const Sub = function VueComponent (options) {\n        this._init(options)\n    }\n    Sub.prototype = Object.create(Super.prototype)\n    Sub.prototype.constructor = Sub\n    Sub.cid = cid++\n    Sub.options = mergeOptions(\n        Super.options,\n        extendOptions\n    )\n    Sub['super'] = Super\n\n    if (Sub.options.props) {\n        initProps(Sub)\n    }\n    if (Sub.options.computed) {\n        initComputed(Sub)\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend\n    Sub.mixin = Super.mixin\n    Sub.use = Super.use\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n        Sub[type] = Super[type]\n    })\n    // enable recursive self-lookup\n    if (name) {\n        Sub.options.components[name] = Sub\n    }\n\n    Sub.superOptions = Super.options\n    Sub.extendOptions = extendOptions\n    Sub.sealedOptions = extend({}, Sub.options)\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub\n    return Sub\n\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br")])]),e("h4",{attrs:{id:"_7-2-vue-nexttick"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-vue-nexttick"}},[s._v("#")]),s._v(" 7.2 Vue.nextTick")]),s._v(" "),e("p",[s._v("全局 nextTick 方法同实例 nextTick 方法一样")]),s._v(" "),e("h4",{attrs:{id:"_7-3-vue-set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-vue-set"}},[s._v("#")]),s._v(" 7.3 Vue.set")]),s._v(" "),e("p",[s._v("全局 set 方法同实例 set 方法一样")]),s._v(" "),e("h4",{attrs:{id:"_7-4-vue-delete"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-vue-delete"}},[s._v("#")]),s._v(" 7.4 Vue.delete")]),s._v(" "),e("p",[s._v("全局 delete 方法同实例 delete 方法一样")]),s._v(" "),e("h4",{attrs:{id:"_7-5-vue-directive"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-vue-directive"}},[s._v("#")]),s._v(" 7.5 Vue.directive")]),s._v(" "),e("p",[s._v("其用法如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.directive( id, [definition] )\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[e("strong",[s._v("参数：")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("{string} id")])]),s._v(" "),e("li",[e("code",[s._v("{Function | Object} [definition]")])])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("作用：")])]),s._v(" "),e("p",[s._v("注册或获取全局指令。")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("原理分析")])])]),s._v(" "),e("h4",{attrs:{id:"_7-6-vue-filter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-vue-filter"}},[s._v("#")]),s._v(" 7.6 Vue.filter")]),s._v(" "),e("p",[s._v("其用法如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.filter( id, [definition] )\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("参数：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("{string} id")])]),s._v(" "),e("li",[e("code",[s._v("{Function} [definition]")])])])]),s._v(" "),e("li",[e("strong",[s._v("作用")])])]),s._v(" "),e("p",[s._v("注册或获取全局过滤器。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 注册\nVue.filter('my-filter', function (value) {\n  // 返回处理后的值\n})\n\n// getter，返回已注册的过滤器\nvar myFilter = Vue.filter('my-filter')\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("原理分析")])])]),s._v(" "),e("p",[s._v("该 API 是用来注册或获取全局过滤器的，接收两个参数：过滤器"),e("code",[s._v("id")]),s._v("和过滤的定义。同全局指令一样，注册过滤器是将定义好的过滤器存放在某个位置，获取过滤器是根据过滤器"),e("code",[s._v("id")]),s._v("从存放过滤器的位置来读取过滤器。")]),s._v(" "),e("p",[s._v("其代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.options = Object.create(null)\nVue.options['filters'] = Object.create(null)\n\nVue.filter= function (id,definition) {\n    if (!definition) {\n        return this.options['filters'][id]\n    } else {\n        this.options['filters'][id] = definition\n        return definition\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("跟全局指令一样，"),e("code",[s._v("Vue.options['filters']")]),s._v("是用来存放全局过滤器的地方。还是根据是否传入了"),e("code",[s._v("definition")]),s._v("参数来决定本次操作是注册过滤器还是获取过滤器。如果没有传入"),e("code",[s._v("definition")]),s._v("参数，则表示本次操作为获取过滤器，那么就从存放过滤器的地方根据过滤器"),e("code",[s._v("id")]),s._v("来读取过滤器并返回；如果传入了"),e("code",[s._v("definition")]),s._v("参数，则表示本次操作为注册过滤器，那就直接将其保存在"),e("code",[s._v("this.options['filters']")]),s._v("中。")]),s._v(" "),e("h4",{attrs:{id:"_7-7-vue-component"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-vue-component"}},[s._v("#")]),s._v(" 7.7 Vue.component")]),s._v(" "),e("p",[s._v("其用法如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.component( id, [definition] )\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[e("strong",[s._v("参数：")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("{string} id")])]),s._v(" "),e("li",[e("code",[s._v("{Function | Object} [definition]")])])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("作用：")])]),s._v(" "),e("p",[s._v("注册或获取全局组件。注册还会自动使用给定的"),e("code",[s._v("id")]),s._v("设置组件的名称")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 注册组件，传入一个扩展过的构造器\nVue.component('my-component', Vue.extend({ /* ... */ }))\n\n// 注册组件，传入一个选项对象 (自动调用 Vue.extend)\nVue.component('my-component', { /* ... */ })\n\n// 获取注册的组件 (始终返回构造器)\nvar MyComponent = Vue.component('my-component')\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h4",{attrs:{id:"_7-8-directive、filter、component-小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-directive、filter、component-小结"}},[s._v("#")]),s._v(" 7.8 directive、filter、component 小结")]),s._v(" "),e("p",[s._v("通过对"),e("code",[s._v("Vue.directive")]),s._v("、"),e("code",[s._v("Vue.filter")]),s._v("和"),e("code",[s._v("Vue.component")]),s._v("这三个 API 的分析，细心的你肯定会发现这三个 API 的代码实现非常的相似，是的，这是我们为了便于理解故意拆开的，其实在源码中这三个 API 的实现是写在一起的，")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export const ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n]\n\nVue.options = Object.create(null)\nASSET_TYPES.forEach(type => {\n    Vue.options[type + 's'] = Object.create(null)\n})\n\nASSET_TYPES.forEach(type => {\n    Vue[type] = function (id,definition) {\n        if (!definition) {\n            return this.options[type + 's'][id]\n        } else {\n            if (process.env.NODE_ENV !== 'production' && type === 'component') {\n                validateComponentName(id)\n            }\n            if (type === 'component' && isPlainObject(definition)) {\n                definition.name = definition.name || id\n                definition = this.options._base.extend(definition)\n            }\n            if (type === 'directive' && typeof definition === 'function') {\n                definition = { bind: definition, update: definition }\n            }\n            this.options[type + 's'][id] = definition\n            return definition\n        }\n    }\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br")])]),e("h4",{attrs:{id:"_7-9-vue-use"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-9-vue-use"}},[s._v("#")]),s._v(" 7.9 Vue.use")]),s._v(" "),e("p",[s._v("其用法如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.use( plugin )\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[e("strong",[s._v("参数：")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("{Object | Function} plugin")])])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("作用：")])])])]),s._v(" "),e("p",[s._v("安装 Vue.js 插件。如果插件是一个对象，必须提供"),e("code",[s._v("install")]),s._v("方法。如果插件是一个函数，它会被作为 install 方法。install 方法调用时，会将"),e("code",[s._v("Vue")]),s._v("作为参数传入。")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("原理分析：")])])]),s._v(" "),e("p",[s._v("该 API 的定义位于源码的"),e("code",[s._v("src/core/global-api/use.js")]),s._v("中，代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nVue.use = function (plugin) {\nconst installedPlugins = (this.\\_installedPlugins || (this.\\_installedPlugins = []))\nif (installedPlugins.indexOf(plugin) > -1) {\nreturn this\n}\n\n    // additional parameters\n    const args = toArray(arguments, 1)\n    args.unshift(this)\n    if (typeof plugin.install === 'function') {\n        plugin.install.apply(plugin, args)\n    } else if (typeof plugin === 'function') {\n        plugin.apply(null, args)\n    }\n    installedPlugins.push(plugin)\n    return this\n\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[s._v("在该函数内部，首先定义了一个变量"),e("code",[s._v("installedPlugins")]),s._v("，该变量初始值是一个空数组，用来存储已安装过的插件。首先判断传入的插件是否存在于"),e("code",[s._v("installedPlugins")]),s._v("数组中（即已经被安装过），如果存在的话，则直接返回，防止重复安装。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const installedPlugins = (this._installedPlugins || (this._installedPlugins = []))\nif (installedPlugins.indexOf(plugin) > -1) {\n    return this\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("接下来获取到传入的其余参数，并且使用"),e("code",[s._v("toArray")]),s._v("方法将其转换成数组，同时将 "),e("code",[s._v("Vue")]),s._v(" 插入到该数组的第一个位置，这是因为在后续调用 "),e("code",[s._v("install")]),s._v(" 方法时，"),e("code",[s._v("Vue")]),s._v(" 必须作为第一个参数传入。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const args = toArray(arguments, 1)\nargs.unshift(this)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("首先，判断传入的插件如果是一个提供了"),e("code",[s._v("install")]),s._v("方法的对象，那么就执行该对象中提供的"),e("code",[s._v("install")]),s._v("方法并传入参数完成插件安装。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (typeof plugin.install === 'function') {\n    plugin.install.apply(plugin, args)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("如果传入的插件是一个函数，那么就把这个函数当作"),e("code",[s._v("install")]),s._v("方法执行，同时传入参数完成插件安装。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("else if (typeof plugin === 'function') {\n    plugin.apply(null, args)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("如果传入的插件是一个函数，那么就把这个函数当作"),e("code",[s._v("install")]),s._v("方法执行，同时传入参数完成插件安装。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("else if (typeof plugin === 'function') {\n    plugin.apply(null, args)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("插件安装完成之后，将该插件添加进已安装插件列表中，防止重复安装。如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("installedPlugins.push(plugin)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h4",{attrs:{id:"_7-10-vue-mixin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-vue-mixin"}},[s._v("#")]),s._v(" 7.10 Vue.mixin")]),s._v(" "),e("p",[s._v("其用法如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.mixin( mixin )\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[e("strong",[s._v("参数：")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("{Object} mixin")])])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("作用：")])])])]),s._v(" "),e("p",[s._v("全局注册一个混入，影响注册之后所有创建的每个 Vue 实例。插件作者可以使用混入，向组件注入自定义的行为。")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("原理分析")])])]),s._v(" "),e("p",[s._v("该 API 的定义位于源码的 "),e("code",[s._v("src/core/global-api/mixin.js")]),s._v(" 中，代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Vue.mixin = function (mixin: Object) {\n    this.options = mergeOptions(this.options, mixin)\n    return this\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h3",{attrs:{id:"八、过滤器篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八、过滤器篇"}},[s._v("#")]),s._v(" 八、过滤器篇")]),s._v(" "),e("h4",{attrs:{id:"_8-1-resolvefilter-函数分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-resolvefilter-函数分析"}},[s._v("#")]),s._v(" 8.1 resolveFilter 函数分析")]),s._v(" "),e("p",[e("code",[s._v("resolveFilter")]),s._v("函数的定义位于源码的"),e("code",[s._v("src/core/instance/render-helper.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import { identity, resolveAsset } from 'core/util/index'\n\nexport function resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("可以盾到，"),e("code",[s._v("resolveFilter")]),s._v("函数内部只有一行代码，就是调用"),e("code",[s._v("resolveAsset")]),s._v("函数并获取其返回值，如果返回值不存在，则返回"),e("code",[s._v("identity")]),s._v("，而"),e("code",[s._v("identity")]),s._v("是一个返回同参数一样的值，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**\n * Return same value\n */\nexport const identity = _ => _\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[e("code",[s._v("resolveAsset")]),s._v("函数，该函数的定义位于源码的"),e("code",[s._v("src/core/util/options.js")]),s._v("中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function resolveAsset (options,type,id,warnMissing) {\n  if (typeof id !== 'string') {\n    return\n  }\n  const assets = options[type]\n  // 先从本地注册中查找\n  if (hasOwn(assets, id)) return assets[id]\n  const camelizedId = camelize(id)\n  if (hasOwn(assets, camelizedId)) return assets[camelizedId]\n  const PascalCaseId = capitalize(camelizedId)\n  if (hasOwn(assets, PascalCaseId)) return assets[PascalCaseId]\n  // 再从原型链中查找\n  const res = assets[id] || assets[camelizedId] || assets[PascalCaseId]\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    )\n  }\n  return res\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("调用该函数时传入了 4 个参数，分别是当前实例的"),e("code",[s._v("$options")]),s._v("属性，"),e("code",[s._v("type")]),s._v("为"),e("code",[s._v("filters")]),s._v("，"),e("code",[s._v("id")]),s._v("为当前过滤器的"),e("code",[s._v("id")]),s._v("。")]),s._v(" "),e("h4",{attrs:{id:"_8-2-parsefilters-函数分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-parsefilters-函数分析"}},[s._v("#")]),s._v(" 8.2 parseFilters 函数分析")]),s._v(" "),e("p",[e("code",[s._v("parseFilters")]),s._v("函数的定义位于源码的"),e("code",[s._v("src/complier/parser/filter-parser.js")]),s._v("文件中，其代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export function parseFilters (exp) {\n  let inSingle = false                     // exp是否在 '' 中\n  let inDouble = false                     // exp是否在 \"\" 中\n  let inTemplateString = false             // exp是否在 `` 中\n  let inRegex = false                      // exp是否在 \\\\ 中\n  let curly = 0                            // 在exp中发现一个 { 则curly加1，发现一个 } 则curly减1，直到culy为0 说明 { ... }闭合\n  let square = 0                           // 在exp中发现一个 [ 则curly加1，发现一个 ] 则curly减1，直到culy为0 说明 [ ... ]闭合\n  let paren = 0                            // 在exp中发现一个 ( 则curly加1，发现一个 ) 则curly减1，直到culy为0 说明 ( ... )闭合\n  let lastFilterIndex = 0\n  let c, prev, i, expression, filters\n\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c\n    c = exp.charCodeAt(i)\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) inSingle = false\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) inDouble = false\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) inTemplateString = false\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) inRegex = false\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1\n        expression = exp.slice(0, i).trim()\n      } else {\n        pushFilter()\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        let j = i - 1\n        let p\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j)\n          if (p !== ' ') break\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim()\n  } else if (lastFilterIndex !== 0) {\n    pushFilter()\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim())\n    lastFilterIndex = i + 1\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i])\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp: string, filter: string): string {\n  const i = filter.indexOf('(')\n  if (i < 0) {\n    // _f: resolveFilter\n    return `_f(\"${filter}\")(${exp})`\n  } else {\n    const name = filter.slice(0, i)\n    const args = filter.slice(i + 1)\n    return `_f(\"${name}\")(${exp}${args !== ')' ? ',' + args : args}`\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br"),e("span",{staticClass:"line-number"},[s._v("86")]),e("br"),e("span",{staticClass:"line-number"},[s._v("87")]),e("br"),e("span",{staticClass:"line-number"},[s._v("88")]),e("br"),e("span",{staticClass:"line-number"},[s._v("89")]),e("br"),e("span",{staticClass:"line-number"},[s._v("90")]),e("br"),e("span",{staticClass:"line-number"},[s._v("91")]),e("br"),e("span",{staticClass:"line-number"},[s._v("92")]),e("br"),e("span",{staticClass:"line-number"},[s._v("93")]),e("br"),e("span",{staticClass:"line-number"},[s._v("94")]),e("br")])]),e("p",[s._v("该函数的作用的是将传入的形如"),e("code",[s._v("'message | capitalize'")]),s._v("这样的过滤器字符串转化成"),e("code",[s._v('_f("capitalize")(message)')]),s._v("，接下来我们就来分析一下其内部逻辑。")]),s._v(" "),e("p",[s._v("在该函数内部，首先定义了一些变量，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let inSingle = false\nlet inDouble = false\nlet inTemplateString = false\nlet inRegex = false\nlet curly = 0\nlet square = 0\nlet paren = 0\nlet lastFilterIndex = 0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("ul",[e("li",[s._v("inSingle：标志 exp 是否在'...'中；")]),s._v(" "),e("li",[s._v('inDouble：标志 exp 是否在"..."中；')]),s._v(" "),e("li",[s._v("inTemplateString：标志 exp 是否在`...`中；")]),s._v(" "),e("li",[s._v("inRegex：标志 exp 是否在\\...\\中；")]),s._v(" "),e("li",[s._v("curly = 0：；")])]),s._v(" "),e("h3",{attrs:{id:"九、指令篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#九、指令篇"}},[s._v("#")]),s._v(" 九、指令篇")]),s._v(" "),e("p",[s._v("在"),e("code",[s._v("Vue")]),s._v("中，除了"),e("code",[s._v("Vue")]),s._v("本身为我们提供的一些内置指令之外，"),e("code",[s._v("Vue")]),s._v("还支持用户自定义指令。并且用户有两种定义的方式：一种是使用全局 API——"),e("code",[s._v("Vue.directive")]),s._v("来定义全局指令，这种方式定义的指令会被存放在"),e("code",[s._v("Vue.options['directives']")]),s._v("中；另一种是在组件内的"),e("code",[s._v("directive")]),s._v("选项专为该组件使用的局部指令，这种方式定义的指令会被存放在"),e("code",[s._v("vm.$options['directives']")]),s._v("中。")]),s._v(" "),e("h4",{attrs:{id:"_9-1-何时生效"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-何时生效"}},[s._v("#")]),s._v(" 9.1 何时生效")]),s._v(" "),e("p",[s._v("指令是作为标签属性写在模板中的 HTML 标签上的，那么又回到那句老话了，既然是写在模板中的，那它必然会经过模板编译，编译之后会产生虚拟 DOM，在虚拟 DOM 渲染更新时，除了更新节点的内容之外，节点上的一些指令、事件等内容也需要更新。另外，我们还知道，虚拟 DOM 节点的更新不只是更新一个已有的节点，也有可能是创建一个新的节点，还有可能是删除一个节点等等，这些都叫做虚拟 DOM 节点的更新。")]),s._v(" "),e("p",[s._v("在虚拟"),e("code",[s._v("DOM")]),s._v("渲染更新的时候，它在执行相关操作的同时，还会在每个阶段触发相应的钩子函数，我们只需监听不同的钩子函数，就可以在虚拟"),e("code",[s._v("DOM")]),s._v("渲染更新的不同阶段做一些额外的事情。下表给出了虚拟"),e("code",[s._v("DOM")]),s._v(" 在渲染更新的不同阶段所触发的不同的钩子函数及其触发时机：")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("钩子函数名称")]),s._v(" "),e("th",[s._v("触发时机")]),s._v(" "),e("th",[s._v("回调参数")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("init")]),s._v(" "),e("td",[s._v("已创建 VNode，在 patch 期间发现新的虚拟节点时被触发")]),s._v(" "),e("td",[s._v("VNode")])]),s._v(" "),e("tr",[e("td",[s._v("create")]),s._v(" "),e("td",[s._v("已基于 VNode 创建了 DOM 元素")]),s._v(" "),e("td",[s._v("emptyNode 和 VNode")])]),s._v(" "),e("tr",[e("td",[s._v("activate")]),s._v(" "),e("td",[s._v("keep-alive 组件被创建")]),s._v(" "),e("td",[s._v("emptyNode 和 innerNode")])]),s._v(" "),e("tr",[e("td",[s._v("insert")]),s._v(" "),e("td",[s._v("VNode 对应的")]),s._v(" "),e("td",[s._v("VNode")])]),s._v(" "),e("tr",[e("td",[s._v("prepatch")]),s._v(" "),e("td",[s._v("已创建 VNode，在 patch 期间发现新的虚拟节点时被触发")]),s._v(" "),e("td",[s._v("VNode")])]),s._v(" "),e("tr",[e("td",[s._v("update")]),s._v(" "),e("td",[s._v("已创建 VNode，在 patch 期间发现新的虚拟节点时被触发")]),s._v(" "),e("td",[s._v("VNode")])]),s._v(" "),e("tr",[e("td",[s._v("postpatch")]),s._v(" "),e("td",[s._v("已创建 VNode，在 patch 期间发现新的虚拟节点时被触发")]),s._v(" "),e("td",[s._v("VNode")])]),s._v(" "),e("tr",[e("td",[s._v("destory")]),s._v(" "),e("td",[s._v("已创建 VNode，在 patch 期间发现新的虚拟节点时被触发")]),s._v(" "),e("td",[s._v("VNode")])]),s._v(" "),e("tr",[e("td",[s._v("remove")]),s._v(" "),e("td",[s._v("已创建 VNode，在 patch 期间发现新的虚拟节点时被触发")]),s._v(" "),e("td",[s._v("VNode")])])])]),s._v(" "),e("h4",{attrs:{id:"_9-2-指令钩子函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-指令钩子函数"}},[s._v("#")]),s._v(" 9.2 指令钩子函数")]),s._v(" "),e("p",[e("code",[s._v("Vue")]),s._v("对于自定义指令定义对象提供了几个钩子函数，这几个钩子函数分别对应着指令的几种状态，一个指令从第一次被绑定到元素上到最终与被绑定的元素解绑，它会经过以下几种状态：")]),s._v(" "),e("ul",[e("li",[s._v("bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。")]),s._v(" "),e("li",[s._v("inserted：被绑定元素插入父节点时调用（仅保证父节点存在，但不一定已被插入文档中）。")]),s._v(" "),e("li",[s._v("update：所在组件的 VNode 更新时调用，"),e("strong",[s._v("但是可能发生在其子 VNode 更新之前")])]),s._v(" "),e("li",[s._v("componentUpdated：指令所在组件的 VNode"),e("strong",[s._v("及其子 VNode")]),s._v("全部更新后调用。")]),s._v(" "),e("li",[s._v("unbind：只调用一次，指令与元素解绑时调用。")])]),s._v(" "),e("h4",{attrs:{id:"_9-3-如何生效"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-如何生效"}},[s._v("#")]),s._v(" 9.3 如何生效")]),s._v(" "),e("p",[s._v("当虚拟"),e("code",[s._v("DOM")]),s._v("渲染更新的时候会触发"),e("code",[s._v("create")]),s._v("、"),e("code",[s._v("update")]),s._v("、"),e("code",[s._v("destory")]),s._v("这三个钩子函数，从而就会执行"),e("code",[s._v("updateDirectives")]),s._v("函数来处理指令的想着逻辑，执行指令函数，让指令生效。")]),s._v(" "),e("p",[e("code",[s._v("updateDirectives")]),s._v("函数的定义位于源码的"),e("code",[s._v("src/core/vdom/modules/directives.js")]),s._v("文件中，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function updateDirectives (oldVnode: VNodeWithData, vnode: VNodeWithData) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode)\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[e("code",[s._v("_update")]),s._v("方法定义如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function _update (oldVnode, vnode) {\n  const isCreate = oldVnode === emptyNode\n  const isDestroy = vnode === emptyNode\n  const oldDirs = normalizeDirectives(oldVnode.data.directives, oldVnode.context)\n  const newDirs = normalizeDirectives(vnode.data.directives, vnode.context)\n\n  const dirsWithInsert = []\n  const dirsWithPostpatch = []\n\n  let key, oldDir, dir\n  for (key in newDirs) {\n    oldDir = oldDirs[key]\n    dir = newDirs[key]\n    if (!oldDir) {\n      // new directive, bind\n      callHook(dir, 'bind', vnode, oldVnode)\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir)\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value\n      dir.oldArg = oldDir.arg\n      callHook(dir, 'update', vnode, oldVnode)\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir)\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    const callInsert = () => {\n      for (let i = 0; i < dirsWithInsert.length; i++) {\n        callHook(dirsWithInsert[i], 'inserted', vnode, oldVnode)\n      }\n    }\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert)\n    } else {\n      callInsert()\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', () => {\n      for (let i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode)\n      }\n    })\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy)\n      }\n    }\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br")])]),e("p",[s._v("可以看到，该方法内首先定义了一些变量，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const isCreate = oldVnode === emptyNode\nconst isDestroy = vnode === emptyNode\nconst oldDirs = normalizeDirectives(oldVnode.data.directives, oldVnode.context)\nconst newDirs = normalizeDirectives(vnode.data.directives, vnode.context)\n\nconst dirsWithInsert = []\nconst dirsWithPostpatch = []\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("ul",[e("li",[s._v("isCreate：判断当前节点"),e("code",[s._v("vnode")]),s._v("对应的旧节点"),e("code",[s._v("oldVnode")]),s._v("是不是一个空节点，如果是的话，表明当前节点是一个新创建的节点。")]),s._v(" "),e("li",[s._v("isDestroy：判断当前节点"),e("code",[s._v("vnode")]),s._v("是不是一个空节点，如果是的话，表明当前节点对应的旧节点将要被销毁。")]),s._v(" "),e("li",[s._v("oldDirs：旧的指令集合，即"),e("code",[s._v("oldVnode")]),s._v("中保存的指令。")]),s._v(" "),e("li",[s._v("newDirs：新的指令集合，即"),e("code",[s._v("vnode")]),s._v("中保存的指令。")]),s._v(" "),e("li",[s._v("dirsWithInsert：保存需要触发"),e("code",[s._v("inserted")]),s._v("指令钩子函数的指令列表。")]),s._v(" "),e("li",[s._v("dirsWidthPostpatch：保存需要触发"),e("code",[s._v("componentUpdated")]),s._v("指令钩子函数的指令列表。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h3",{attrs:{id:"十、总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十、总结"}},[s._v("#")]),s._v(" 十、总结")]),s._v(" "),e("p",[e("img",{attrs:{src:"vue-code.png",alt:"images"}})]),s._v(" "),e("h3",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/muwoo/blogs",target:"_blank",rel:"noopener noreferrer"}},[s._v("vue 源码分析"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"http://hcysun.me/vue-design/art/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue 技术内幕"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://ustbhuangyi.github.io/vue-analysis/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue.js 技术揭秘"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/answershuto/learnVue",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue.js 源码解析"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/dirkhe1051931999/hjBlog/tree/master/blog-vue-sourcecode-study",target:"_blank",rel:"noopener noreferrer"}},[s._v("你想要的 vue 源码分析"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.im/post/5ce5565d6fb9a07ed2244513",target:"_blank",rel:"noopener noreferrer"}},[s._v("学习 Vue 源码的必要知识储备"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://nlrx-wjc.github.io/Learn-Vue-Source-Code/start/",target:"_blank",rel:"noopener noreferrer"}},[s._v("逐行剖析 Vue.js 源码"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"http://hcysun.me/vue-design/zh/",target:"_blank",rel:"noopener noreferrer"}},[s._v("渲染器"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://www.cnblogs.com/tugenhua0707/category/1577630.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("深入 Vue 技术栈及源码系列"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"http://www.zhufengpeixun.cn/train/vue-info/source.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue 原理剖析"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/lihongxun945/myblog/issues/22",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue2.x 源码解析系列一：我的源码阅读心得"),e("OutboundLink")],1)]),s._v(" "),e("li",[s._v("《深入浅出 Vue.js》")])]),s._v(" "),e("h2",{attrs:{id:"联系作者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#联系作者"}},[s._v("#")]),s._v(" 联系作者")]),s._v(" "),e("div",{attrs:{align:"center"}},[e("p",[s._v("\n        平凡世界，贵在坚持。\n    ")]),s._v(" "),e("img",{attrs:{src:s.$withBase("/about/contact.png")}})]),s._v("\n```\n````\n")])}),[],!1,null,null,null);n.default=t.exports}}]);