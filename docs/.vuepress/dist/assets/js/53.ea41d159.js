(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{271:function(n,s,a){"use strict";a.r(s);var e=a(13),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"平衡树-avl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平衡树-avl"}},[n._v("#")]),n._v(" 平衡树(AVL)")]),n._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),a("p",[n._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),n._v(" "),a("h2",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[n._v("#")]),n._v(" 内容")]),n._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91"}},[n._v("为什么要有平衡二叉树")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8C%E3%80%81%E5%AE%9A%E4%B9%89"}},[n._v("定义")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E5%B9%B3%E8%A1%A1%E5%9B%A0%E5%AD%90"}},[n._v("平衡因子")])])]),n._v(" "),a("h3",{attrs:{id:"一、为什么要有平衡二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、为什么要有平衡二叉树"}},[n._v("#")]),n._v(" 一、为什么要有平衡二叉树")]),n._v(" "),a("p",[n._v("二叉搜索树一定程度上可以提高搜索效率，但是当原序列有序时，例如序列"),a("code",[n._v("A={1,2,3,4,5,6}")]),n._v(",构造二叉搜索树如图。依据此序列构造的二叉搜索树为右斜树，同时二叉树退化成单链表，搜索效率降低为 O(n)。")]),n._v(" "),a("p",[a("img",{attrs:{src:"tree12.jpg",alt:"images"}})]),n._v(" "),a("p",[n._v("在此二叉搜索树中查找元素 6 需要查找 6 次。")]),n._v(" "),a("p",[n._v("二叉搜索树的查找效率取决于树的高度，因此保持树的高度最小，即可保证树的查找效率。同样的序列 A，将其改为下图的方式存储，查找元素 6 时只需比较 3 次，查找效率提升一倍。")]),n._v(" "),a("p",[a("img",{attrs:{src:"tree13.jpg",alt:"images"}})]),n._v(" "),a("p",[n._v("可以看出当节点数目一定，保持树的左右两端保持平衡，树的查找效率最高。")]),n._v(" "),a("p",[a("strong",[n._v("这种左右子树的高度相差不超过 1 的树为平衡二叉树。")])]),n._v(" "),a("h3",{attrs:{id:"二、定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、定义"}},[n._v("#")]),n._v(" 二、定义")]),n._v(" "),a("p",[a("strong",[n._v("平衡二叉查找树：")]),n._v(" 是基于二分法的策略提高数据的查找速度的二叉树的数据结构。由前苏联的数学家 Adelse-Velskil 和 Landis 在 1962 年提出的高度平衡的二叉树，根据科学家的英文名也称为 AVL 树。它具有如下几个性质：")]),n._v(" "),a("ul",[a("li",[n._v("可以是空树。")]),n._v(" "),a("li",[n._v("假如不是空树，任何一个节点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1。")])]),n._v(" "),a("h3",{attrs:{id:"三、平衡因子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、平衡因子"}},[n._v("#")]),n._v(" 三、平衡因子")]),n._v(" "),a("p",[n._v("定义：某节点的左子树与右子树的高度(深度)差即为该节点的平衡因子，平衡二叉树中不存在平衡因子大于 1 的节点。在一棵平衡二叉树中，节点的平衡因子只能取 0、1 或者-1，分别对应着左右子树等高，左子树比较高，右子树比较高。")]),n._v(" "),a("h3",{attrs:{id:"四、avl-树插入时的失衡与调整"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、avl-树插入时的失衡与调整"}},[n._v("#")]),n._v(" 四、AVL 树插入时的失衡与调整")]),n._v(" "),a("p",[n._v("在对 AVL 树添加或移除节点后，我们要计算节点的高度并验证树是否需要进行平衡。向 AVL 树插入节点时，可以执行单旋转或双旋转两种平衡操作，分别对应四种场景。")]),n._v(" "),a("ul",[a("li",[a("strong",[n._v("左-左（LL）：")]),n._v(" 向右的单旋转")]),n._v(" "),a("li",[a("strong",[n._v("右-右（RR）：")]),n._v(" 向左的单旋转")]),n._v(" "),a("li",[a("strong",[n._v("左-右（LR）：")]),n._v(" 向右的双旋转（先 LL 旋转，再 RR 旋转）")]),n._v(" "),a("li",[a("strong",[n._v("右-左（RL）：")]),n._v(" 向左的双旋转（先 RR 旋转，再 LL 旋转）")])]),n._v(" "),a("h4",{attrs:{id:"_4-1-左-左：向右的单旋转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-左-左：向右的单旋转"}},[n._v("#")]),n._v(" 4.1 左-左：向右的单旋转")]),n._v(" "),a("p",[n._v("这种情况出现于节点的左侧子节点的高度大于右侧子节点的高度时，并且左侧子节点也是平衡或左侧较重的。")]),n._v(" "),a("p",[n._v("执行的操作过程：")]),n._v(" "),a("ul",[a("li",[n._v("与平衡操作想着的节点有三个（X、Y、Z），将节点 X 置于节点 Y（平衡因子为+2）所在的位置")])]),n._v(" "),a("p",[n._v("相关代码：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("rotationLL(node){\n    const tmp = node.left;\n    node.left = tmp.right\n    tmp.right = node;\n    return tmp;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("h4",{attrs:{id:"_4-2-右-右（rr）-向左的单旋转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-右-右（rr）-向左的单旋转"}},[n._v("#")]),n._v(" 4.2 右-右（RR）:向左的单旋转")]),n._v(" "),a("p",[n._v("右-右的情况和左左的情况相反。它出现于右侧子节点的高度大于左侧子节点的高度，并且右侧子节点也是平衡或右侧较重的。")]),n._v(" "),a("p",[n._v("操作步骤：")]),n._v(" "),a("ul",[a("li",[n._v("与平衡操作相关的节点有三个（X、Y、Z），将节点 X 置于节点 Y（平衡因子为-2）所在的位置；")]),n._v(" "),a("li",[n._v("节点 X 的右子树操持不变；")]),n._v(" "),a("li",[n._v("将节点 Y 的右子节点置为节点 X 的左节点 Z；")]),n._v(" "),a("li",[n._v("将节点 X 的左子节点置为节点 Y；")])]),n._v(" "),a("p",[n._v("相关代码：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("rotationRR(node){\n    const tmp = node.right;\n    node.right = tmp.left;\n    tmp.left = node;\n    return tmp;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("h4",{attrs:{id:"_4-3-左-右（lr）：向右的双旋转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-左-右（lr）：向右的双旋转"}},[n._v("#")]),n._v(" 4.3 左-右（LR）：向右的双旋转")]),n._v(" "),a("p",[n._v("这种情况出现于左侧子节点的高度大于右侧子节点的高度，并且左侧子节点右侧较重。")]),n._v(" "),a("p",[n._v("执行的操作：")]),n._v(" "),a("ul",[a("li",[n._v("将节点 X 置于节点 Y（平衡因子为-2）所在的位置；")]),n._v(" "),a("li",[n._v("将节点 Z 的左子节点置为节点 X 的右子节点；")]),n._v(" "),a("li",[n._v("将节点 Y 的右子节点置为节点 X 的左子节点；")]),n._v(" "),a("li",[n._v("将节点 X 的右子节点置为节点 Y；")]),n._v(" "),a("li",[n._v("将节点 X 的左子节点置为节点 Z；")])]),n._v(" "),a("p",[n._v("相关代码：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("rotationLR(node){\n    node.left = this.rotationRR(node.left);\n    return this.rotationLL(node);\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("h4",{attrs:{id:"_4-4-右-左（rl）：向左的双旋转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-右-左（rl）：向左的双旋转"}},[n._v("#")]),n._v(" 4.4 右-左（RL）：向左的双旋转")]),n._v(" "),a("p",[n._v("右-左的情况和左-右的情况相反。这种情况出现于右侧子节点的高度大于左侧子节点的高度，并且右侧子节点左侧较重。")]),n._v(" "),a("p",[n._v("执行的操作：")]),n._v(" "),a("ul",[a("li",[n._v("将节点 X 置于节点 Y（平衡因子为+2）所在的位置；")]),n._v(" "),a("li",[n._v("将节点 Y 的左子节点置为节点 X 的右子节点；")]),n._v(" "),a("li",[n._v("将节点 Z 的右子节点置为节点 X 的左子节点；")]),n._v(" "),a("li",[n._v("将节点 X 的左子节点置为节点 Y；")]),n._v(" "),a("li",[n._v("将节点 X 的右子节点置为节点 Z；")])]),n._v(" "),a("p",[n._v("相关代码：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("rotationRL(node){\n    node.right = this.rotationLL(node.right);\n    return this.rotationRR(node);\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("h3",{attrs:{id:"五、avl-树的四种插入节点方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、avl-树的四种插入节点方式"}},[n._v("#")]),n._v(" 五、AVL 树的四种插入节点方式")]),n._v(" "),a("p",[n._v("假设一颗 AVL 树的某个节点为 A，有四种操作会使 A 的左右子树高度差大于 1，从而破坏了原有 AVL 树的平衡性。平衡二叉树插入节点的情况分为以下四种：")]),n._v(" "),a("table",[a("thead",[a("tr",[a("th",[n._v("插入方式")]),n._v(" "),a("th",[n._v("描述")]),n._v(" "),a("th",[n._v("旋转方式")])])]),n._v(" "),a("tbody",[a("tr",[a("td",[n._v("LL")]),n._v(" "),a("td",[n._v("在 A 的"),a("strong",[n._v("左子树")]),n._v("根节点的"),a("strong",[n._v("左子树")]),n._v("上插入节点而破坏平衡")]),n._v(" "),a("td",[n._v("右旋转")])]),n._v(" "),a("tr",[a("td",[n._v("RR")]),n._v(" "),a("td",[n._v("在 A 的"),a("strong",[n._v("右子树")]),n._v("根节点的"),a("strong",[n._v("右子树")]),n._v("上插入节点而破坏平衡")]),n._v(" "),a("td",[n._v("左旋转")])]),n._v(" "),a("tr",[a("td",[n._v("LR")]),n._v(" "),a("td",[n._v("在 A 的"),a("strong",[n._v("左子树")]),n._v("根节点的"),a("strong",[n._v("右子树")]),n._v("上插入节点而破坏平衡")]),n._v(" "),a("td",[n._v("先左旋后右旋转")])]),n._v(" "),a("tr",[a("td",[n._v("RL")]),n._v(" "),a("td",[n._v("在 A 的"),a("strong",[n._v("右子树")]),n._v("根节点的"),a("strong",[n._v("左子树")]),n._v("上插入节点而破坏平衡")]),n._v(" "),a("td",[n._v("先右旋后左旋转")])])])]),n._v(" "),a("p",[a("strong",[n._v("插入相关代码")])]),n._v(" "),a("p",[n._v("在向 AVL 树插入节点后，我们需要检查树是否需要进行平衡，因此要使用递归计算以每个插入的节点为根的节点的平衡因子，然后对每种情况应用正确的旋转。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("insert(key){\n    this.root = this.insertNode(this.root,key);\n}\ninsertNode(node,key){\n    // 像在BST树中一样插入节点\n    if(node == null){\n        return new Node(key);\n    }else if (this.compareFn(key,node.key)===Compare.LESS_THAN){\n        node.left = this.insertNode(node.left,key);\n    }else if(this.compareFn(key,node.key)===Compare.BIGGER_THAN){\n        node.right = this.insertNode(node.right,key);\n    }else{\n        return node;        // 重复的键\n    }\n    // 如果需要，将树进行平衡操作\n    const balanceFactor = this.getBalanceFactor(node);\n    if(balanceFactor === BalanceFactor.UNBALANCED_LEFT){\n        if(this.compareFn(key,node.left.key) === Compare.LESS_THAN){\n            node = this.rotationLL(node);\n        }else{\n            return this.rottionLR(node);\n        }\n    }\n    if(balanceFactor === BalanceFactor.UNBALANCED_RIGHT){\n        if(this.compareFn(key,node.right.key)===Compare.BIGGER_THAN){\n            node = this.rotationRR(node);\n        }else{\n            return this.rotationRL(node);\n        }\n    }\n    return node;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br")])]),a("p",[n._v("如果在向左侧子树插入节点后树不平衡了，我们需要比较是否插入的键小于左侧子节点的键。如果是，我们要进行 LL 旋转。否则，要进行 LR 旋转。")]),n._v(" "),a("p",[n._v("如果在向右侧子树插入节点后树不平衡了，我们需要比较是否插入的键小于右侧子节点的键。如果是，我们要进行 RR 旋转。否则，要进行 RL 旋转。")]),n._v(" "),a("p",[a("strong",[n._v("删除相关代码")])]),n._v(" "),a("p",[n._v("除了移除节点外，我们还要难移除后树是否还是平衡的，如果不是，就要进行必要的旋转操作。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("removeNode(node,key){\n    node = super.removeNode(node,key);\n    if(node == null){\n        return node;    // null，不需要进行平衡\n    }\n    //  检测树是否平衡\n    const balanceFactor = this.getBalanceFactor(node);\n    if(balanceFactor === BalanceFactor.UNBALANCED_LEFT){\n        const balanceFactorLeft = this.getBalanceFactor(node.left);\n        if(balanceFactorLeft === BalanceFactor.BALANCED || balanceFactorLeft === BalanceFactor.SLIGHTLY_UNBALANCED_LEFT){\n            return this.rotationLL(node);\n        }\n        if(balanceFactorLeft === BalanceFactor.SLIGHTLY_UNBALANCED_RIGHT){\n            return this.rotationLR(node.left);\n        }\n    }\n    if(balanceFactor === BalanceFactor.UNBALANCED_RIGTH){\n        const balanceFactorRight = this.getBalanceFactor(node.right);\n        if(balanceFactorRight === BalanceFactor.BALANCED || balanceFactorRight === BalanceFactor.SLIGHTLY_UNBALANCED_RIGHT){\n            return this.rotationRR(node);\n        }\n        if(balanceFactorRight === BalanceFactor.SLIGHTLY_UNBALANCED_LEFT){\n            return this.rotationRL(node.right);\n        }\n    }\n    return node;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br")])]),a("p",[n._v("如果在从左侧子树移除节点后树不平衡了，我们要计算左侧子树的平衡因子。如果左侧子树向左不平衡，要进行 LL 旋转；如果左侧子树向右不平衡，要进行 LR 旋转。")]),n._v(" "),a("p",[n._v("最后一种情况是，如果在从右侧子树移除节点后树不平衡了，我们要计算右侧子树的平衡因子。如果右侧子树向右不平衡，要进行 RR 旋转；如果右侧子树向左不平衡，要进行 LR 旋转。")]),n._v(" "),a("h3",{attrs:{id:"六、红黑树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、红黑树"}},[n._v("#")]),n._v(" 六、红黑树")]),n._v(" "),a("p",[n._v("红黑树是一种常见的自平衡二叉查找树，常用于关联数组、字典，在各种语言的底层实现中被广泛应用，Java 的 TreeMap 和 TreeSet 就是基于红黑树实现的。")]),n._v(" "),a("p",[n._v("在红黑树中，每个节点都遵循以下规则：")]),n._v(" "),a("ul",[a("li",[n._v("顾名思义，每个节点不是红的就是黑的；")]),n._v(" "),a("li",[n._v("树的根节点是黑的；")]),n._v(" "),a("li",[n._v("所有叶节点都是黑的（用 NULL 引用表示的节点）；")]),n._v(" "),a("li",[n._v("如果一个节点是红色的，那么它的两个子节点都是黑的；")]),n._v(" "),a("li",[n._v("不能有两个相邻的红节点，一个红节点不能有红的父节点或子节点；")]),n._v(" "),a("li",[n._v("从给定的节点到它的后代节点的所有路径包含相同数量的黑色节点")])]),n._v(" "),a("p",[n._v("相关代码：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const Compare = {\n    LESS_THAN: -1,\n    BIGGER_THAN: 1,\n    EQUALS: 0\n}\n\nfunction defaultCompare(a, b) {\n    if (a === b) {\n        return Compare.EQUALS\n    }\n    return a < b ? Compare.LESS_THAN : Compare.BIGGER_THAN\n}\n\nconst Colors = {\n    RED: 0,\n    BLACK: 1\n}\n\nclass Node {\n    constructor(key) {\n        this.key = key\n        this.left = undefined\n        this.right = undefined\n    }\n    toString() {\n        return `${this.key}`\n    }\n}\n\nclass RedBlackNode extends Node {\n    constructor(key) {\n        super(key)\n        this.left = undefined\n        this.right = undefined\n        this.parent = undefined\n        this.color = Colors.RED\n    }\n    isRed() {\n        return this.color === Colors.RED\n    }\n    flipColor() {\n        if (this.color === Colors.RED) {\n            this.color = Colors.BLACK\n        } else {\n            this.color = Colors.RED\n        }\n    }\n}\n\nimport BinarySearchTree from './birary-search-tree-es6'\n\nclass RedBlackTree extends BinarySearchTree {\n    constructor(compareFn = defaultCompare) {\n        super(compareFn)\n        this.root = null\n    }\n    rotationLL(node) {\n        const tmp = node.left\n        node.left = tmp.right\n        if (tmp.right && tmp.right.key) {\n            tmp.right.parent = node\n        }\n        tmp.parent = node.parent\n        if (!node.parent) {\n            this.root = tmp\n        } else {\n            if (node === node.parent.left) {\n                node.parent.left = tmp;\n            } else {\n                node.parent.right = tmp;\n            }\n        }\n        tmp.right = node\n        node.parent = tmp\n    }\n    /**\n     * Right right case: rotate left\n     *\n     *     a                              b\n     *    / \\                            / \\\n     *   c   b   -> rotationRR(a) ->    a   e\n     *      / \\                        / \\\n     *     d   e                      c   d\n     *\n     */\n    rotationRR(node) {\n        const tmp = node.right\n        node.right = tmp.left\n        if (tmp.left && tmp.left.key) {\n            tmp.left.parent = node\n        }\n        tmp.parent = node.parent\n        if (!node.parent) {\n            this.root = tmp\n        } else {\n            if (node === node.parent.left) {\n                node.parent.left = tmp\n            } else {\n                node.parent.right = tmp\n            }\n        }\n        tmp.left = node\n        node.parent = tmp\n    }\n    insert(key) {\n        if (this.root == null) {\n            this.root = new RedBlackNode(key)\n            this.root.color = Colors.BLACK\n        } else {\n            const newNode = this.insertNode(this.root, key)\n            this.fixTreeProperties(newNode)\n        }\n    }\n    insertNode(node, key) {\n        if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\n            if (node.left == null) {\n                node.left = new RedBlackNode(key)\n                node.left.parent = node\n                return node.left\n            } else {\n                return this.insertNode(node.left, key)\n            }\n        } else if (node.right == null) {\n            node.right = new RedBlackNode(key)\n            node.right.parent = node\n            return node.right\n        } else {\n            return this.insertNode(node.right, key)\n        }\n    }\n    fixTreeProperties(node) {\n        while (node && node.parent && node.parent.color === Colors.RED && node.color !== Colors.BLACK) {\n            let parent = node.parent\n            const grandParent = parent.parent\n\n            // case A\n            if (grandParent && grandParent.left === parent) {\n\n                const uncle = grandParent.right\n\n                if (uncle && uncle.color === Colors.RED) {\n                    grandParent.color = Colors.RED\n                    parent.color = Colors.BLACK\n                    uncle.color = Colors.BLACK\n                    node = grandParent\n                } else {\n                    if (node === parent.right) {\n                        this.rotationRR(parent)\n                        node = parent\n                        parent = node.parent\n                    }\n\n                    this.rotationLL(grandParent)\n                    parent.color = Colors.BLACK\n                    grandParent.color = Colors.RED\n                    node = parent\n                }\n            } else {\n\n                const uncle = grandParent.left\n\n                if (uncle && uncle.color === Colors.RED) {\n                    grandParent.color = Colors.RED\n                    parent.color = Colors.BLACK\n                    uncle.color = Colors.BLACK\n                    node = grandParent\n                } else {\n                    if (node === parent.left) {\n                        this.rotationLL(parent)\n                        node = parent\n                        parent = node.parent\n                    }\n                }\n\n                this.rotationRR(grandParent)\n\n                parent.color = Colors.BLACK\n                grandParent.color = Colors.RED\n                node = parent\n            }\n        }\n        this.root.color = Colors.BLACK\n    }\n    getRoot() {\n        return this.root\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br"),a("span",{staticClass:"line-number"},[n._v("100")]),a("br"),a("span",{staticClass:"line-number"},[n._v("101")]),a("br"),a("span",{staticClass:"line-number"},[n._v("102")]),a("br"),a("span",{staticClass:"line-number"},[n._v("103")]),a("br"),a("span",{staticClass:"line-number"},[n._v("104")]),a("br"),a("span",{staticClass:"line-number"},[n._v("105")]),a("br"),a("span",{staticClass:"line-number"},[n._v("106")]),a("br"),a("span",{staticClass:"line-number"},[n._v("107")]),a("br"),a("span",{staticClass:"line-number"},[n._v("108")]),a("br"),a("span",{staticClass:"line-number"},[n._v("109")]),a("br"),a("span",{staticClass:"line-number"},[n._v("110")]),a("br"),a("span",{staticClass:"line-number"},[n._v("111")]),a("br"),a("span",{staticClass:"line-number"},[n._v("112")]),a("br"),a("span",{staticClass:"line-number"},[n._v("113")]),a("br"),a("span",{staticClass:"line-number"},[n._v("114")]),a("br"),a("span",{staticClass:"line-number"},[n._v("115")]),a("br"),a("span",{staticClass:"line-number"},[n._v("116")]),a("br"),a("span",{staticClass:"line-number"},[n._v("117")]),a("br"),a("span",{staticClass:"line-number"},[n._v("118")]),a("br"),a("span",{staticClass:"line-number"},[n._v("119")]),a("br"),a("span",{staticClass:"line-number"},[n._v("120")]),a("br"),a("span",{staticClass:"line-number"},[n._v("121")]),a("br"),a("span",{staticClass:"line-number"},[n._v("122")]),a("br"),a("span",{staticClass:"line-number"},[n._v("123")]),a("br"),a("span",{staticClass:"line-number"},[n._v("124")]),a("br"),a("span",{staticClass:"line-number"},[n._v("125")]),a("br"),a("span",{staticClass:"line-number"},[n._v("126")]),a("br"),a("span",{staticClass:"line-number"},[n._v("127")]),a("br"),a("span",{staticClass:"line-number"},[n._v("128")]),a("br"),a("span",{staticClass:"line-number"},[n._v("129")]),a("br"),a("span",{staticClass:"line-number"},[n._v("130")]),a("br"),a("span",{staticClass:"line-number"},[n._v("131")]),a("br"),a("span",{staticClass:"line-number"},[n._v("132")]),a("br"),a("span",{staticClass:"line-number"},[n._v("133")]),a("br"),a("span",{staticClass:"line-number"},[n._v("134")]),a("br"),a("span",{staticClass:"line-number"},[n._v("135")]),a("br"),a("span",{staticClass:"line-number"},[n._v("136")]),a("br"),a("span",{staticClass:"line-number"},[n._v("137")]),a("br"),a("span",{staticClass:"line-number"},[n._v("138")]),a("br"),a("span",{staticClass:"line-number"},[n._v("139")]),a("br"),a("span",{staticClass:"line-number"},[n._v("140")]),a("br"),a("span",{staticClass:"line-number"},[n._v("141")]),a("br"),a("span",{staticClass:"line-number"},[n._v("142")]),a("br"),a("span",{staticClass:"line-number"},[n._v("143")]),a("br"),a("span",{staticClass:"line-number"},[n._v("144")]),a("br"),a("span",{staticClass:"line-number"},[n._v("145")]),a("br"),a("span",{staticClass:"line-number"},[n._v("146")]),a("br"),a("span",{staticClass:"line-number"},[n._v("147")]),a("br"),a("span",{staticClass:"line-number"},[n._v("148")]),a("br"),a("span",{staticClass:"line-number"},[n._v("149")]),a("br"),a("span",{staticClass:"line-number"},[n._v("150")]),a("br"),a("span",{staticClass:"line-number"},[n._v("151")]),a("br"),a("span",{staticClass:"line-number"},[n._v("152")]),a("br"),a("span",{staticClass:"line-number"},[n._v("153")]),a("br"),a("span",{staticClass:"line-number"},[n._v("154")]),a("br"),a("span",{staticClass:"line-number"},[n._v("155")]),a("br"),a("span",{staticClass:"line-number"},[n._v("156")]),a("br"),a("span",{staticClass:"line-number"},[n._v("157")]),a("br"),a("span",{staticClass:"line-number"},[n._v("158")]),a("br"),a("span",{staticClass:"line-number"},[n._v("159")]),a("br"),a("span",{staticClass:"line-number"},[n._v("160")]),a("br"),a("span",{staticClass:"line-number"},[n._v("161")]),a("br"),a("span",{staticClass:"line-number"},[n._v("162")]),a("br"),a("span",{staticClass:"line-number"},[n._v("163")]),a("br"),a("span",{staticClass:"line-number"},[n._v("164")]),a("br"),a("span",{staticClass:"line-number"},[n._v("165")]),a("br"),a("span",{staticClass:"line-number"},[n._v("166")]),a("br"),a("span",{staticClass:"line-number"},[n._v("167")]),a("br"),a("span",{staticClass:"line-number"},[n._v("168")]),a("br"),a("span",{staticClass:"line-number"},[n._v("169")]),a("br"),a("span",{staticClass:"line-number"},[n._v("170")]),a("br"),a("span",{staticClass:"line-number"},[n._v("171")]),a("br"),a("span",{staticClass:"line-number"},[n._v("172")]),a("br"),a("span",{staticClass:"line-number"},[n._v("173")]),a("br"),a("span",{staticClass:"line-number"},[n._v("174")]),a("br"),a("span",{staticClass:"line-number"},[n._v("175")]),a("br"),a("span",{staticClass:"line-number"},[n._v("176")]),a("br"),a("span",{staticClass:"line-number"},[n._v("177")]),a("br"),a("span",{staticClass:"line-number"},[n._v("178")]),a("br"),a("span",{staticClass:"line-number"},[n._v("179")]),a("br"),a("span",{staticClass:"line-number"},[n._v("180")]),a("br"),a("span",{staticClass:"line-number"},[n._v("181")]),a("br"),a("span",{staticClass:"line-number"},[n._v("182")]),a("br"),a("span",{staticClass:"line-number"},[n._v("183")]),a("br"),a("span",{staticClass:"line-number"},[n._v("184")]),a("br"),a("span",{staticClass:"line-number"},[n._v("185")]),a("br"),a("span",{staticClass:"line-number"},[n._v("186")]),a("br"),a("span",{staticClass:"line-number"},[n._v("187")]),a("br")])]),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[n._v("#")]),n._v(" 参考资料")]),n._v(" "),a("ul",[a("li",[n._v("《学习 JavaScript 数据结构与算法》")]),n._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/zav3hOoj6eszlOM7YfgYeA",target:"_blank",rel:"noopener noreferrer"}},[n._v("什么是平衡二叉树（AVL）"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/Un1LuUo4LDQC8Sl-mfg4og",target:"_blank",rel:"noopener noreferrer"}},[n._v("我画了 20 张图，给女朋友讲清楚红黑树"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5dff59cb6fb9a0163c53ce1d",target:"_blank",rel:"noopener noreferrer"}},[n._v("通俗易懂的红黑树图解(上)"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5e8b28d551882573c66cfbc4",target:"_blank",rel:"noopener noreferrer"}},[n._v("通俗易懂的红黑树图解(下)"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/dSGIHvgth7IqEZxG11rKOA",target:"_blank",rel:"noopener noreferrer"}},[n._v("动画 | 什么是红黑树"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/tFJqwKa-adXW0kXGxldisg",target:"_blank",rel:"noopener noreferrer"}},[n._v("动画：二叉树在实际中的应用(下）"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/0nubI8XPcUJYAaEk-Eomrg",target:"_blank",rel:"noopener noreferrer"}},[n._v("动画 | 什么是二分搜索树（附伪代码）"),a("OutboundLink")],1)])]),n._v(" "),a("h2",{attrs:{id:"联系作者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系作者"}},[n._v("#")]),n._v(" 联系作者")]),n._v(" "),a("div",{attrs:{align:"center"}},[a("p",[n._v("\n        平凡世界，贵在坚持。\n    ")]),n._v(" "),a("img",{attrs:{src:n.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);s.default=t.exports}}]);