(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{504:function(e,s,a){"use strict";a.r(s);var n=a(4),t=Object(n.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"js-相关面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-相关面试题","aria-hidden":"true"}},[e._v("#")]),e._v(" js 相关面试题")]),e._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),a("p",[e._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),e._v(" "),a("h2",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[e._v("#")]),e._v(" 内容")]),e._v(" "),a("ul",[a("li",[e._v("基本类型有哪几种？null 是对象吗？基本数据类型和复杂数据类型存储有什么区别？")]),e._v(" "),a("li",[e._v("typeof 是否正确判断类型? instanceof 呢？ instanceof 的实现原理是什么？")]),e._v(" "),a("li",[e._v("for of , for in 和 forEach,map 的区别。")]),e._v(" "),a("li",[e._v("如何判断一个变量是不是数组？")]),e._v(" "),a("li",[e._v("类数组和数组的区别是什么？")]),e._v(" "),a("li",[e._v("== 和 === 有什么区别？")]),e._v(" "),a("li",[e._v("[] == ![]")]),e._v(" "),a("li",[e._v("ES6 中的 class 和 ES5 的类有什么区别？")]),e._v(" "),a("li",[e._v("数组的哪些 API 会改变原数组？")]),e._v(" "),a("li",[e._v("let、const 以及 var 的区别是什么？")]),e._v(" "),a("li",[e._v("在 JS 中什么是变量提升？什么是暂时性死区？")]),e._v(" "),a("li",[e._v("如何正确的判断 this? 箭头函数的 this 是什么？")]),e._v(" "),a("li",[e._v("词法作用域和 this 的区别。")]),e._v(" "),a("li",[e._v("谈谈你对 JS 执行上下文栈和作用域链的理解。")]),e._v(" "),a("li",[e._v("什么是闭包？闭包的作用是什么？闭包有哪些使用场景？")]),e._v(" "),a("li",[e._v("call、apply 有什么区别？call,aplly 和 bind 的内部是如何实现的？")]),e._v(" "),a("li",[e._v("new 的原理是什么？通过 new 的方式创建对象和通过字面量创建有什么区别？")]),e._v(" "),a("li",[e._v("谈谈你对原型的理解？")]),e._v(" "),a("li",[e._v("什么是原型链？【原型链解决的是什么问题？】")]),e._v(" "),a("li",[e._v("prototype 和 "),a("code",[e._v("__proto__")]),e._v(" 区别是什么？")]),e._v(" "),a("li",[e._v("使用 ES5 实现一个继承？")]),e._v(" "),a("li",[e._v("什么是深拷贝？深拷贝和浅拷贝有什么区别？")]),e._v(" "),a("li",[e._v("防抖和节流的区别是什么？防抖和节流的实现。")]),e._v(" "),a("li",[e._v("取数组的最大值（ES5、ES6）")]),e._v(" "),a("li",[e._v("ES6 新的特性有哪些？")]),e._v(" "),a("li",[e._v("setTimeout 倒计时为什么会出现误差？")]),e._v(" "),a("li",[e._v("为什么 0.1 + 0.2 != 0.3 ?")]),e._v(" "),a("li",[e._v("promise 有几种状态, Promise 有什么优缺点 ?")]),e._v(" "),a("li",[e._v("Promise 构造函数是同步还是异步执行，then 中的方法呢 ?promise 如何实现 then 处理 ?")]),e._v(" "),a("li",[e._v("Promise 和 setTimeout 的区别 ?")]),e._v(" "),a("li",[e._v("如何实现 Promise.all ?")]),e._v(" "),a("li",[e._v("如何实现 Promise.finally ?")]),e._v(" "),a("li",[e._v("什么是函数柯里化？实现 sum(1)(2)(3) 返回结果是 1,2,3 之和")]),e._v(" "),a("li",[e._v("说一说 JS 异步发展史")]),e._v(" "),a("li",[e._v("谈谈对 async/await 的理解，async/await 的实现原理是什么?")]),e._v(" "),a("li",[e._v("使用 async/await 需要注意什么？")]),e._v(" "),a("li",[e._v("如何实现 Promise.race？")]),e._v(" "),a("li",[e._v("可遍历数据结构的有什么特点？")]),e._v(" "),a("li",[e._v("requestAnimationFrame 和 setTimeout/setInterval 有什么区别？使用 requestAnimationFrame 有哪些好处？")]),e._v(" "),a("li",[e._v("JS 类型转换的规则是什么？")]),e._v(" "),a("li",[e._v("简述下对 webWorker 的理解？")]),e._v(" "),a("li",[e._v("ES6 模块和 CommonJS 模块的差异？")]),e._v(" "),a("li",[e._v("浏览器事件代理机制的原理是什么？")]),e._v(" "),a("li",[e._v("js 如何自定义事件？")]),e._v(" "),a("li",[e._v("跨域的方法有哪些？原理是什么？")]),e._v(" "),a("li",[e._v("js 异步加载的方式有哪些？")]),e._v(" "),a("li",[e._v("下面代码 a 在什么情况中打印出 1？")]),e._v(" "),a("li",[e._v("下面这段代码的输出是什么？")]),e._v(" "),a("li",[e._v("实现双向绑定 Proxy 与 Object.defineProperty 相比优劣如何?")]),e._v(" "),a("li",[e._v("Object.is() 与比较操作符 ===、== 有什么区别？")]),e._v(" "),a("li",[e._v("什么是事件循环？Node 事件循环和 JS 事件循环的差异是什么？")])]),e._v(" "),a("h3",{attrs:{id:"_1-基本类型有哪几种？null-是对象吗？基本数据类型和复杂数据类型存储有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本类型有哪几种？null-是对象吗？基本数据类型和复杂数据类型存储有什么区别？","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.基本类型有哪几种？null 是对象吗？基本数据类型和复杂数据类型存储有什么区别？")]),e._v(" "),a("ul",[a("li",[e._v("基本类型有 6 种，分别是 undefined,null,bool,string,number,symbol(ES6 新增)。")]),e._v(" "),a("li",[e._v("虽然 typeof null 返回的值是 object,但是 null 不是对象，而是基本数据类型的一种。")]),e._v(" "),a("li",[e._v("基本数据类型存储在栈内存，存储的是值。")]),e._v(" "),a("li",[e._v("复杂数据类型的值存储在堆内存，地址（指向堆中的值）存储在栈内存。当我们把对象赋值给另外一个变量的时候，复制的是地址，指向同一块内存空间，当其中一个对象改变时，另一个对象也会变化。")])]),e._v(" "),a("h3",{attrs:{id:"_2-typeof-是否正确判断类型-instanceof-呢？-instanceof-的实现原理是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-typeof-是否正确判断类型-instanceof-呢？-instanceof-的实现原理是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.typeof 是否正确判断类型? instanceof 呢？ instanceof 的实现原理是什么？")]),e._v(" "),a("p",[e._v("首先 typeof 能够正确的判断基本数据类型，但是除了 null, typeof null 输出的是对象。\n但是对象来说，typeof 不能正确的判断其类型， typeof 一个函数可以输出 'function',而除此之外，输出的全是 object,这种情况下，我们无法准确的知道对象的类型。")]),e._v(" "),a("p",[e._v("instanceof 可以准确的判断复杂数据类型，但是不能正确判断基本数据类型。")]),e._v(" "),a("p",[e._v("instanceof 是通过原型链判断的，A instanceof B, 在 A 的原型链中层层查找，是否有原型等于 "),a("code",[e._v("B.prototype")]),e._v("，如果一直找到 A 的原型链的顶端(null;即 "),a("code",[e._v("Object.__proto__.__proto__")]),e._v("),仍然不等于 "),a("code",[e._v("B.prototype")]),e._v("，那么返回 false，否则返回 true.")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// L instanceof R\nfunction instance_of(L, R) {//L 表示左表达式，R 表示右表达式\n    var O = R.prototype;// 取 R 的显式原型\n    L = L.__proto__;    // 取 L 的隐式原型\n    while (true) {\n        if (L === null) //已经找到顶层\n            return false;\n        if (O === L)   //当 O 严格等于 L 时，返回 true\n            return true;\n        L = L.__proto__;  //继续向上一层原型链查找\n    }\n}\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("h3",{attrs:{id:"_3-for-of-for-in-和-foreach-map-的区别。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-for-of-for-in-和-foreach-map-的区别。","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.for of , for in 和 forEach,map 的区别。")]),e._v(" "),a("ul",[a("li",[e._v("for...of 循环：具有 iterator 接口，就可以用 for...of 循环遍历它的成员(属性值)。for...of 循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象、Generator 对象，以及字符串。for...of 循环调用遍历器接口，数组的遍历器接口只返回具有数字索引的属性。对于普通的对象，for...of 结构不能直接使用，会报错，必须部署了 Iterator 接口后才能使用。可以中断循环。")]),e._v(" "),a("li",[e._v("for...in 循环：遍历对象自身的和继承的可枚举的属性, 不能直接获取属性值。可以中断循环。")]),e._v(" "),a("li",[e._v("forEach: 只能遍历数组，不能中断，没有返回值(或认为返回值是 undefined)。")]),e._v(" "),a("li",[e._v("map: 只能遍历数组，不能中断，返回值是修改后的数组。")])]),e._v(" "),a("h3",{attrs:{id:"_4-如何判断一个变量是不是数组？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何判断一个变量是不是数组？","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.如何判断一个变量是不是数组？")]),e._v(" "),a("ul",[a("li",[e._v("使用 Array.isArray 判断，如果返回 true, 说明是数组")]),e._v(" "),a("li",[e._v("使用 instanceof Array 判断，如果返回 true, 说明是数组")]),e._v(" "),a("li",[e._v("使用 Object.prototype.toString.call 判断，如果值是 [object Array], 说明是数组")]),e._v(" "),a("li",[e._v("通过 constructor 来判断，如果是数组，那么 "),a("code",[e._v("arr.constructor === Array")]),e._v(". (不准确，因为我们可以指定 "),a("code",[e._v("obj.constructor = Array")]),e._v(")")])]),e._v(" "),a("h3",{attrs:{id:"_5-类数组和数组的区别是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-类数组和数组的区别是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" 5.类数组和数组的区别是什么？")]),e._v(" "),a("ol",[a("li",[e._v("拥有 length 属性，其它属性（索引）为非负整数（对象中的索引会被当做字符串来处理）;")]),e._v(" "),a("li",[e._v("不具有数组所具有的方法；")])]),e._v(" "),a("p",[e._v("类数组是一个普通对象，而真实的数组是 Array 类型。")]),e._v(" "),a("p",[e._v("常见的类数组有: 函数的参数 arguments, DOM 对象列表(比如通过 document.querySelectorAll 得到的列表), jQuery 对象 (比如 "),a("code",[e._v('$("div")')]),e._v(").")]),e._v(" "),a("p",[e._v("任何定义了遍历器（Iterator）接口的对象，都可以用扩展运算符转为真正的数组。")]),e._v(" "),a("p",[e._v("Array.from 方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象。")]),e._v(" "),a("h3",{attrs:{id:"_6-和-有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-和-有什么区别？","aria-hidden":"true"}},[e._v("#")]),e._v(" 6.== 和 === 有什么区别？")]),e._v(" "),a("p",[e._v("=== 不需要进行类型转换，只有类型相同并且值相等时，才返回 true.")]),e._v(" "),a("p",[e._v("== 如果两者类型不同，首先需要进行类型转换。具体流程如下:")]),e._v(" "),a("ol",[a("li",[e._v("首先判断两者类型是否相同，如果相等，判断值是否相等.")]),e._v(" "),a("li",[e._v("如果类型不同，进行类型转换")]),e._v(" "),a("li",[e._v("判断比较的是否是 null 或者是 undefined, 如果是, 返回 true .")]),e._v(" "),a("li",[e._v("判断两者类型是否为 string 和 number, 如果是, 将字符串转换成 number")]),e._v(" "),a("li",[e._v("判断其中一方是否为 boolean, 如果是, 将 boolean 转为 number 再进行判断")]),e._v(" "),a("li",[e._v("判断其中一方是否为 object 且另一方为 string、number 或者 symbol , 如果是, 将 object 转为原始类型再进行判断")])]),e._v(" "),a("h4",{attrs:{id:"思考："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思考：","aria-hidden":"true"}},[e._v("#")]),e._v(" 思考：.[] == ![]")]),e._v(" "),a("p",[e._v("我们来分析一下: "),a("code",[e._v("[] == ![]")]),e._v("是 true 还是 false？")]),e._v(" "),a("ol",[a("li",[e._v("首先，我们需要知道 ! 优先级是高于 == (更多运算符优先级可查看: "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",target:"_blank",rel:"noopener noreferrer"}},[e._v("运算符优先级"),a("OutboundLink")],1),e._v(")")]),e._v(" "),a("li",[a("code",[e._v("![]")]),e._v("引用类型转换成布尔值都是 true,因此"),a("code",[e._v("![]")]),e._v("的是 false")]),e._v(" "),a("li",[e._v("根据上面的比较步骤中的第五条，其中一方是 boolean，将 boolean 转为 number 再进行判断，false 转换成 number，对应的值是 0.")]),e._v(" "),a("li",[e._v("根据上面比较步骤中的第六条，有一方是 number，那么将 object 也转换成 Number,空数组转换成数字，对应的值是 0.(空数组转换成数字，对应的值是 0，如果数组中只有一个数字，那么转成 number 就是这个数字，其它情况，均为 NaN)")]),e._v(" "),a("li",[e._v("0 == 0; 为 true")])]),e._v(" "),a("h3",{attrs:{id:"_8-es6-中的-class-和-es5-的类有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-es6-中的-class-和-es5-的类有什么区别？","aria-hidden":"true"}},[e._v("#")]),e._v(" 8.ES6 中的 class 和 ES5 的类有什么区别？")]),e._v(" "),a("ol",[a("li",[e._v("ES6 class 内部所有定义的方法都是不可枚举的；")]),e._v(" "),a("li",[e._v("ES6 class 必须使用 new 调用；")]),e._v(" "),a("li",[e._v("ES6 class 不存在变量提升；")]),e._v(" "),a("li",[e._v("ES6 class 默认即是严格模式；")]),e._v(" "),a("li",[e._v("ES6 class 子类必须在父类的构造函数中调用 super()，这样才有 this 对象；ES5 中类继承的关系是相反的，先有子类的 this，然后用父类的方法应用在 this 上。")])]),e._v(" "),a("h3",{attrs:{id:"_9-数组的哪些-api-会改变原数组？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-数组的哪些-api-会改变原数组？","aria-hidden":"true"}},[e._v("#")]),e._v(" 9.数组的哪些 API 会改变原数组？")]),e._v(" "),a("p",[e._v("修改原数组的 API 有:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("splice/reverse/fill/copyWithin/sort/push/pop/unshift/shift\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("不修改原数组的 API 有:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("slice/map/forEach/every/filter/reduce/entries/find/concat\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("注: 数组的每一项是简单数据类型，且未直接操作数组的情况下(稍后会对此题重新作答)。")]),e._v(" "),a("h3",{attrs:{id:"_10-let、const-以及-var-的区别是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-let、const-以及-var-的区别是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" 10.let、const 以及 var 的区别是什么？")]),e._v(" "),a("ol",[a("li",[e._v("let 和 const 定义的变量不会出现变量提升，而 var 定义的变量会提升。")]),e._v(" "),a("li",[e._v("let 和 const 是 JS 中的块级作用域")]),e._v(" "),a("li",[e._v("let 和 const 不允许重复声明(会抛出错误)")]),e._v(" "),a("li",[e._v("let 和 const 定义的变量在定义语句之前，如果使用会抛出错误(形成了暂时性死区)，而 var 不会。")]),e._v(" "),a("li",[e._v("const 声明一个只读的常量。一旦声明，常量的值就不能改变(如果声明是一个对象，那么不能改变的是对象的引用地址)")])]),e._v(" "),a("h3",{attrs:{id:"_11-在-js-中什么是变量提升？什么是暂时性死区？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-在-js-中什么是变量提升？什么是暂时性死区？","aria-hidden":"true"}},[e._v("#")]),e._v(" 11.在 JS 中什么是变量提升？什么是暂时性死区？")]),e._v(" "),a("p",[e._v("变量提升就是变量在声明之前就可以使用，值为 undefined。")]),e._v(" "),a("p",[e._v("在代码块内，使用 let/const 命令声明变量之前，该变量都是不可用的(会抛出错误)。这在语法上，称为“暂时性死区”。暂时性死区也意味着 typeof 不再是一个百分安全的操作。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("typeof x; // ReferenceError(暂时性死区，抛错)\nlet x;\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。")]),e._v(" "),a("h3",{attrs:{id:"_12-如何正确的判断-this-箭头函数的-this-是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-如何正确的判断-this-箭头函数的-this-是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" 12.如何正确的判断 this? 箭头函数的 this 是什么？")]),e._v(" "),a("p",[e._v("this 的绑定规则有四种：默认绑定，隐匿绑定，显式绑定，new 绑定")]),e._v(" "),a("ol",[a("li",[e._v("函数是否在 new 中调用(new 绑定)，如果是，那么 this 绑定的是新创建的对象【前提是构造函数中没有返回对象或者 function，否则 this 指向返回的对象/function】")]),e._v(" "),a("li",[e._v("函数是否通过 call,apply 调用，或者使用了 bind (即硬绑定)，如果是，那么 this 绑定的就是指定的对象。")]),e._v(" "),a("li",[e._v("函数是否在某个上下文对象中调用(隐式绑定)，如果是的话，this 绑定的是那个上下文对象。一般是 obj.foo()")]),e._v(" "),a("li",[e._v("如果以上都不是，那么使用默认绑定。如果在严格模式下，则绑定到 undefined，否则绑定到全局对象。")]),e._v(" "),a("li",[e._v("如果把 null 或者 undefined 作为 this 的绑定对象传入 call、apply 或者 bind, 这些值在调用时会被忽略，实际应用的是默认绑定规则。")]),e._v(" "),a("li",[e._v("箭头函数没有自己的 this, 它的 this 继承于上一层代码块的 this。")])]),e._v(" "),a("p",[e._v("如果 this 的知识点，您还不太懂，请戳: "),a("a",{attrs:{href:"https://km.xiaowuzi.info/js/es5-this.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("this 理解"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_13-词法作用域和-this-的区别。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-词法作用域和-this-的区别。","aria-hidden":"true"}},[e._v("#")]),e._v(" 13.词法作用域和 this 的区别。")]),e._v(" "),a("ul",[a("li",[e._v("词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的")]),e._v(" "),a("li",[e._v("this 是在调用时被绑定的，this 指向什么，完全取决于函数的调用位置(关于 this 的指向问题，本文已经有说明)")])]),e._v(" "),a("h3",{attrs:{id:"_14-谈谈你对-js-执行上下文栈和作用域链的理解。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-谈谈你对-js-执行上下文栈和作用域链的理解。","aria-hidden":"true"}},[e._v("#")]),e._v(" 14.谈谈你对 JS 执行上下文栈和作用域链的理解。")]),e._v(" "),a("p",[e._v("执行上下文就是当前 JavaScript 代码被解析和执行时所在环境, JS 执行上下文栈可以认为是一个存储函数调用的栈结构，遵循先进后出的原则。")]),e._v(" "),a("ul",[a("li",[e._v("JavaScript 执行在单线程上，所有的代码都是排队执行。")]),e._v(" "),a("li",[e._v("一开始浏览器执行全局的代码时，首先创建全局的执行上下文，压入执行栈的顶部。")]),e._v(" "),a("li",[e._v("每当进入一个函数的执行就会创建函数的执行上下文，并且把它压入执行栈的顶部。当前函数执行-完成后，当前函数的执行上下文出栈，并等待垃圾回收。")]),e._v(" "),a("li",[e._v("浏览器的 JS 执行引擎总是访问栈顶的执行上下文。")]),e._v(" "),a("li",[e._v("全局上下文只有唯一的一个，它在浏览器关闭时出栈。")])]),e._v(" "),a("p",[e._v("作用域链：无论是 LHS 还是 RHS 查询，都会在当前的作用域开始查找，如果没有找到，就会向上级作用域继续查找目标标识符，每次上升一个作用域，一直到全局作用域为止。")]),e._v(" "),a("p",[e._v("如果执行上下文及上下文栈不理解的话，请戳"),a("a",{attrs:{href:"https://km.xiaowuzi.info/js/es5-execution-context.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("执行上下文"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_15-什么是闭包？闭包的作用是什么？闭包有哪些使用场景？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-什么是闭包？闭包的作用是什么？闭包有哪些使用场景？","aria-hidden":"true"}},[e._v("#")]),e._v(" 15.什么是闭包？闭包的作用是什么？闭包有哪些使用场景？")]),e._v(" "),a("p",[e._v("闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包最常用的方式就是在一个函数内部创建另一个函数。")]),e._v(" "),a("p",[e._v("闭包的作用有:")]),e._v(" "),a("ol",[a("li",[e._v("封装私有变量")]),e._v(" "),a("li",[e._v("模仿块级作用域(ES5 中没有块级作用域)")]),e._v(" "),a("li",[e._v("实现 JS 的模块")])]),e._v(" "),a("p",[e._v("如果闭包不理解的话，请戳"),a("a",{attrs:{href:"https://km.xiaowuzi.info/js/es5-closure.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("闭包"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_16-call、apply-有什么区别？call-aplly-和-bind-的内部是如何实现的？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-call、apply-有什么区别？call-aplly-和-bind-的内部是如何实现的？","aria-hidden":"true"}},[e._v("#")]),e._v(" 16.call、apply 有什么区别？call,aplly 和 bind 的内部是如何实现的？")]),e._v(" "),a("p",[e._v("请戳以下两个链接：")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://km.xiaowuzi.info/js/es5-apply-call-bind.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("apply&bind&call."),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/cs-learning-record/javascript-series/blob/master/javascript/apply%26bind%26call%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("apply&bind&call 模拟实现"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:"_17-new-的原理是什么？通过-new-的方式创建对象和通过字面量创建有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-new-的原理是什么？通过-new-的方式创建对象和通过字面量创建有什么区别？","aria-hidden":"true"}},[e._v("#")]),e._v(" 17.new 的原理是什么？通过 new 的方式创建对象和通过字面量创建有什么区别？")]),e._v(" "),a("p",[e._v("请戳链接："),a("a",{attrs:{href:"https://km.xiaowuzi.info/js/es5-news.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("new 模拟实现"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_18-谈谈你对原型的理解？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-谈谈你对原型的理解？","aria-hidden":"true"}},[e._v("#")]),e._v(" 18.谈谈你对原型的理解？")]),e._v(" "),a("p",[e._v("请戳链接："),a("a",{attrs:{href:"https://km.xiaowuzi.info/js/es5-prototype.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("原型与原型链"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_19-什么是原型链？【原型链解决的是什么问题？】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-什么是原型链？【原型链解决的是什么问题？】","aria-hidden":"true"}},[e._v("#")]),e._v(" 19.什么是原型链？【原型链解决的是什么问题？】")]),e._v(" "),a("h3",{attrs:{id:"_20-prototype-和-proto-区别是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-prototype-和-proto-区别是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" 20.prototype 和 "),a("code",[e._v("__proto__")]),e._v(" 区别是什么？")]),e._v(" "),a("h3",{attrs:{id:"_21-使用-es5-实现一个继承？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-使用-es5-实现一个继承？","aria-hidden":"true"}},[e._v("#")]),e._v(" 21.使用 ES5 实现一个继承？")]),e._v(" "),a("p",[e._v("请戳链接："),a("a",{attrs:{href:"https://km.xiaowuzi.info/js/es5-extends.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("继承"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_22-什么是深拷贝？深拷贝和浅拷贝有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-什么是深拷贝？深拷贝和浅拷贝有什么区别？","aria-hidden":"true"}},[e._v("#")]),e._v(" 22.什么是深拷贝？深拷贝和浅拷贝有什么区别？")]),e._v(" "),a("p",[e._v("请戳链接："),a("a",{attrs:{href:"https://km.xiaowuzi.info/js/js-clone.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JS 的浅拷贝与深拷贝"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_23-防抖和节流的区别是什么？防抖和节流的实现。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-防抖和节流的区别是什么？防抖和节流的实现。","aria-hidden":"true"}},[e._v("#")]),e._v(" 23.防抖和节流的区别是什么？防抖和节流的实现。")]),e._v(" "),a("p",[e._v("请戳链接："),a("a",{attrs:{href:"https://km.xiaowuzi.info/js/js-debounce.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("节流与防抖动"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_24-取数组的最大值（es5、es6）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-取数组的最大值（es5、es6）","aria-hidden":"true"}},[e._v("#")]),e._v(" 24.取数组的最大值（ES5、ES6）")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// ES5 的写法\nMath.max.apply(null,[14,3,77,30]);\n\n// ES6 的写法\nMath.max(...[14,3,77,30]);\n\n// reduce\n[14,3,77,30].reduce((accumulator,currentValue){\n    return accumulator = accumulator > currentValue ? accumulator : currentValue\n})\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("h3",{attrs:{id:"_25-es6-新的特性有哪些？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-es6-新的特性有哪些？","aria-hidden":"true"}},[e._v("#")]),e._v(" 25.ES6 新的特性有哪些？")]),e._v(" "),a("ol",[a("li",[e._v("新增了块级作用域(let,const)")]),e._v(" "),a("li",[e._v("提供了定义类的语法糖(class)")]),e._v(" "),a("li",[e._v("新增了一种基本数据类型(Symbol)")]),e._v(" "),a("li",[e._v("新增了变量的解构赋值")]),e._v(" "),a("li",[e._v("函数参数允许设置默认值，引入了 rest 参数，新增了箭头函数")]),e._v(" "),a("li",[e._v("数组新增了一些 API，如 isArray/from/of 方法，数组实例新增了 entries()，keys()和 values()等方法")]),e._v(" "),a("li",[e._v("对象和数组新增了扩展运算符")]),e._v(" "),a("li",[e._v("ES6 新增了模块化(import/export)")]),e._v(" "),a("li",[e._v("ES6 新增了 Set 和 Map 数组结构")]),e._v(" "),a("li",[e._v("ES6 原生提供了 Proxy 构造函数，用来生成 Proxy 实例")]),e._v(" "),a("li",[e._v("ES6 新增了生成器(Generator)和遍历器(Iterator)")])]),e._v(" "),a("h3",{attrs:{id:"_26-settimeout-倒计时为什么会出现误差？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-settimeout-倒计时为什么会出现误差？","aria-hidden":"true"}},[e._v("#")]),e._v(" 26.setTimeout 倒计时为什么会出现误差？")]),e._v(" "),a("p",[e._v("setTimeout()只是将事件插入了“任务队列”，必须等当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码消耗时间很长，也有可能要等很久。所以并没办法保证回调函数一定会在 setTimeout()指定的时间执行。所以，setTimeout 的第二个参数表示的是最少时间，并非是确切时间。")]),e._v(" "),a("h3",{attrs:{id:"_27-为什么-0-1-0-2-0-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27-为什么-0-1-0-2-0-3","aria-hidden":"true"}},[e._v("#")]),e._v(" 27.为什么 0.1 + 0.2 != 0.3 ?")]),e._v(" "),a("p",[e._v("参考"),a("a",{attrs:{href:"https://km.xiaowuzi.info/js/js-precision.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("js 精度丢失问题"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_28-promise-有几种状态-promise-有什么优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28-promise-有几种状态-promise-有什么优缺点","aria-hidden":"true"}},[e._v("#")]),e._v(" 28.promise 有几种状态, Promise 有什么优缺点 ?")]),e._v(" "),a("p",[e._v("promise 有三种状态：fulfilled,rejected,pending.")]),e._v(" "),a("p",[e._v("优点：")]),e._v(" "),a("ul",[a("li",[e._v("一旦状态改变，就不会再变，任何时候都可以得到这个结果")]),e._v(" "),a("li",[e._v("可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数")])]),e._v(" "),a("p",[e._v("缺点：")]),e._v(" "),a("ul",[a("li",[e._v("无法取消 Promise")]),e._v(" "),a("li",[e._v("当处于 pending 状态时，无法得知目前进展到哪一个阶段")])]),e._v(" "),a("h3",{attrs:{id:"_29-promise-构造函数是同步还是异步执行，then-中的方法呢-promise-如何实现-then-处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29-promise-构造函数是同步还是异步执行，then-中的方法呢-promise-如何实现-then-处理","aria-hidden":"true"}},[e._v("#")]),e._v(" 29.Promise 构造函数是同步还是异步执行，then 中的方法呢 ?promise 如何实现 then 处理 ?")]),e._v(" "),a("p",[e._v("Promise 的构造函数是同步执行的。then 中的方法是异步的。promise 的 then 实现，详见"),a("a",{attrs:{href:"https://km.xiaowuzi.info/js/es6-promise.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise 对象"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_30-promise-和-settimeout-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30-promise-和-settimeout-的区别","aria-hidden":"true"}},[e._v("#")]),e._v(" 30.Promise 和 setTimeout 的区别 ?")]),e._v(" "),a("p",[e._v("Promise 是微任务，setTimeout 是宏任务，同一个事件循环中，promise.then 总是先于 setTimeout 执行。")]),e._v(" "),a("h3",{attrs:{id:"_31-如何实现-promise-all"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31-如何实现-promise-all","aria-hidden":"true"}},[e._v("#")]),e._v(" 31.如何实现 Promise.all ?")]),e._v(" "),a("p",[e._v("要实现 Promise.all 首先我们需要知道 Promise.all 的功能：")]),e._v(" "),a("ol",[a("li",[e._v("如果传入的参数是一个空的可迭代对象，那么")]),e._v(" "),a("li",[e._v("如果传入的参数不包含任何 promise，则返回一个异步完成.promises 中所有的 promise 都")]),e._v(" "),a("li",[e._v("如果参数中有一个 promise 失败，那么 Promise.all 返回的 promise 对象失败")]),e._v(" "),a("li",[e._v("在任何情况下，Promise.all 返回的 promise 的完成状态的结果都是一个数组")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Promise.all = function(promise){\n    return new Promise((resolve,reject)=>{\n        let index = 0;\n        let result = [];\n        if(promise.length === 0){\n            resolve(result);\n        }else{\n            function processValue(i,data){\n                result[i] = data;\n                if(++index === promises.length){\n                    resolve(result);\n                }\n            }\n            for(let i =0; i<promises.length;i++){\n                // promises[i] 可能是普通值\n                Promise.resolve(promise[i]).then((data)=>{\n                    processValue(i,data);\n                },(err)=>{\n                    reject(err);\n                    return;\n                })\n            }\n        }\n    })\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br")])]),a("h3",{attrs:{id:"_32-如何实现-promise-finally"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_32-如何实现-promise-finally","aria-hidden":"true"}},[e._v("#")]),e._v(" 32.如何实现 Promise.finally ?")]),e._v(" "),a("p",[e._v("不管成功还是失败，都会走到 finally 中，并且 finally 之后，还可以继续 then，并且将值原封不动的传递给后面的 then.")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Promise.prototype.finally = function (callback){\n    return this.then((value)=>{\n        reutrn Promise.resolve(callback()).then(()=>{\n            return value;\n        })\n    },(err)=>{\n        return Promise.resolve(callback()).then(()=>{\n            throw err;\n        })\n    })\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br")])]),a("h3",{attrs:{id:"_33-什么是函数柯里化？实现-sum-1-2-3-返回结果是-1-2-3-之和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_33-什么是函数柯里化？实现-sum-1-2-3-返回结果是-1-2-3-之和","aria-hidden":"true"}},[e._v("#")]),e._v(" 33.什么是函数柯里化？实现 sum(1)(2)(3) 返回结果是 1,2,3 之和")]),e._v(" "),a("h3",{attrs:{id:"_34-说一说-js-异步发展史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_34-说一说-js-异步发展史","aria-hidden":"true"}},[e._v("#")]),e._v(" 34.说一说 JS 异步发展史")]),e._v(" "),a("p",[e._v("异步最早的解决方案是回调函数，如果事件的回调，setInterval/setTimeout 中的回调。但是回调函数有一个很常见的问题，就是回调地狱的问题；")]),e._v(" "),a("p",[e._v("为了解决回调地铁的问题，社区提出了 Promise 解决方案，ES6 将其写进了语言标准。Promise 解决了回调地狱的问题，但是 Promise 也存在一些问题，如错误不能被 try catch，而且使用 Promise 的链式调用，其实并没有从根本上解决回调地狱的问题，只是换了一种写法。")]),e._v(" "),a("p",[e._v("ES6 中引入了 Generator 函数，Generator 是一种异步编程解决方案，Generator 函数是协程在 ES6 的实现最大特点就是可以交出函数的执行权，Generator 函数可以看出是异步任务的容器，需要暂停的地方，都用 yield 语句注明。但是 Generator 使用起来较为复杂。")]),e._v(" "),a("h3",{attrs:{id:"_35-谈谈对-async-await-的理解，async-await-的实现原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_35-谈谈对-async-await-的理解，async-await-的实现原理是什么","aria-hidden":"true"}},[e._v("#")]),e._v(" 35.谈谈对 async/await 的理解，async/await 的实现原理是什么?")]),e._v(" "),a("p",[e._v("async/await 就是 Generator 的语法糖，使得异步操作变得更加方便。来张图对比一下：")]),e._v(" "),a("p",[a("img",{attrs:{src:"js-async-interview.png",alt:"images"}})]),e._v(" "),a("p",[e._v("async 函数就是将 Genterator 函数的星号（"),a("code",[e._v("*")]),e._v("）替换成 async，将 yield 替换成 await。")]),e._v(" "),a("blockquote",[a("p",[e._v("我们说 async 是 Generator 的语法糖，那么这个糖究竟甜在哪呢？")])]),e._v(" "),a("ol",[a("li",[e._v("async 函数内置执行器，函数调用之后，会自动执行，输出最后结果。而 Generator 需要调用 next 或者配合 co 模块使用。")]),e._v(" "),a("li",[e._v("更好的语义，async 和 await，比如星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。")])]),e._v(" "),a("h3",{attrs:{id:"_36-使用-async-await-需要注意什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_36-使用-async-await-需要注意什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" 36.使用 async/await 需要注意什么？")]),e._v(" "),a("ol",[a("li",[e._v("await 命令后面的 Promise 对象，运行结果可能是 rejected，此时等同于 async 函数返回的 Promise 对象被 reject，因此需要加上错误处理，可以给每个 await 后的 Promise 增加 catch 方法；也可以将 await 的代码放在"),a("code",[e._v("try...catch")]),e._v("中。")]),e._v(" "),a("li",[e._v("多个 await 命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 下面两种写法都可以同时触发\n// 方法一\nasync function f1(){\n    await Promise.all([\n        new Promise((resolve)=>{\n            setTimeout(resolve,600);\n        }),\n        new Promise((resolve)=>{\n            setTimeout(resolve,600)\n        })\n    ])\n}\n\n// 方法二\nasync function f2(){\n    let fn1 = new Promise((resolve)=>{\n        setTimeout(resolve,800)\n    });\n\n    let fn2 = new Promise((resolve)=>{\n        setTimeout(resolve,800);\n    });\n    await fn1;\n    await fn2;\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("await 命令只能用在 async 函数之中，如果用在普通函数，会报错。")]),e._v(" "),a("li",[e._v("async 函数可以保留运行堆栈。")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/**\n*   函数a内部运行了一异步任务b()。当b()运行的时候，函数a()不会中断，而是继续执行。\n*   等到b() 运行结束，可能a()早就运行结束了，b()所在上下文环境已经消失了。\n*   如果b()或c()报错，错误堆栈将不包括a()。\n*/\nfunction b(){\n    return new Promise((resolve,reject)=>{\n        setTimeout(resolve,200)\n    });\n}\nfunction c(){\n    throw Error(10);\n}\nconst a = ()=>{\n    b().then(()=>c);\n}\na();\n/**\n* 改成async函数\n*/\nconst m = async()=>{\n    await b();\n    c();\n};\nm();\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br")])]),a("p",[e._v("报错信息如下，可以看出 async 函数可以保留运行堆栈。")]),e._v(" "),a("p",[a("img",{attrs:{src:"js-async02.png",alt:"images"}})]),e._v(" "),a("h3",{attrs:{id:"_37-如何实现-promise-race？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_37-如何实现-promise-race？","aria-hidden":"true"}},[e._v("#")]),e._v(" 37.如何实现 Promise.race？")]),e._v(" "),a("p",[e._v("在代码实现前，我们需要先了解 Promise.race 的特点：")]),e._v(" "),a("ol",[a("li",[e._v("Promise.race 返回的仍然是一个 Promise。它的状态与第一个完成的 Promise 的状态相同。它可以是完成（resolve），也可以是失败（rejects），这个取决于第一个 Promise 是哪一种状态。")]),e._v(" "),a("li",[e._v("如果传入的参数是不可迭代的，那么将会抛出错误。")]),e._v(" "),a("li",[e._v("如果传的参数数组是空，那么返回的 promise 将永远等待。")]),e._v(" "),a("li",[e._v("如果迭代包含一个或多个非承诺值或已解决/拒绝的承诺，则 Promise.race 将解析为迭代中找到的第一个值。")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Promise.race = function(promise){\n    // promise 必须是一个可遍历的数组结构，否则抛错\n    return new Promise((resolve,reject)=>{\n        if(typeof promises[Symbol.iterator] !=='function'){\n            // 真实不是这个错误\n            Promise.reject('args is not iteratable!');\n        }\n        if(promises.length===0){\n            return;\n        }else{\n            for(let i=0;i<promises.length;i++){\n                Promise.resolve(promises[i]).then((data)=>{\n                    resolve(data);\n                    return;\n                },(err)=>{\n                    reject(err);\n                    return;\n                })\n            }\n        }\n    });\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br")])]),a("p",[e._v("测试代码：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 一直在等待态\nPromise.race([]).then((data)=>{\n    console.log('success',data);\n},(err)=>{\n    console.log('err',err);\n});\n\n// 抛错\nPromise.race().then((data)=>{\n    console.log('success',data);\n},(err)=>{\n    console.log('err',err);\n});\n\nPromise.race([\n    new Promise((resolve,reject)=>{\n        setTimeout(()=>{resolve(100)},1000)\n    }),\n    new Promise((resolve,reject)=>{\n        setTimeout(()=>{resolve(200)},200)\n    }),\n    new Promise((resolve,reject)=>{\n        setTimeout(()=>{reject(100)},100)\n    })\n]).then((data){\n    console.log(data);\n},(err)=>{\n    console.log(err);\n})\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br")])]),a("h3",{attrs:{id:"_38-可遍历数据结构的有什么特点？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_38-可遍历数据结构的有什么特点？","aria-hidden":"true"}},[e._v("#")]),e._v(" 38.可遍历数据结构的有什么特点？")]),e._v(" "),a("p",[e._v("一个对象如果要具备可被 for...of 循环调用的 Iterator 接口，就必须在其 Symbol.iterator 的属性上部署遍历器生成方法(或者原型链上的对象具有该方法)")]),e._v(" "),a("p",[a("strong",[e._v("PS:")]),e._v(" 遍历器根本特征就是具有 next 方法。每次调用 next 方法，都会返回一个代表当前成员的信息对象，具有 value 和 done 两个属性。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 如为对象添加Iterator接口；\nlet obj = {\n    name:'Yvette',\n    age: 18,\n    job: 'engineer',\n    [Symbol.iterator](){\n        const self = this;\n        const keys = Object.keys(self);\n        let self = this;\n        const keys = Object.keys(self);\n        let index = 0;\n        return {\n            next(){\n                if(index < keys.length){\n                    return {\n                        value: self[keys[index++]],\n                        done:false\n                    }\n                }else{\n                    return { value:undefined,done:true};\n                }\n            }\n        }\n    }\n}\n\nfor(let item of obj){\n    console.log(item);          // Yvette 18 engineer\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br")])]),a("p",[e._v("使用 Generator 函数()简写 Symbol.iterator 方法，可以简写如下：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let obj = {\n    name: 'Yvette',\n    age: 18,\n    job: 'engineer',\n    * [Symbol.iterator] () {\n        const self = this;\n        const keys = Object.keys(self);\n        for (let index=0;index<keys.length;index++){\n            yield self[keys[index]];    // yield 表达式仅能使用在Generator函数中\n        }\n    }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br")])]),a("h4",{attrs:{id:"原生具备-iterator-接口的数据结构如下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原生具备-iterator-接口的数据结构如下","aria-hidden":"true"}},[e._v("#")]),e._v(" 原生具备 Iterator 接口的数据结构如下")]),e._v(" "),a("ul",[a("li",[e._v("Array")]),e._v(" "),a("li",[e._v("Map")]),e._v(" "),a("li",[e._v("Set")]),e._v(" "),a("li",[e._v("String")]),e._v(" "),a("li",[e._v("TypedArray")]),e._v(" "),a("li",[e._v("函数的 arguments 对象")]),e._v(" "),a("li",[e._v("NodeList 对象")]),e._v(" "),a("li",[e._v("ES6 的数组、Set、Map 都部署了以下三个方法：entries()/keys()/values()，调用后都返回遍历器对象")])]),e._v(" "),a("h3",{attrs:{id:"_39-requestanimationframe-和-settimeout-setinterval-有什么区别？使用-requestanimationframe-有哪些好处？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_39-requestanimationframe-和-settimeout-setinterval-有什么区别？使用-requestanimationframe-有哪些好处？","aria-hidden":"true"}},[e._v("#")]),e._v(" 39.requestAnimationFrame 和 setTimeout/setInterval 有什么区别？使用 requestAnimationFrame 有哪些好处？")]),e._v(" "),a("p",[e._v("在 requestAnimationFrame 之前，我们主要使用 setTimeout/setInterval 来编写 JS 动画。")]),e._v(" "),a("p",[e._v("编写动画的关键是循环间隔的设置，一方面，循环间隔足够短，动画效果才能显得平滑流畅；另一方面，循环间隔还要足够长，才能确保浏览器有能力沉浸产生变化 。")]),e._v(" "),a("p",[e._v("大部分的电脑显示器的刷新频率是 60HZ，也就是每秒钟重绘 60 次。大多数浏览器都会对重绘操作加以限制，不走过显示器的重绘频率，因为即使超过那个频率用户体验也不会提升。因此，最平滑动画的最佳循环间隔是 1000ms/60，约为 16.7ms。")]),e._v(" "),a("p",[e._v("setTimeout/setInterval 有一个显著的缺陷在于时间不是精确的，setTimeout/setInterval 只能保证延时或间隔不小于设定的时间。因为它们实际上只是把任务添加到任务队列中，但是如果前面的任务还没有执行完成。它们必须要等待。")]),e._v(" "),a("p",[e._v("requestAnmationFrame 才有的是系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，千万过度绘制，增加开销；也不会因为间隔时间太长，使用动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。")]),e._v(" "),a("p",[e._v("综上所述，requestAnmationFrame 和 setTimeout/setInterval 在编写动画时相对，优点如下：")]),e._v(" "),a("ol",[a("li",[e._v("requestAnimationFrame 不需要设置时间，采用系统时间间隔，能达到最佳的动画效果。")]),e._v(" "),a("li",[e._v("requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，再一次重绘或回流中就完成。")]),e._v(" "),a("li",[e._v("当 requestAnimationFrame()运行在后台标签页或者隐藏的"),a("code",[e._v("<iframe>")]),e._v("里时，requestAnimationFrame()会被暂停调用以提升性能和电池寿命（大多数浏览器中）。")])]),e._v(" "),a("h3",{attrs:{id:"_40-js-类型转换的规则是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_40-js-类型转换的规则是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" 40.JS 类型转换的规则是什么？")]),e._v(" "),a("p",[e._v("请戳链接："),a("a",{attrs:{href:"https://km.xiaowuzi.info/js/es5-type.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JS 数据类型与数据类型转换"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_41-简述下对-webworker-的理解？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_41-简述下对-webworker-的理解？","aria-hidden":"true"}},[e._v("#")]),e._v(" 41.简述下对 webWorker 的理解？")]),e._v(" "),a("p",[e._v("HTML5 则提出了 Web Worker 标准，表示 js 允许多线程，但是子线程完全受主线程控制并且不能操作 dom，只有主线程可以操作 dom，所以 js 本质上依然是单线程语言。")]),e._v(" "),a("p",[e._v("web worker 就是在 js 单线程执行的基础上开启一个子线程，进行程序处理，而不影响主线程的执行，当子线程执行完之后再回到主线程上，在这个过程中不影响主线程的执行。子线程与主线程之间提供了数据交互的接口 postMessage 和 onmessage，来进行数据发送和接收。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var worker = new Worker('./worker.js');     // 创建一个子线程\nworker.postMessage('Hello');\nworker.onmessage = function(e){\n    console.log(e.data);    // Hi\n    worker.terminate(); // 结束线程\n};\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// worker.js\nonmessage = function(e){\n    console.log(e.data);        // Hello\n    postMessage('Hi');\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("请戳链接："),a("a",{attrs:{href:"https://km.xiaowuzi.info/html5/webwork.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("web work 学习"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_42-es6-模块和-commonjs-模块的差异？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_42-es6-模块和-commonjs-模块的差异？","aria-hidden":"true"}},[e._v("#")]),e._v(" 42.ES6 模块和 CommonJS 模块的差异？")]),e._v(" "),a("p",[e._v("请戳链接："),a("a",{attrs:{href:"https://km.xiaowuzi.info/js/js-module.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("js 模块化"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_43-浏览器事件代理机制的原理是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_43-浏览器事件代理机制的原理是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" 43.浏览器事件代理机制的原理是什么？")]),e._v(" "),a("p",[e._v("请戳链接："),a("a",{attrs:{href:"https://km.xiaowuzi.info/js/es5-event.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("js 事件"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_44-js-如何自定义事件？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_44-js-如何自定义事件？","aria-hidden":"true"}},[e._v("#")]),e._v(" 44.js 如何自定义事件？")]),e._v(" "),a("blockquote",[a("p",[e._v("自定义 DOM 事件(不考虑 IE9 之前版本)")])]),e._v(" "),a("p",[e._v("自定义事件有三种方式，一种是使用"),a("code",[e._v("new Event()")]),e._v("，另一种是"),a("code",[e._v("createEvent('CustomEvent')")]),e._v("，另一种是"),a("code",[e._v("new customEvent()")])]),e._v(" "),a("ol",[a("li",[e._v("使用"),a("code",[e._v("new Event()")])])]),e._v(" "),a("p",[e._v("获取不到"),a("code",[e._v("event.detail")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let btn = document.querySelector('#btn');\nlet ev = new Event('alert',{\n    bubbles:true,           // 事件是否冒泡；默认值false\n    cancelable:true,        // 事件能否被取消；默认值false\n    composed:false\n});\nbtn.addEventListener('alert',function(event){\n    console.log(event.bubbles);     // true\n    console.log(event.cancelable);      // true\n    console.log(event.detail);          // undefined\n},false);\nbtn.dispatchEvent(ev);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("使用"),a("code",[e._v("createEvent('CustomEvent')")]),e._v("（DOM3）")])]),e._v(" "),a("p",[e._v("要创建自定义事件，可以调用"),a("code",[e._v("createEvent('CustomEvent')")]),e._v("，返回的对象有 initCustomEvent 方法，接受以下四个参数：")]),e._v(" "),a("ul",[a("li",[e._v("type：字符串，表示触发的事件类型，如此处的"),a("code",[e._v("alert")])]),e._v(" "),a("li",[e._v("bubbles：布尔值，表示事件是否冒泡")]),e._v(" "),a("li",[e._v("cancelable：布尔值，表示事件是否可以取消")]),e._v(" "),a("li",[e._v("detail：任意值，保存在 event 对象的 detail 属性中")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let btn = document.querySelector('#btn');\nlet ev = btn.createEvent('CustomEvent');\nev.initCustomEvent('alert',true,true,'button');\nbtn.addEventListener('alert',function(event){\n    console.log(event.bubbles); //true\n    console.log(event.cancelable);//true\n    console.log(event.detail); //button\n},false);\nbtn.dispatchEvent(ev);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("使用"),a("code",[e._v("new customEvent()")]),e._v("（DOM4）")])]),e._v(" "),a("p",[e._v("使用起来比"),a("code",[e._v("createEvent('CustomEvent')")]),e._v("更加方便")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var btn = document.querySelector('#btn');\n/*\n  * 第一个参数是事件类型\n  * 第二个参数是一个对象\n  */\nvar ev = new CustomEvent('alert',{\n    bubbles: 'true',\n    cancelable: 'true',\n    detail: 'button'\n});\nbtn.addEventListener('alert',function(event){\n    console.log(event.bubbles);     // true\n    console.log(event.cancelable);      // true\n    console.log(event.detail);      // button\n},false);\nbtn.dispatchEvent(ev);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br")])]),a("blockquote",[a("p",[e._v("自定义非 DOM 事件(观察者模式)")])]),e._v(" "),a("ul",[a("li",[e._v("EventTarget 类型有一个单独的属性 handlers,用于存储事件处理程序（观察者）。")]),e._v(" "),a("li",[e._v("addHandler()用于注册给定类型事件处理程序；")]),e._v(" "),a("li",[e._v("fire()用于触发一个事件；")]),e._v(" "),a("li",[e._v("removeHandler()用于注销某个事件类型的事件处理程序。")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function EventTarget(){\n    this.handlers = {};\n}\n\nEventTarget.prototype = {\n    constructor:EventTarget,\n    // 添加事件\n    addHandler:function(type,handler){\n        if(typeof this.handlers[type] === 'undefined'){\n            this.handlers[type] = [];\n        }\n        this.handlers[type].push(handler);\n    },\n    // 触发事件\n    fire:function(event){\n        if(!event.target){\n            event.target = this;\n        }\n        if(this.handlers[event.type] instanceof Array){\n            const handlers = this.handlers[event.type];\n            handlers.forEach((handler)=>{\n                handlers.forEach((handler)=>{\n                    handler(event);\n                })\n            })\n        }\n    },\n    // 删除事件处理程序\n    removeHandler:function(type,handler){\n        if(this.handlers[type] instanceof Array){\n            const handlers = this.handlers[type];\n            for(var i=0,len=handlers.length;i<len;i++){\n                if(handlers[i] === handler) break;\n            }\n            handlers.splice(i,1);\n        }\n    }\n}\n\n// 使用\nfunction handleMessage(event){\n    console.log(event.message);\n}\n// 创建一个新对象\nvar target = new EventTarget();\n// 添加一个事件处理程序\ntarget.addHandler('message',handleMessage);\n// 触发事件\ntarget.fire({type:'message',message:'Hi'}); // Hi\n// 删除事件处理程序\ntarget.removeHandler('message',handleMessage);\n// 再次触发事件，没有事件处理程序\ntarget.fire({type:'message',message:'Hi'});\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br"),a("span",{staticClass:"line-number"},[e._v("31")]),a("br"),a("span",{staticClass:"line-number"},[e._v("32")]),a("br"),a("span",{staticClass:"line-number"},[e._v("33")]),a("br"),a("span",{staticClass:"line-number"},[e._v("34")]),a("br"),a("span",{staticClass:"line-number"},[e._v("35")]),a("br"),a("span",{staticClass:"line-number"},[e._v("36")]),a("br"),a("span",{staticClass:"line-number"},[e._v("37")]),a("br"),a("span",{staticClass:"line-number"},[e._v("38")]),a("br"),a("span",{staticClass:"line-number"},[e._v("39")]),a("br"),a("span",{staticClass:"line-number"},[e._v("40")]),a("br"),a("span",{staticClass:"line-number"},[e._v("41")]),a("br"),a("span",{staticClass:"line-number"},[e._v("42")]),a("br"),a("span",{staticClass:"line-number"},[e._v("43")]),a("br"),a("span",{staticClass:"line-number"},[e._v("44")]),a("br"),a("span",{staticClass:"line-number"},[e._v("45")]),a("br"),a("span",{staticClass:"line-number"},[e._v("46")]),a("br"),a("span",{staticClass:"line-number"},[e._v("47")]),a("br"),a("span",{staticClass:"line-number"},[e._v("48")]),a("br"),a("span",{staticClass:"line-number"},[e._v("49")]),a("br"),a("span",{staticClass:"line-number"},[e._v("50")]),a("br"),a("span",{staticClass:"line-number"},[e._v("51")]),a("br"),a("span",{staticClass:"line-number"},[e._v("52")]),a("br"),a("span",{staticClass:"line-number"},[e._v("53")]),a("br")])]),a("h3",{attrs:{id:"_45-跨域的方法有哪些？原理是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_45-跨域的方法有哪些？原理是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" 45.跨域的方法有哪些？原理是什么？")]),e._v(" "),a("p",[e._v("请戳链接："),a("a",{attrs:{href:"https://km.xiaowuzi.info/project/cross-domain.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("跨域"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_46-js-异步加载的方式有哪些？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_46-js-异步加载的方式有哪些？","aria-hidden":"true"}},[e._v("#")]),e._v(" 46.js 异步加载的方式有哪些？")]),e._v(" "),a("ol",[a("li",[a("code",[e._v("<script>")]),e._v(" 的 defer 属性，HTML4 中新增")]),e._v(" "),a("li",[a("code",[e._v("<script>")]),e._v(" 的 async 属性，HTML5 中新增")])]),e._v(" "),a("ul",[a("li",[a("code",[e._v("<script>")]),e._v(" 标签打开 defer 属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。")]),e._v(" "),a("li",[e._v("defer 和 async 的区别在于：defer 要等到整个页面在内存中正常渲染结束，才会执行；")]),e._v(" "),a("li",[e._v("async 一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。defer 是“渲染完再执行”，async 是“下载完就执行”。")]),e._v(" "),a("li",[e._v("如果有多个 defer 脚本，会按照它们在页面出现的顺序加载。")]),e._v(" "),a("li",[e._v("多个 async 脚本是不能保证加载顺序的。")])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("动态插入 script 脚本")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function downloadJS(){\n    var element = document.createElement(\"script\");\n    element.src ='xxx.js';\n    document.body.appendChild(element);\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("h3",{attrs:{id:"_47-下面代码-a-在什么情况中打印出-1？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_47-下面代码-a-在什么情况中打印出-1？","aria-hidden":"true"}},[e._v("#")]),e._v(" 47.下面代码 a 在什么情况中打印出 1？")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if(a===1 && a == 2 && a==3){\n    console.log(1);\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("参考资料"),a("a",{attrs:{href:"https://juejin.im/post/5e66dc416fb9a07cab3aaa0a",target:"_blank",rel:"noopener noreferrer"}},[e._v("大厂面试题分享：如何让(a===1&&a===2&&a===3)的值为 true?"),a("OutboundLink")],1)]),e._v(" "),a("ol",[a("li",[e._v("在类型转换的时候，我们知道了对象如何转换成原始数据类型。如果部署了 Symbol.toPrimitive，那么返回的就是 Symbol.toPrimitive 的返回值。当然，我们也可以把此函数部署在 valueOf 或者是 toString 接口上，效果相同。")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 利用闭包延长作用域的特性\nlet a = {\n    [Symbol.toPrimitive]:(function(){\n        let i =1;\n        return function(){\n            return i++;\n        }\n    })()\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[e._v("(1) 比较 a==1 时，会调用[Symbol.toPrimitive]，此时 i 是 1，相等。(2) 继续比较 a==2，调用[Symbol.toPrimitive]，此时 i 是 2，相等。 (3)继续比较 a ==3，调用[Symbol.toPrimitive]，此时 i 是 3，相等。")]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("利用 Object.defineProperty 在 window/global 上定义 a 属性，获取 a 属性时，会调用 get")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let val = 1;\nObject.defineProperty(window,'a',{\n    get:function(){\n        return val++;\n    }\n})\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("利用数组的特性")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var a = [1,2,3];\na.join = a.shift;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("数组的"),a("code",[e._v("toString")]),e._v("方法返回一个字符串，该字符串由数组中的每个元素的 toString()返回值经调用 join()方法连接（由逗号隔开）组成。")]),e._v(" "),a("p",[e._v("因此，我们可以重新 join 方法。返回第一个元素，并将其删除。")]),e._v(" "),a("h3",{attrs:{id:"_48-下面这段代码的输出是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_48-下面这段代码的输出是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" 48.下面这段代码的输出是什么？")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Foo() {\n    getName = function() {console.log(1)};\n    return this;\n}\nFoo.getName = function() {console.log(2)};\nFoo.prototype.getName = function() {console.log(3)};\nvar getName = function() {console.log(4)};\nfunction getName() {console.log(5)};\n\nFoo.getName();\ngetName();\nFoo().getName();\ngetName();\nnew Foo.getName();\nnew Foo().getName();\nnew new Foo().getName();\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br")])]),a("p",[e._v("请戳链接："),a("a",{attrs:{href:"https://www.cnblogs.com/xxcanghai/p/5189353.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("一道常被人轻视的前端 JS 面试题"),a("OutboundLink")],1)]),e._v(" "),a("ol",[a("li",[e._v("首先预编译阶段，变量声明与函数声明提升至其对应作用域的最顶端。")])]),e._v(" "),a("p",[e._v("因此上面的代码编译后如下（函数声明的优先级先于变量声明）：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Foo(){\n    getName = function(){console.log(1)}\n    return this;\n}\nfunction getName() {console.log(5)};    // 函数优先(函数首先被提升)\nvar getName;    // 重复声明，被忽略\nFoo.getName = function(){console.log(3)};\ngetName = function(){console.log(4)};\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[e._v("Foo.getName()")]),e._v("直接调用 Foo 上 getName 方法，输出 2")]),e._v(" "),a("li",[a("code",[e._v("getName()")]),e._v("输出 4，getName 被重新赋值了")]),e._v(" "),a("li",[a("code",[e._v("Foo().getName()")]),e._v("执行 Foo()，window 的 getName 被重新赋值，返回 this;浏览器环境中，非严格模式，this 指向 window，this.getName();输出为 1.如果是严格模式，this 指向 undefined，此处会抛出错误。如果是 node 环境中，this 指向 global，node 的全局变量并不挂在 global 上，因为 global.getName 对应的是 undefined，不是一个 function，会抛出错误。")]),e._v(" "),a("li",[a("code",[e._v("getName()")]),e._v("已经抛错的自然走不动这一步了；继续浏览器非严格式；window.getName 被重新赋过值，此时再调用，输出的是 1")]),e._v(" "),a("li",[a("code",[e._v("new Foo.getName()")]),e._v("考察"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",target:"_blank",rel:"noopener noreferrer"}},[e._v("运算符优先级"),a("OutboundLink")],1),e._v("的知识，new 无参数列表，对应的优先级 18；成员访问操作符"),a("code",[e._v(".")]),e._v("，对应的优先级是 19。因此相当于是"),a("code",[e._v("new (Foo.getName)()")]),e._v(";new 操作符会执行的构造函数中的方法，因此此处输出为 2.")]),e._v(" "),a("li",[a("code",[e._v("new Foo().getName()")]),e._v(";new 带参数列表，对应的优先级是 19，和成员访问操作符"),a("code",[e._v(".")]),e._v("优先级相同。同级运算符，按照从左到右的顺序依次计算。"),a("code",[e._v("new Foo()")]),e._v("先初始化对象，实例上没有 getName 方法，因此需要原型上去找，即找到了"),a("code",[e._v("Foo.prototype.getName")]),e._v("，输出 3")]),e._v(" "),a("li",[a("code",[e._v("new new Foo().getName()")]),e._v("new 带参数列表，优先级 19，因此相当于是"),a("code",[e._v("new(new Foo()).getName()")]),e._v(";先初始化 Foo 的实例化对象，然后将其原型上的 getName 函数作为构造函数再次 new，输出 3")])]),e._v(" "),a("p",[e._v("最终结果如下：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Foo.getName(); //2\ngetName();//4\nFoo().getName();//1\ngetName();//1\nnew Foo.getName();//2\nnew Foo().getName();//3\nnew new Foo().getName();//3\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("h3",{attrs:{id:"_49-实现双向绑定-proxy-与-object-defineproperty-相比优劣如何"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_49-实现双向绑定-proxy-与-object-defineproperty-相比优劣如何","aria-hidden":"true"}},[e._v("#")]),e._v(" 49.实现双向绑定 Proxy 与 Object.defineProperty 相比优劣如何?")]),e._v(" "),a("ol",[a("li",[e._v("Object.definedProperty 的作用是劫持一个对象的属性，劫持属性的 getter 和 setter 方法，在对象的属性发生变化时进行特定的操作。而 Proxy 劫持的是整个对象。")]),e._v(" "),a("li",[e._v("Proxy 会返回一个代理对象，我们只需要操作新对象即可，而"),a("code",[e._v("Object.definedProperty")]),e._v("只遍历对象属性直接修改。")]),e._v(" "),a("li",[e._v("Object.definedProperty 不支持数组，更准确的说是不支持数组的各种 API，因为如果仅仅考虑 array[i]=value 这种情况，是可以劫持的，但是这种劫持意义不大。而 Proxy 可以把持数组的各种 API。")]),e._v(" "),a("li",[e._v("尽管 Object.definedPropery 有诸多缺陷，但是其兼容性好于 Proxy.")])]),e._v(" "),a("p",[e._v("PS:Vue2.x 使用 Object.definedProperty 实现数据双向绑定，V3.0 则使用了 Proxy.")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 拦截器\nlet obj = {};\nlet temp = 'Tony';\nObject.defineProperty(obj,'name',{\n    get(){\n        console.log('读取成功');\n        return temp\n    },\n    set(value){\n        console.log('设置成功');\n        temp = value;\n    }\n})\n\nobj.name = '小武子';\nconsole.log(obj.name);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br")])]),a("p",[e._v("PS:Object.defineProperty 定义出来的属性，默认是不可枚举，不可理性，不可配置【无法 delete】")]),e._v(" "),a("p",[e._v("我们可以看到 Proxy 会支持整个对象，读取对象中的属性或者是个性属性值，那么就会被劫持。但是有点需要注意，复杂数据类型，监控的是引用地址，而不值，如果引用地址没有改变，那么不会触发 set。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let obj = {name:'Tony',hobbits:['travel','reading'],info:{\n    age:30,\n    job:'engineer'\n}}\nlet p = new Proxy(obj,{\n    get(target,key){\n        // 第三个参数是proxy，一般不使用ss\n        console.log('读取成功');\n        return Reflect.get(target,key);\n    },\n    set(target,key,value){\n        if(key === 'length') return true;      // 如果是数组长度的变化，返回\n        console.log('设置成功');\n        return Reflect.set([target,key,value]);\n    }\n});\np.name = '小武子';    // 设置成功\np.age = 30;\np.hobbits.push('photography'); //读取成功;注意不会触发设置成功\np.info.age = 18; //读取成功;不会触发设置成功\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br")])]),a("p",[e._v("最后，我们再看下对于数组的支持，Object.definedProperty 和 Proxy 的差别")]),e._v(" "),a("p",[e._v("Object.definedProperty 可以将数组的索引作为属性进行支持，但是公示支持直接对 array[i]进行操作，不支持数组的 API，非常鸡肋。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Object.defineProperty(arry, \'0\', {\n    get() {\n        console.log("读取成功");\n        return temp\n    },\n    set(value) {\n        console.log("设置成功");\n        temp = value;\n    }\n});\n\narry[0] = 10; //触发设置成功\narry.push(10); //不能被劫持\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("Proxy 可以监听到数组的变化，支持各种 API。注意数组的变化触发 get 和 set 可能不止一次，如有需要，自行根据 key 值决定是否要进行处理。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let hobbits = ['travel', 'reading'];\nlet p = new Proxy(hobbits, {\n    get(target, key) {\n        // if(key === 'length') return true; //如果是数组长度的变化，返回。\n        console.log('读取成功');\n        return Reflect.get(target, key);\n    },\n    set(target, key, value) {\n        // if(key === 'length') return true; //如果是数组长度的变化，返回。\n        console.log('设置成功');\n        return Reflect.set([target, key, value]);\n    }\n});\np.splice(0,1) //触发get和set，可以被劫持\np.push('photography');//触发get和set\np.slice(1); //触发get；因为 slice 是不会修改原数组的\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br")])]),a("h3",{attrs:{id:"_50-object-is-与比较操作符-、-有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_50-object-is-与比较操作符-、-有什么区别？","aria-hidden":"true"}},[e._v("#")]),e._v(" 50.Object.is() 与比较操作符 ===、== 有什么区别？")]),e._v(" "),a("p",[e._v("以下情况，Object.is 认为是相等")]),e._v(" "),a("ul",[a("li",[e._v("两个值都是 undefined")]),e._v(" "),a("li",[e._v("两个值都是 null")]),e._v(" "),a("li",[e._v("两个值都是 true 或者都是 false")]),e._v(" "),a("li",[e._v("两个值是由相同个数的字符按照相同的顺序组成的字符串")]),e._v(" "),a("li",[e._v("两个值指向同个对象")]),e._v(" "),a("li",[e._v("都是正零 +0")]),e._v(" "),a("li",[e._v("都是负零 -0")]),e._v(" "),a("li",[e._v("都是 NaN")]),e._v(" "),a("li",[e._v("都是除零和 NaN 外的其它同一个数字")])]),e._v(" "),a("p",[e._v("Object.is()类似于 ===，但是有一些细微差别，如下：")]),e._v(" "),a("ol",[a("li",[e._v("NaN 和 NaN 相等")]),e._v(" "),a("li",[e._v("-0 和+0 不相等")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(Object.is(NaN, NaN));//true\nconsole.log(NaN === NaN);//false\nconsole.log(Object.is(-0, +0)); //false\nconsole.log(-0 === +0); //true\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h3",{attrs:{id:"_51-什么是事件循环？node-事件循环和-js-事件循环的差异是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_51-什么是事件循环？node-事件循环和-js-事件循环的差异是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" 51.什么是事件循环？Node 事件循环和 JS 事件循环的差异是什么？")]),e._v(" "),a("p",[e._v("请戳链接："),a("a",{attrs:{href:"https://km.xiaowuzi.info/js/js-eventloop.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("理解 EventLoop"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_52-1-2-3-map-parseint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_52-1-2-3-map-parseint","aria-hidden":"true"}},[e._v("#")]),e._v(' 52.["1", "2", "3"].map(parseInt)')]),e._v(" "),a("h3",{attrs:{id:"_53-typeof-null-null-instanceof-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_53-typeof-null-null-instanceof-object","aria-hidden":"true"}},[e._v("#")]),e._v(" 53.[typeof null, null instanceof Object]")]),e._v(" "),a("h3",{attrs:{id:"_54-3-2-1-reduce-math-pow-reduce-math-pow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_54-3-2-1-reduce-math-pow-reduce-math-pow","aria-hidden":"true"}},[e._v("#")]),e._v(" 54.[ [3,2,1].reduce(Math.pow), [].reduce(Math.pow) ]")]),e._v(" "),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/5cab0c45f265da2513734390",target:"_blank",rel:"noopener noreferrer"}},[e._v("【面试篇】寒冬求职季之你必须要懂的原生 JS(上)"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5cbd1e33e51d45789161d053",target:"_blank",rel:"noopener noreferrer"}},[e._v("【面试篇】寒冬求职季之你必须要懂的原生 JS(中)"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5c64d15d6fb9a049d37f9c20",target:"_blank",rel:"noopener noreferrer"}},[e._v("中高级前端大厂面试秘籍，为你保驾护航金三银四，直通大厂(上)"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5cc26dfef265da037b611738",target:"_blank",rel:"noopener noreferrer"}},[e._v("(下篇)中高级前端大厂面试秘籍，寒冬中为您保驾护航，直通大厂"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5c92f499f265da612647b754",target:"_blank",rel:"noopener noreferrer"}},[e._v("(中篇)中高级前端大厂面试秘籍，寒冬中为您保驾护航，直通大厂"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/Bk07WB9hBagL590RRjC4FA",target:"_blank",rel:"noopener noreferrer"}},[e._v("Javascript 面试核心考点"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/g5Cr0N32W_z9X3qIMLOX6Q",target:"_blank",rel:"noopener noreferrer"}},[e._v("Javascript 高频面试题解析"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5c6ad9fde51d453c356e37d1",target:"_blank",rel:"noopener noreferrer"}},[e._v("春招季如何横扫 Javascript 面试核心考点(基础版)？"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5ca9de22e51d452b5372ed90",target:"_blank",rel:"noopener noreferrer"}},[e._v("【周刊-1】三年大厂面试官-面试题精选及答案"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5cb0315f518825215e61ec14",target:"_blank",rel:"noopener noreferrer"}},[e._v("【周刊-2】三年大厂面试官-前端面试题（偏难）"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5cd82463518825692330d440",target:"_blank",rel:"noopener noreferrer"}},[e._v("【周刊-3】三年大厂面试官-十道前端面试题（欢迎挑战）"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://muyiy.cn/question/program/5.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("每日·壹题"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"联系作者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[e._v("#")]),e._v(" 联系作者")]),e._v(" "),a("div",{attrs:{align:"center"}},[a("p",[e._v("\n        平凡世界，贵在坚持。\n    ")]),e._v(" "),a("img",{attrs:{src:e.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);s.default=t.exports}}]);