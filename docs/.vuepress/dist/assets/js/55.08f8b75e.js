(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{282:function(e,_,v){"use strict";v.r(_);var r=v(4),t=Object(r.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"字典树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字典树","aria-hidden":"true"}},[e._v("#")]),e._v(" 字典树")]),e._v(" "),v("h2",{attrs:{id:"前言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),v("p",[e._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),e._v(" "),v("h2",{attrs:{id:"内容"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[e._v("#")]),e._v(" 内容")]),e._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#%E4%B8%80%E3%80%81tire-%E6%A0%91"}},[e._v("Tire 树")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#%E4%BA%8C%E3%80%81trie-%E6%A0%91%E7%9A%84%E7%89%B9%E7%82%B9"}},[e._v("Trie 树的特点")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#%E4%B8%89%E3%80%81trie-%E6%A0%91%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C"}},[e._v("Trie 树的插入操作")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#%E5%9B%9B%E3%80%81trie-%E6%A0%91%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C"}},[e._v("Trie 树的查询操作")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#%E4%BA%94%E3%80%81trie-%E6%A0%91%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C"}},[e._v("Trie 树的删除操作")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#%E5%85%AD%E3%80%81%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0"}},[e._v("相关代码实现")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#%E4%B8%83%E3%80%81trie-%E6%A0%91%E7%9A%84%E5%BA%94%E7%94%A8"}},[e._v("Trie 树的应用")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#%E5%85%AB%E3%80%81trie-%E6%A0%91%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7"}},[e._v("Trie 树的局限性")])])]),e._v(" "),v("h3",{attrs:{id:"一、tire-树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、tire-树","aria-hidden":"true"}},[e._v("#")]),e._v(" 一、Tire 树")]),e._v(" "),v("blockquote",[v("p",[e._v("Trie 这个名字取自“retrieval”，检索，因为 Trie 可以只用一个前缀便可以在一部字典中找到想要的单词。")])]),e._v(" "),v("p",[e._v("Tire 树，也叫“字典树”。顾名思义，它是一个"),v("strong",[e._v("树形结构")]),e._v("。它是一种专门处理字符串切尔西的数据结构，用来解决在一组字符串集合中快速查找某个字符串的问题。")]),e._v(" "),v("p",[e._v("此外 Trie 树也称前缀树（因为某节点的后代存在共同的前缀，比如 pan 是 panda 的前缀）。")]),e._v(" "),v("p",[e._v("它的 key 都为字符串，能做到高效查询和插入，时间复杂度为 O(k)，k 为空符串长度，缺点是如果大量字符串没有共同前缀时很耗内存。")]),e._v(" "),v("p",[v("strong",[e._v("它的核心思想就是通过最大限度地减少无谓的字符串比较，舍不得查询效率，即用空间换时间，再利用共同前缀来提高查询效率。")])]),e._v(" "),v("h3",{attrs:{id:"二、trie-树的特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、trie-树的特点","aria-hidden":"true"}},[e._v("#")]),e._v(" 二、Trie 树的特点")]),e._v(" "),v("p",[e._v("假设有 5 个字符串，它们分别是：code，cook，five，file，fat。现在需要在里面多次查找某个字符串是否存在。如果每次查找，都是拿要查找字符串跟这 5 个字符串今次进行字符串匹配，那效率就比较低，有没有更高效的方法呢？")]),e._v(" "),v("p",[e._v("如果将这 5 个字符串组织成下图的结构，从肉眼上扫描过感官上是不是比查找起来会更加迅速。")]),e._v(" "),v("p",[v("img",{attrs:{src:"trie01.jpg",alt:"images"}})]),e._v(" "),v("p",[e._v("通过上图，可以发现 Trie 树的三个特点：")]),e._v(" "),v("ul",[v("li",[e._v("根节点不包含字符，除根节点外每一个节点都只包含一个字符")]),e._v(" "),v("li",[e._v("从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串")]),e._v(" "),v("li",[e._v("每个节点的所有子节点节点包含的字符都不相同")])]),e._v(" "),v("p",[e._v("通过动画理解 Trie 树构造的过程。在构造过程中的每一步，都相当于往 Trie 树中插入一个字符串。当所有字符串都插入完成之后，Trie 树就构造好了。")]),e._v(" "),v("p",[v("img",{attrs:{src:"trie02.gif",alt:"images"}})]),e._v(" "),v("h3",{attrs:{id:"三、trie-树的插入操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、trie-树的插入操作","aria-hidden":"true"}},[e._v("#")]),e._v(" 三、Trie 树的插入操作")]),e._v(" "),v("p",[v("img",{attrs:{src:"trie03.gif",alt:"images"}})]),e._v(" "),v("p",[e._v("Trie 树的插入操作很简单，其实就是将单词的每个字母逐一插入 Trie 树。插入前先看字母对应的节点是否存在，存在则共享该节点，不存在则创建对应的节点。比如要插入新单词"),v("code",[e._v("cook")]),e._v("，就有下面几步：")]),e._v(" "),v("ul",[v("li",[e._v("插入第一个字母"),v("code",[e._v("c")]),e._v("，发现"),v("code",[e._v("root")]),e._v("节点下方存在子节点"),v("code",[e._v("c")]),e._v("，则共享节点"),v("code",[e._v("c")])]),e._v(" "),v("li",[e._v("插入第二个字母"),v("code",[e._v("o")]),e._v("，发现"),v("code",[e._v("c")]),e._v("节点下方存在子节点"),v("code",[e._v("o")]),e._v("，则共享节点"),v("code",[e._v("o")])]),e._v(" "),v("li",[e._v("插入第三个字母"),v("code",[e._v("o")]),e._v("，发现"),v("code",[e._v("o")]),e._v("节点下方不存在子节点"),v("code",[e._v("o")]),e._v("，则创建子节点"),v("code",[e._v("o")])]),e._v(" "),v("li",[e._v("插入第四个字母"),v("code",[e._v("o")]),e._v("，发现"),v("code",[e._v("o")]),e._v("节点下方不存在子节点"),v("code",[e._v("k")]),e._v("，则创建子节点"),v("code",[e._v("k")])]),e._v(" "),v("li",[e._v("至此，单词"),v("code",[e._v("cook")]),e._v("中所有字母已被插入"),v("code",[e._v("Trie树")]),e._v("中，然后设置节点"),v("code",[e._v("k")]),e._v("中的标志位，标记路径"),v("code",[e._v("root")]),e._v("->"),v("code",[e._v("c")]),e._v("->"),v("code",[e._v("o")]),e._v("->"),v("code",[e._v("o")]),e._v("->"),v("code",[e._v("k")]),e._v("这条路径上所有节点的字符可以组成一个单词"),v("code",[e._v("cook")])])]),e._v(" "),v("h3",{attrs:{id:"四、trie-树的查询操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四、trie-树的查询操作","aria-hidden":"true"}},[e._v("#")]),e._v(" 四、Trie 树的查询操作")]),e._v(" "),v("p",[e._v("在 Trie 树中查找一个字符串的时候，比如查找字符串"),v("code",[e._v("code")]),e._v("，可以将要查找的字符串分割成单个的字符 c，o，d，e，然后从 Trie 树的根节点开始匹配。如图所示，绿色的路径就是在 Trie 树中匹配的路径。")]),e._v(" "),v("p",[v("img",{attrs:{src:"trie04.jpg",alt:"images"}})]),e._v(" "),v("p",[e._v("如果要查找的是字符串"),v("code",[e._v("cod")]),e._v("呢？还是可以用上面同样的方法，从根节点开始，沿着某条路径来切尔西，如图所示，绿色的路径，是字符串"),v("code",[e._v("cod")]),e._v("匹配的路径。但是，路径的最后一个节点 d 并不是橙色的，并不是单词标志位，所以"),v("code",[e._v("cod")]),e._v("字符不存在。也就是说，"),v("code",[e._v("cod")]),e._v("是某个字符串的前缀子串，但并不能完全匹配任何字符串。")]),e._v(" "),v("p",[v("img",{attrs:{src:"trie05.jpg",alt:"images"}})]),e._v(" "),v("h3",{attrs:{id:"五、trie-树的删除操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#五、trie-树的删除操作","aria-hidden":"true"}},[e._v("#")]),e._v(" 五、Trie 树的删除操作")]),e._v(" "),v("p",[e._v("Trie 树的删除操作与二叉树的删除操作有类似的地方，需要考虑删除的节点所处的位置，这里分三种情况进行分析：")]),e._v(" "),v("h4",{attrs:{id:"_5-1-删除整个单词（比如-hi）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-删除整个单词（比如-hi）","aria-hidden":"true"}},[e._v("#")]),e._v(" 5.1 删除整个单词（比如 hi）")]),e._v(" "),v("p",[v("img",{attrs:{src:"trie06.gif",alt:"images"}})]),e._v(" "),v("ul",[v("li",[e._v("从根节点开始查找第一个字符"),v("code",[e._v("h")])]),e._v(" "),v("li",[e._v("找到"),v("code",[e._v("h")]),e._v("子节点后，继续查找"),v("code",[e._v("h")]),e._v("的下一个子节点"),v("code",[e._v("i")])]),e._v(" "),v("li",[v("code",[e._v("i")]),e._v("是单词"),v("code",[e._v("hi")]),e._v("的标志位，将该标志位去掉")]),e._v(" "),v("li",[v("code",[e._v("i")]),e._v("节点是"),v("code",[e._v("hi")]),e._v("的叶子节点，将其删除")]),e._v(" "),v("li",[e._v("删除后发现"),v("code",[e._v("h")]),e._v("节点为叶子节点，并且不是单词标志位，也将其删除")]),e._v(" "),v("li",[e._v("这样就完成了"),v("code",[e._v("hi")]),e._v("单词的删除操作")])]),e._v(" "),v("h4",{attrs:{id:"_5-2-删除前缀单词（比如-cod）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-删除前缀单词（比如-cod）","aria-hidden":"true"}},[e._v("#")]),e._v(" 5.2 删除前缀单词（比如 cod）")]),e._v(" "),v("p",[v("img",{attrs:{src:"trie07.gif",alt:"images"}})]),e._v(" "),v("p",[e._v("这种方式删除比较简单。")]),e._v(" "),v("p",[e._v("只需要将"),v("code",[e._v("cod")]),e._v("单词整个字符串查找完后，"),v("code",[e._v("d")]),e._v("节点因为不是叶子节点，只需将其单词标志去掉即可。")]),e._v(" "),v("h4",{attrs:{id:"_6-3-删除分支单词（比如-cook）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-删除分支单词（比如-cook）","aria-hidden":"true"}},[e._v("#")]),e._v(" 6.3 删除分支单词（比如 cook）")]),e._v(" "),v("p",[v("img",{attrs:{src:"trie08.gif",alt:"images"}})]),e._v(" "),v("p",[e._v("与"),v("strong",[e._v("删除整个单词")]),e._v("情况类似，区别点在于删除到"),v("code",[e._v("cook")]),e._v("的第一个"),v("code",[e._v("o")]),e._v("时，该节点为非叶子节点，停止删除，这样就完成"),v("code",[e._v("cook")]),e._v("字符串的删除操作。")]),e._v(" "),v("h3",{attrs:{id:"六、相关代码实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#六、相关代码实现","aria-hidden":"true"}},[e._v("#")]),e._v(" 六、相关代码实现")]),e._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br")])]),v("h3",{attrs:{id:"七、trie-树的应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#七、trie-树的应用","aria-hidden":"true"}},[e._v("#")]),e._v(" 七、Trie 树的应用")]),e._v(" "),v("p",[e._v("事实上 Trie 树，在日常生活中的使用随处可见，比如这个：")]),e._v(" "),v("p",[e._v("具体来说就是经常用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。")]),e._v(" "),v("h4",{attrs:{id:"_7-1-前缀匹配"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-前缀匹配","aria-hidden":"true"}},[e._v("#")]),e._v(" 7.1 前缀匹配")]),e._v(" "),v("p",[e._v("例如：找出一个字符串集合中所有以"),v("code",[e._v("五分钟")]),e._v("开头的字符串。我们只需要用所有字符串构造一个 trie 树，然后输出以 五->分->钟 开头的路径上的关键字即可。")]),e._v(" "),v("p",[e._v("trie 树前缀切尔西常用于搜索提示。如当输入一个网址，可以自动搜索出融通的选择。当没有完全匹配搜索结果，可以返回前缀相似的可能。")]),e._v(" "),v("p",[v("img",{attrs:{src:"trie09.jpg",alt:"images"}})]),e._v(" "),v("h4",{attrs:{id:"_7-2-字符串检索"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-字符串检索","aria-hidden":"true"}},[e._v("#")]),e._v(" 7.2 字符串检索")]),e._v(" "),v("p",[e._v("给出 N 个单词组成的熟词表，以及一篇使用小写英文书写的文章，按最早出现的顺序写出所有不丰熟词表中的生词。")]),e._v(" "),v("p",[e._v("检索/查询功能是 Trie 树最原始的功能。给定一级字符串，查找某个字符串是否出现过，思路就是从根节点开始一个一个字符进行比较。")]),e._v(" "),v("ul",[v("li",[e._v("如果沿路比较，发现不同的字符，则表示该字符串在集合中不存在。")]),e._v(" "),v("li",[e._v("如果所有的字符全部比较完并且全部相同，还需判断最后一个节点的标志位（标记该节点是否代表一个关键字）。")])]),e._v(" "),v("h3",{attrs:{id:"八、trie-树的局限性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#八、trie-树的局限性","aria-hidden":"true"}},[e._v("#")]),e._v(" 八、Trie 树的局限性")]),e._v(" "),v("p",[e._v("如前文所讲，Trie 的核心思想是空间换时间，利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。")]),e._v(" "),v("p",[e._v("假设字符的种数有"),v("code",[e._v("m")]),e._v("个，有若干个长度为"),v("code",[e._v("n")]),e._v("的字符串构成了一个"),v("code",[e._v("Trie")]),e._v("树 ，则每个节点的出度为"),v("code",[e._v("m")]),e._v("（即每个节点的可能子节点数量为 m），Trie 树 的高度为"),v("code",[e._v("n")]),e._v("。很明显我们浪费了大量的空间来存储字符，此时 Trie 树的最坏空间复杂度为 "),v("code",[e._v("O(m^n)")]),e._v("。也正由于每个节点的出度为 "),v("code",[e._v("m")]),e._v("，所以我们能够沿着树的一个个分支高效的向下逐个字符的查询，而不是遍历所有的字符串来查询，此时 Trie 树的最坏时间复杂度为 "),v("code",[e._v("O(n)")]),e._v("。")]),e._v(" "),v("p",[e._v("这正是空间换时间的体现，也是利用公共前缀降低查询时间开销的体现。")]),e._v(" "),v("h3",{attrs:{id:"参考资料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://mp.weixin.qq.com/s/Y5_r4C5a9gU0FDtqXD9bkQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("看动画轻松理解「Trie 树」"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://time.geekbang.org/column/article/72414",target:"_blank",rel:"noopener noreferrer"}},[e._v("Trie 树：如何实现搜索引擎的搜索关键词提示功能？"),v("OutboundLink")],1)])]),e._v(" "),v("h2",{attrs:{id:"联系作者"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[e._v("#")]),e._v(" 联系作者")]),e._v(" "),v("div",{attrs:{align:"center"}},[v("p",[e._v("\n        平凡世界，贵在坚持。\n    ")]),e._v(" "),v("img",{attrs:{src:e.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);_.default=t.exports}}]);