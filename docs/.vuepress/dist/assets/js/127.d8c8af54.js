(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{254:function(s,a,e){"use strict";e.r(a);var n=e(4),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"事件循环和异步编程的崛起"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件循环和异步编程的崛起","aria-hidden":"true"}},[s._v("#")]),s._v(" 事件循环和异步编程的崛起")]),s._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),e("p",[s._v("在单线程环境中编程的缺陷以及如何解决这些缺陷来构建健壮的 JavaScript UI。按照惯例，在本文的最后，分享 5 个如何使用 async/ wait 编写更简洁代码的技巧。")]),s._v(" "),e("h2",{attrs:{id:"内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[s._v("#")]),s._v(" 内容")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%98%AF%E4%B8%80%E4%B8%AA%E9%99%90%E5%88%B6%EF%BC%9F"}},[s._v("为什么单线程是一个限制？")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E4%BA%8C%E3%80%81javascript-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E5%BB%BA%E5%9D%97"}},[s._v("JavaScript 程序的构建块")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E8%A7%A3%E6%9E%90%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF"}},[s._v("解析事件循环")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%9B%9B%E3%80%81settimeout-%E2%80%A6-%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84"}},[s._v("setTimeout(…) 是怎么工作的")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E4%BA%94%E3%80%81es6-%E7%9A%84%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E6%98%AF%E4%BB%80%E4%B9%88"}},[s._v("ES6 的任务队列是什么?")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%AD%E3%80%81%E5%9B%9E%E8%B0%83"}},[s._v("回调")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E4%B8%83%E3%80%81%E5%B5%8C%E5%A5%97%E5%9B%9E%E8%B0%83"}},[s._v("嵌套回调")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%AB%E3%80%81promise"}},[s._v("Promise")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E4%B9%9D%E3%80%81promise-value"}},[s._v("Promise Value")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8D%81%E3%80%81%E4%BD%BF%E7%94%A8-promise-%E8%BF%98%E6%98%AF%E4%B8%8D%E7%94%A8"}},[s._v("使用 Promise 还是不用？")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8D%81%E4%B8%80%E3%80%81%E5%90%9E%E6%8E%89%E9%94%99%E8%AF%AF%E6%88%96%E5%BC%82%E5%B8%B8"}},[s._v("吞掉错误或异常")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8D%81%E4%BA%8C%E3%80%81es8-%E4%B8%AD%E6%94%B9%E8%BF%9B%E4%BA%86%E4%BB%80%E4%B9%88-asyncawait-%E5%BC%82%E6%AD%A5%E7%AD%89%E5%BE%85"}},[s._v("处理未捕获异常")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8D%81%E4%B8%89%E3%80%81es8-%E4%B8%AD%E6%94%B9%E8%BF%9B%E4%BA%86%E4%BB%80%E4%B9%88-asyncawait-%E5%BC%82%E6%AD%A5%E7%AD%89%E5%BE%85"}},[s._v("ES8 中改进了什么 ?Async/await （异步/等待）")])]),s._v(" "),e("li",[e("a",{attrs:{href:"(#%E5%8D%81%E5%9B%9B%E3%80%81%E7%BC%96%E5%86%99%E9%AB%98%E5%BA%A6%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7%E9%9D%9E%E6%98%93%E7%A2%8E%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81%E7%9A%84-5-%E4%B8%AA%E6%8A%80%E5%B7%A7)"}},[s._v("编写高度可维护性、非易碎异步代码的 5 个技巧")])])]),s._v(" "),e("h3",{attrs:{id:"一、为什么单线程是一个限制？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、为什么单线程是一个限制？","aria-hidden":"true"}},[s._v("#")]),s._v(" 一、为什么单线程是一个限制？")]),s._v(" "),e("p",[s._v("当调用堆栈中有函数调用需要花费大量时间来处理时会发生什么？")]),s._v(" "),e("p",[s._v("例如，假设在浏览器中运行一个复杂的图像转换算法。")]),s._v(" "),e("p",[s._v("当调用堆栈有函数要执行时，浏览器不能做任何其他事情——它被阻塞了。这意味着浏览器不能渲染，不能运行任何其他代码，只是卡住了。那么你的应用 UI 界面就卡住了，用户体验就不那么好了。")]),s._v(" "),e("p",[s._v("在某些情况下，这可能不是主要的问题。还有一个更大的问题是一旦你的浏览器开始处理调用堆栈中的太多任务，它可能会在很长一段时间内停止响应。这时，很多浏览器会抛出一个错误，提示是否终止页面：")]),s._v(" "),e("p",[e("img",{attrs:{src:"eventloop11.png",alt:""}})]),s._v(" "),e("h3",{attrs:{id:"二、javascript-程序的构建块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、javascript-程序的构建块","aria-hidden":"true"}},[s._v("#")]),s._v(" 二、JavaScript 程序的构建块")]),s._v(" "),e("p",[s._v("你可能在单个.js 文件中编写 Javascript 应用程序，但可以肯定的是，你的程序由几个块组成，其中只有一个正在执行，其余的将在稍后执行。最常见的单元是函数。")]),s._v(" "),e("p",[s._v("大多数刚接触 JavaScript 的开发人员似乎都有这样的问题，就是认为所有函数都是同步完成，没有考虑异步的情况。如下例子：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// ajax 由某个库提供\nvar response = ajax('https://example.com/api');\nconsole.log(response);\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("你可能知道标准 Ajax 请求不是同步的，这说明在代码执行时"),e("code",[s._v("Ajax(...)")]),s._v("函数还没有返回任何值来分配给变量"),e("code",[s._v("response")]),s._v("。")]),s._v(" "),e("p",[s._v("一种等待异步函数返回的结果简单的方式就是"),e("strong",[s._v("回调函数")]),s._v("：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("ajax('https://expamle.com/api',function(response){\n    console.log(response);  // 'response' 现在可用\n})\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("注意实际上可以设置同步 Ajax 请求，但记录不要那样做。如果设置同步 Ajax 请求，应用程序的界面将被阻塞——用户将无法单击、输入数据、导航或滚动。这将阻止任何用户交互，这是一种可怕的做法。")]),s._v(" "),e("p",[s._v("以下是同步 Ajax 地，但请千万不要这样做：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("jQuery.ajax({\n    url:'https://api.example.com/endpoint',\n    success:function(response){\n        //  处理一些事情\n    },\n    async:false // 这是一个可怕的想法\n});\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("这里使用 Ajax 请求作为示例，你可以让任何代码块异步执行。")]),s._v(" "),e("p",[s._v("这可以通过 setTimerout(callback,milliseconds)函数来完成。setTimeout 函数的作用是设置一个架设函数 milliseconds 后执行，如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function first(){\n\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("输出：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("first\nthird\nsecond\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h3",{attrs:{id:"三、解析事件循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、解析事件循环","aria-hidden":"true"}},[s._v("#")]),s._v(" 三、解析事件循环")]),s._v(" "),e("p",[s._v("这里从一个有点奇怪的声明开始——尽管允许异步 Javascript 代码（就像上例讨论的 setTimeout）,但在 ES6 之前，JavaScript 本身实际上从来没有任何内置异步的概念，JavaScript 引擎在任何给定时刻只执行一个块。")]),s._v(" "),e("p",[s._v("那么，是谁告诉 JS 引擎执行程序的代码块呢？实际上，JS 引擎并不是单独运行的——它是在一个宿主环境中运行的，对于大多数开发人员来说，宿主环境就是典型的 web 浏览器或 Node.js。实际上，现在 JavaScript 被嵌入到各种各样的设备中，从机器人到灯泡，每个设备代表 JS 引擎的不同类型的托管环境。")]),s._v(" "),e("p",[s._v("所有环境中的共同点是一个称为"),e("strong",[s._v("事件循环")]),s._v("的内置机制，它处理程序的多个块在一段时间内通过调用"),e("code",[s._v("JS")]),s._v("引擎的执行。")]),s._v(" "),e("p",[s._v("这意味着 JS 引擎只是任意 JS 代码的按需执行环境，是宿主环境处理事件运行及结果。")]),s._v(" "),e("p",[s._v("例如，当 JavaScript 程序发出 Ajax 请求从服务器获取一些数据时，在函数（“回调”）中设置“response”代码，JS 引擎告诉宿主环境：“我现在要推迟执行，但当完成那个网络请求时，会返回一些数据，请回调这个函数并给数据传给它”。")]),s._v(" "),e("p",[s._v("然后浏览器将侦听到的响应，当监听到网络请求返回内容时，浏览器通过将回调函数插入事件循环来调度要执行的回调函数。以下是示意图：")]),s._v(" "),e("p",[e("img",{attrs:{src:"eventloop05.jpg",alt:""}})]),s._v(" "),e("p",[s._v("这些 Web api 是什么？从本质上说，它们是无法访问的线程，只能调用它们。它们是浏览器的迸发部分。如果你是一个 nodejs 开发者，这些就是 c++的 Api。")]),s._v(" "),e("p",[s._v("这样的迭代在事件循环中称为**(tick)标记**，每个事件只是一个函数回调。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("console.log('Hi');\n\nsetTimeout(function cb1(){\n    console.log('cb1');\n},5000);\n\nconsole.log('Bye');\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("让我们“执行”这段代码，看看会发生什么：")]),s._v(" "),e("ol",[e("li",[s._v("初始化状态都为空，浏览器控制台是空的，调用堆栈也是空的")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run14.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("code",[s._v("console.log('Hi')")]),s._v("添加到调用堆栈中")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run15.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[s._v("执行"),e("code",[s._v("console.log('Hi')")])])]),s._v(" "),e("p",[e("img",{attrs:{src:"run16.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[e("code",[s._v("console.log('Hi')")]),s._v("从调用堆栈中移除")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run17.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[s._v("setTimeout(function cb1(){...}) 添加到调用堆栈")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run18.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[s._v("setTimeout(function cb1(){...})执行，浏览器创建一个计时器计时，这个作为 Web api 的一部分。")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run19.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"7"}},[e("li",[s._v("setTimeout(function cb1(){...})本身执行完成，并从调用堆栈中删除。")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run20.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"8"}},[e("li",[s._v("console.log('Bye')添加到调用堆栈")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run21.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"9"}},[e("li",[s._v("执行 console.log('Bye')")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run22.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"10"}},[e("li",[s._v("console.log('Bye')从调用堆栈移除")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run23.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"11"}},[e("li",[s._v("至少在 5 秒之后，计时器完成并将"),e("code",[s._v("cb1")]),s._v("回调堆到回调队列。")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run24.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"12"}},[e("li",[s._v("事件循环从回调队列中获取 cb1 并将其推入调用堆栈。")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run25.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"13"}},[e("li",[s._v("执行"),e("code",[s._v("cb1")]),s._v("并将"),e("code",[s._v("console.log('cb1')")]),s._v("添加到调用堆栈。")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run26.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"14"}},[e("li",[s._v("执行"),e("code",[s._v("console.log('cb1')")])])]),s._v(" "),e("p",[e("img",{attrs:{src:"run27.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"15"}},[e("li",[e("code",[s._v("console.log('cb1')")]),s._v("从调用堆栈中移除")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run28.png",alt:""}})]),s._v(" "),e("ol",{attrs:{start:"16"}},[e("li",[e("code",[s._v("cb1")]),s._v("从调用堆栈中移除")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run29.png",alt:""}})]),s._v(" "),e("p",[e("strong",[s._v("快速回顾")])]),s._v(" "),e("p",[e("img",{attrs:{src:"run30.gif",alt:""}})]),s._v(" "),e("p",[s._v("值得注意的是，"),e("code",[s._v("ES6")]),s._v("指定了事件循环应该如何，这意味着在技术上它属于 JS 引擎的职责范围，不再仅仅扮演宿主环境的角色。这种变化的一个主要原因是"),e("code",[s._v("ES6")]),s._v("中引入了"),e("code",[s._v("Promises")]),s._v("，因为"),e("code",[s._v("ES6")]),s._v("需要对事件循环队列上的调度操作进行直接、细度的控制。")]),s._v(" "),e("h3",{attrs:{id:"四、settimeout-…-是怎么工作的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、settimeout-…-是怎么工作的","aria-hidden":"true"}},[s._v("#")]),s._v(" 四、setTimeout(…) 是怎么工作的")]),s._v(" "),e("p",[s._v("需要注意的是，setTimeout(...)不会自动将架设放到事件循环队列中。它设置了一个计时器。当计时器过期时，环境将回调放到事件循环中，以便")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("setTimeout(myCallback,1000);\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("这并不意味着"),e("code",[s._v("myCallback")]),s._v("将在 1000 毫秒后就执行，而是在 1000 毫秒后，"),e("code",[s._v("myCallback")]),s._v("被添加到队列中。但是，如果队列有其他事件在前面添加回调刚必须等待前后的执行前后的执行后在执行"),e("code",[s._v("myCallback")]),s._v("。")]),s._v(" "),e("p",[s._v("有不少的文章和教程上开始使用异步 Javascript")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("console.log('Hi');\nsetTimeout(function(){\n    console.log('callback');\n},0);\nconsole.log('Bye');\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("虽然等待时间被设置为 0ms，但在浏览器控制台的结果如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Hi\nBye\ncallback\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"五、es6-的任务队列是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、es6-的任务队列是什么","aria-hidden":"true"}},[s._v("#")]),s._v(" 五、ES6 的任务队列是什么?")]),s._v(" "),e("p",[e("code",[s._v("ES6")]),s._v('中引入了一个名为"任务队列"的概念。它是事件循环队列上的一个层。最为常见在'),e("code",[s._v("Promise")]),s._v("处理的异步方式。")]),s._v(" "),e("p",[s._v("现在只讨论这个概念，以便在讨论带有"),e("code",[s._v("Promises")]),s._v("的异步行为时，能够了解 Promises 是如何调度和处理。")]),s._v(" "),e("p",[s._v("想你一下：任务队列是一个附加到事件循环队列中每个标记末尾的队列。某些异步操作可能发生在事件循环的一个标记期间，不会导致一个全新的事件被添加到事件循环队列中。而是将一个项目(即任务)添加到当前标记的任务队列的末尾。")]),s._v(" "),e("p",[s._v("这意味着可以放心添加另一个功能以便稍后执行，它将在其他任何事情之前立即执行。")]),s._v(" "),e("p",[s._v("任务还可能创建更多任务添加到同一队列的末尾。理论上，任务“循环”（不断添加其他任务等等）可以无限运行，从而使程序无法获得转移到下一个事件循环票房的必要资源。从概念上讲，这类似于在代码中表示长时间运行或无限循环(如 while(true)..)。")]),s._v(" "),e("p",[s._v('任务有点像 setTimeout(callback,0) "hack"，但其实现方式是引入一个定义更明确、更有保证的顺序：稍后，但越快越好。')]),s._v(" "),e("h3",{attrs:{id:"六、回调"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六、回调","aria-hidden":"true"}},[s._v("#")]),s._v(" 六、回调")]),s._v(" "),e("p",[s._v("正如你已经知道的，回调是到目前为止"),e("code",[s._v("JavaScript")]),s._v("程序中表达和管理异步最常见的方法。实际上，回调是"),e("code",[s._v("JavaScript")]),s._v("语言中最基本的异步模式。无数的"),e("code",[s._v("JS")]),s._v("程序，甚至是非常复杂的程序，除了一些基本都是在回调异步基础上编写的。")]),s._v(" "),e("p",[s._v("然而回调方式还是有一些缺点，许多开发人员都在试图找到更好的异步模式。但是，如果不了解底层的内容，就不可能有效地使用任何抽象出来的异步模式。")]),s._v(" "),e("p",[s._v("在下一章中，我们将深入探讨这些抽象，以说明为什么更复杂的异步模式(将在后续文章中讨论)是必要的，甚至是值得推荐的。")]),s._v(" "),e("h3",{attrs:{id:"七、嵌套回调"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七、嵌套回调","aria-hidden":"true"}},[s._v("#")]),s._v(" 七、嵌套回调")]),s._v(" "),e("p",[s._v("请看以下代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("listen('click',function(e){\n    setTimeout(function(){\n        ajax('https://api.example.com/endpoint',function(text){\n            if(text == 'hello'){\n                doSomething();\n            }else if(text == 'world'){\n                doSomethingElse();\n            }\n        })\n    },500);\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("我们有一个由三个函数组成的链嵌套在一起，每个函数表示异步系列中的一个步骤。")]),s._v(" "),e("p",[s._v("这种代码通常被称为“回调地狱”。但是“回调地狱”实际上与嵌套/缩进几乎没有任何关系，这是一个更深层次的问题。")]),s._v(" "),e("p",[s._v("首先，我们等待“单击”事件，然后等待计时器触发，然后等待Ajax响应返回，此时可能会再次重复所有操作。")]),s._v(" "),e("p",[s._v("乍一看，这段代码似乎可以将其异步性自然地对应到以下顺序步骤：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("listen('click',function(e){\n    // ..\n});\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("然后")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("setTimeout(function(){\n    // ..\n},500);\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("接着：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("ajax('https://api.example.com/endpoint',function(text){\n    // ..\n});\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("最后：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if(text == 'hello'){\n    doSomething();\n}else if(text == 'world'){\n    doSomethingElse();\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("因此，这种连续的方式来表示异步代码似乎更自然，不是吗？一定有这样的方法，对吧？")]),s._v(" "),e("h3",{attrs:{id:"八、promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八、promise","aria-hidden":"true"}},[s._v("#")]),s._v(" 八、Promise")]),s._v(" "),e("p",[s._v("请看下面的代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var x = 1;\nvar y = 2;\nconsole.log(x+y);\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("这非常简单它对"),e("code",[s._v("x")]),s._v("和"),e("code",[s._v("y")]),s._v("的值进行求和，并将其打印到控制台。但是，如果"),e("code",[s._v("x")]),s._v("或"),e("code",[s._v("y")]),s._v("的值丢失了，仍然需要求值，需要怎么办？")]),s._v(" "),e("p",[s._v("例如，需要从服务器取回"),e("code",[s._v("x")]),s._v("和"),e("code",[s._v("y")]),s._v("的值，然后才能在表达式中使用它们。假设我们有一个函数"),e("code",[s._v("loadX")]),s._v("和"),e("code",[s._v("loadY")]),s._v("，它们分别从服务器"),e("code",[s._v("x")]),s._v("和"),e("code",[s._v("y")]),s._v("的值。然后，一旦"),e("code",[s._v("x")]),s._v("和"),e("code",[s._v("y")]),s._v("都被加载，假设我们有一个函数"),e("code",[s._v("sum")]),s._v("，它对"),e("code",[s._v("x")]),s._v("和"),e("code",[s._v("y")]),s._v("的值进行求和。")]),s._v(" "),e("p",[e("strong",[s._v("它可能看起来像这样（很丑，不是吗？）")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function sum(getX,getY,callback){\n    var x,y;\n    getX(function(result){\n        x = result;\n        if(y!==undefined){\n            callback(x+y);\n        }\n    });\n    getY(function(result){\n        y = result;\n        if(x !==undefined){\n            callback(x + y);\n        }\n    });\n}\n// 获取`x`值的同步或异步函数\nfunction fetchX(){\n    // ...\n}\n\n//获取'y'值的同步或异步函数\nfunction fetchY(){\n    // ..\n}\nsum(fetchX,fetchY,function(result){\n    console.log(result)\n});\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("p",[s._v("这里有一些非常重要的事情——在这个代码片段中，我们将x和y作为异步获取的值，并且执行了一个函数sum(...)(从外部)，它不关心x和y，也不关心它们是否立即可用。")]),s._v(" "),e("p",[s._v("当然，这种基于回调的粗略方法还有很多不足之处。这只是一个我们不必判断对于异步请求的值的处理方式一个小步骤而已。")]),s._v(" "),e("h3",{attrs:{id:"九、promise-value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#九、promise-value","aria-hidden":"true"}},[s._v("#")]),s._v(" 九、Promise Value")]),s._v(" "),e("p",[s._v("用Promise来重写上例：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function sum(xPromise,yPromise){\n    // \"Promise.all([..])\" 参数为一个Promise数组，并返回一个新的Promise.\n    // 该 Promise 将等待数组中所有的Promise完成\n    return Promise.all([xPromise,yPromise]).then(function(values){\n        // \"值\"是来自先前的解析的Promise的参数数组\n        return values[0] + values[1];\n    })\n}\n\n// 'fetchX()'和'fetchY()'返回各自值的Promise\nsum(fetchX(),fetchY())\n\n// 我们得到两个数之和的Promise，然后等待那这个的Promise解析\n.then(function(sum){\n    console.log(sum);\n});\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("在这个代码片段中有两层Promise。")]),s._v(" "),e("p",[e("code",[s._v("fetchX")]),s._v("和"),e("code",[s._v("fetchY")]),s._v("先直接调用，返回一个promise，传给"),e("code",[s._v("sum")]),s._v("。"),e("code",[s._v("sum")]),s._v("创建并返回一个Promise,通过调用then等待Promise，完成后，sum已经准备好了(resolve)，将会打印出来。")]),s._v(" "),e("p",[s._v("第二层是"),e("code",[s._v("sum(..)")]),s._v("创建的Promise(通过Promise.all([...]))然后返回Promise，通过调用then(...)来等待。当"),e("code",[s._v("sum(...)")]),s._v("操作完成时，sum传入的两个Promise都执行完后，可以打印出来了。这里隐藏了在"),e("code",[s._v("sum(..)")]),s._v("中等待"),e("code",[s._v("x")]),s._v("和"),e("code",[s._v("y")]),s._v("未来值的逻辑。")]),s._v(" "),e("p",[s._v("**注意：**在sum(...)内，Promise.all([...])调用创建一个promise(等待promiseX和promiseY解析)。然后链式调用.then(...)方法里再的创建了另一个Promise，然后把返回的x和y(values[0]+values[1])进行求和并返回。")]),s._v(" "),e("p",[s._v("因此，我们在sum(...)末尾调用then(...)方法——实际上是返回的第二个Promise上运行，而不是由Promise.all([...])创建Promise。此外，虽然没有在第二个Promise结束时再调用then方法，其实这里也创建一个Promise。")]),s._v(" "),e("p",[s._v("Promise.then(...)实际上可以使用两个函数，第一个函数用于执行成功的操作，第二个函数用于处理失败的操作；")]),s._v(" "),e("p",[s._v("如果在获取"),e("code",[s._v("x")]),s._v("或"),e("code",[s._v("y")]),s._v("时出现错误，或者在添加过程中出现某种失败，"),e("code",[s._v("sum(...)")]),s._v("返回的Promise将被拒绝，传递给then(...)的第二个回调错误处理程序将从Promise接收失败的信息。")]),s._v(" "),e("p",[s._v("从外部看，由于Promise封装了依赖于时间的状态（等待底层值的完成或拒绝，Promise本身是与时间无关的），它可以按照可预测的方式组成，不需要开发者关心时序或底层的结果。一旦Promise决议，此刻它就成为了外部不可变的值。")]),s._v(" "),e("p",[e("strong",[s._v("可链接调用Promise真的很有用：")])]),s._v(" "),e("p",[s._v("创建一个延迟2000ms内完成的Promise，然后我们从第一个then(...)回调中返回，这会导致第二个then(..)等待2000ms")]),s._v(" "),e("blockquote",[e("p",[s._v("注意：因为Promise一旦被解析，它在外部是不可变的，所以现在可以安全地将该值传递给任何一方，因为它不能被意外地或恶意地修改，这一点在多方遵守承诺的决议时尤其正确。一方不可能影响另一方遵守承诺决议的能力，不变性听起来像一个学术话题，但它实际上是承诺设计最基本和最重要的方面之一，不应该被随意忽略。")])]),s._v(" "),e("h3",{attrs:{id:"十、使用-promise-还是不用？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十、使用-promise-还是不用？","aria-hidden":"true"}},[s._v("#")]),s._v(" 十、使用 Promise 还是不用？")]),s._v(" "),e("p",[s._v("关于Promise的一个重要细节是要确定某个值是否是一个实际的Promise。换句话说，它是否具有像Promise一样行为？：")]),s._v(" "),e("p",[s._v("我们知道Promise是由"),e("code",[s._v("new Promise(...)")]),s._v("语法构造的，你可能认为"),e("code",[s._v("p instanceof Promise")]),s._v("是一个足够可以判断的类型，嗯，不完全是。")]),s._v(" "),e("p",[s._v("这主要是因为可以从另一个浏览器窗口(例如iframe)接收Promise值，而该窗口或框架具有自己的Promise值，与当前窗口或框架中的Promise值不同，所以该检查将无法识别Promise实例。")]),s._v(" "),e("p",[s._v("此外，库或框架可以选择性的封装自己的Promise，而不使用原生ES6的Promise来实现。事实上，很可能在老浏览器的库中没有Promise。")]),s._v(" "),e("h3",{attrs:{id:"十一、吞掉错误或异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十一、吞掉错误或异常","aria-hidden":"true"}},[s._v("#")]),s._v(" 十一、吞掉错误或异常")]),s._v(" "),e("p",[s._v("如果在Promise创建中，出现了一个javascript一场错误(TypeError或者ReferenceError)，这个异常会被捕捉，并且使用这个promise被拒绝。")]),s._v(" "),e("p",[s._v("但是，如果在调用then(...)方法中出现了JS异常错误，那么会发生什么情况呢？即使它不会丢失，你可能会发现它们的处理方式有点令人吃惊，直到你控得更深一点：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var p = new Promise(function(resolve,reject){\n    resolve(374);\n})\n\np.then(function fulfilled(message){\n    foo.bar();  // foo没有被定义，这里抛出错误\n    console.log(message);   // 不会被输出\n},function rejected(){\n    // 不会被执行\n});\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("看起来"),e("code",[s._v("foo.bar()")]),s._v("中的异常确实被吞噬了，不过它不是。然而还有一些更深层次的问题，我们没有注意到。p.then(...)调用本身返回另一个Promise，该Promise将被TypeError异常拒绝。")]),s._v(" "),e("h3",{attrs:{id:"十二、处理未捕获异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十二、处理未捕获异常","aria-hidden":"true"}},[s._v("#")]),s._v(" 十二、处理未捕获异常")]),s._v(" "),e("p",[s._v("许多人会说，还有其他更好的方法。")]),s._v(" "),e("p",[s._v("一个常见的建议是，Promise应该添加一个"),e("code",[s._v("done(...)")]),s._v("，这实际上是将Promise链标记为"),e("code",[s._v("done")]),s._v("。done(...)不会创建并返回Promise，因此传递给done(..)的回调显然不会将问题报告给不存在的链接Promise。")]),s._v(" "),e("p",[s._v("Promise对象的回调链，不管以then方法或catch方法结尾，要是最后一个方法招聘错误，都有可能无法捕捉到(因为Promise内部的错误不会冒泡到全局)。因此，我们可以提供一个done方法，总是处于回调链的尾端，保证抛出任何可能出现的错误。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var p = Promise.resolve(374);\n\np.then(function fulfilled(msg){\n    console.log(msg.toLowerCase());\n}).done(null,function(){\n    // 如果在这里引起异常，它将被全局抛出\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h3",{attrs:{id:"十三、es8-中改进了什么-async-await-（异步-等待）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十三、es8-中改进了什么-async-await-（异步-等待）","aria-hidden":"true"}},[s._v("#")]),s._v(" 十三、ES8 中改进了什么 ?Async/await （异步/等待）")]),s._v(" "),e("p",[s._v("JavaScript ES8引入了"),e("code",[s._v("async/await")]),s._v("，这使得使用Promise的工作更容易。这里将简要介绍async/await提供的可能性以及如何利用它们编写异步代码。")]),s._v(" "),e("p",[s._v("使用async声明异步函数。这个函数返回一个"),e("code",[s._v("AsyncFunction")]),s._v("对象。AsyncFunction对象表示该函数中包含的代码异步函数。")]),s._v(" "),e("p",[s._v("调用使用async声明函数时，它返回一个Promise。当这个函数返回一个值时，这个值只是一个普通值而已，这个函数内部将自动创建一个承诺，并使用函数的返回的值进行解析。当这个函数招聘异常时，Promise将被抛出的值拒绝。")]),s._v(" "),e("p",[s._v("使用async声明函数时可以包含一个await符号，await暂停这个函数的执行并等待传递的Promise的解析完成，然后恢复这个函数的执行并返回解析后的值。")]),s._v(" "),e("blockquote",[e("p",[s._v("async/await的目的是简体使用承诺的行为")])]),s._v(" "),e("p",[s._v("让看看下面的例子：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function getNumber1(){\n    return Promise.resolve('374');\n}\n\n// 这个函数与geNumber1相同\nasync function getNumber2(){\n    return 374;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("类似地，抛出异常的函数等价于返回被拒绝的Promise的函数：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function f1(){\n    return Promise.reject('Some error');\n}\n\nasync function f2(){\n    throw 'Some error';\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("code",[s._v("await")]),s._v("关键字只能在异步函数中使用，并允许同步等待Promise。如果在async函数之外使用Promise，仍然需要使用then回调：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("async function loadData(){\n    // 'rp' is a request-promise function\n    var promise1 = rp('https://api.example.com/endpoint1');\n    var promise2 = rp('https://api.example.com/endpoint2');\n\n    // 目前，这两个请求都是同时触发的，现在必须等待它们完成\n    var response1 = await promise1;\n    var response2 = await promise2;\n    return reponse1 + ' ' + response2;\n}\n// 因为不再处于“异步函数”中，必须使用“then”\nloadData().then(()=>console.log('Done'));\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("还可以使用“异步函数表达式”定义异步函数。异步函数表达式与异步函数语句非常相似，语法也几乎相同。异步函数表达式和异步函数语句之间的主要区别是函数名，可以异步函数表达式中活力函数名来创建匿名函数。异步函数表达式可以用作生命(立即调用的函数表达式)，一旦定义它就会运行。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var loadData = async function(){\n    // 'rp' is a request-promise function.\n    var promise1 = rp('https://api.examlpe.com/endpoint1');\n    var promise2 = rp('https://api.examlpe.com/endpoint2);\n\n    // Currently,both requests are fired, concurrently and now we`ll have to wait for them to finish\n    var response1 = await promise1;\n    var response2 = await promise2;\n    return reponse1 + ' ' + response2;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("更重要的是，在所有主流的浏览器都支持async/await:")]),s._v(" "),e("p",[e("img",{attrs:{src:"run30.png",alt:""}})]),s._v(" "),e("p",[s._v("最后，重要的是不盲目选择编写异步代码的“最新”方法。理解异步JavaScript的内部结构非常重要，了解为什么异步JavaScript如此关键，并深入理解所选择的方法的内部结构。与编程中的其他方法一样，每种方法都有优点和缺点。")]),s._v(" "),e("h3",{attrs:{id:"十四、编写高度可维护性、非易碎异步代码的-5-个技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十四、编写高度可维护性、非易碎异步代码的-5-个技巧","aria-hidden":"true"}},[s._v("#")]),s._v(" 十四、编写高度可维护性、非易碎异步代码的 5 个技巧")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#141-%E7%AE%80%E4%BB%8B%E4%BB%A3%E7%A0%81"}},[s._v("简介代码")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#142-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86"}},[s._v("错误处理")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#143-%E6%9D%A1%E4%BB%B6"}},[s._v("条件")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#144-%E5%A0%86%E6%A0%88%E5%B8%A7"}},[s._v("堆栈帧")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#145-%E8%B0%83%E8%AF%95"}},[s._v("调试")])])]),s._v(" "),e("h4",{attrs:{id:"_14-1-简介代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-简介代码","aria-hidden":"true"}},[s._v("#")]),s._v(" 14.1 简介代码")]),s._v(" "),e("p",[s._v("使用 async/await 可以编写更少的代码。每次使用 async/await 时，都会路过一些不必要的步骤：使用 then，创建一个匿名函数来处理响应，例如：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// rp是一个请求Promise函数。\nrp('https://api.example.com/endpoint1').then(function(data){\n\n});\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("和：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// `rp` is a request-promise function.\n\nvar response = await rp(‘https://api.example.com/endpoint1');\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h4",{attrs:{id:"_14-2-错误处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-2-错误处理","aria-hidden":"true"}},[s._v("#")]),s._v(" 14.2 错误处理")]),s._v(" "),e("p",[s._v("Async/wait 可以使用相同的代码结构（众所周知的 try/catch 语句）处理同步和异步错误。看看它是如何与 Promise 结合的")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function loadData(){\n    try{\n        getJSON().then(function(response){\n            var parsed = JSON.parse(response);\n            console.log(parsed);\n        }).catch(function(e){\n            console.log(e);\n        })\n    }catch(e){\n        console.log(e);\n    }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[s._v("与")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("async function loadData(){\n    try{\n        var data = JSON.parse(await getJSON());\n        console.log(data);\n    }catch(e){\n        console.log(e);\n    }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h4",{attrs:{id:"_14-3-条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-3-条件","aria-hidden":"true"}},[s._v("#")]),s._v(" 14.3 条件")]),s._v(" "),e("p",[s._v("用 async/wait 编写代码要简单得多")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function loadData(){\n    return getJSON().then(function(response){\n        if(response.needsAnotherRequest){\n            return makeAnotherRequest(response).then(function(anotherResponse){\n                console.log(anotherResponse);\n                return anotherResponse;\n            })\n        }else{\n            console.log(response)\n            return response;\n        }\n    })\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("与")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("async function loadData(){\n    var response = await getJSON();\n    if(response.needsAnotherRequest){\n        var anotherResponse = await makeAnotherRequest(response);\n        console.log(anotherResponse);\n        return anotherResponse;\n    }else{\n        console.log(response);\n        return response;\n    }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("h4",{attrs:{id:"_14-4-堆栈帧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-4-堆栈帧","aria-hidden":"true"}},[s._v("#")]),s._v(" 14.4 堆栈帧")]),s._v(" "),e("p",[s._v("与 async/await 不同，从 Promise 链返回的错误堆栈不提供错误发生在哪里。看下面这些")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function loadData(){\n    return callAPromise().then(callback1).then(callback2).then(callback3).then(()=>{\n        throw new Error('boom');\n    })\n}\n\nloadData().catch(function(e){\n    console.log(err);\n});\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("与：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("async function loadData(){\n    await callAPromise1();\n    await callAPromise2();\n    await callAPromise3();\n    await callAPromise4();\n    await callAPromise5();\n    throw new Error('boom');\n}\n\nloadData.catch(function(e){\n    cosnole.log(e);\n})\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("h4",{attrs:{id:"_14-5-调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-5-调试","aria-hidden":"true"}},[s._v("#")]),s._v(" 14.5 调试")]),s._v(" "),e("p",[s._v("如果你使用过 Promise，那么你知道调试它们是一场噩梦。例如，如果在一个程序中设置了一个断点，然后阻塞并使用高度快捷方式（如“停止”），调试器将不会移动到下面，因为它只“逐步”执行同步代码。使用"),e("code",[s._v("async/wait")]),s._v("，您可以逐步完成"),e("code",[s._v("wait")]),s._v("调用，就像它们是正常的同步函数一样。")]),s._v(" "),e("h3",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/qq449245884/xiaozhi/issues/4",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavaScript 是如何工作的:事件循环和异步编程的崛起+ 5 种使用 async/await 更好地编码方式！"),e("OutboundLink")],1)])]),s._v(" "),e("h2",{attrs:{id:"联系作者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[s._v("#")]),s._v(" 联系作者")]),s._v(" "),e("div",{attrs:{align:"center"}},[e("p",[s._v("\n        平凡世界，贵在坚持。\n    ")]),s._v(" "),e("img",{attrs:{src:s.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);a.default=t.exports}}]);