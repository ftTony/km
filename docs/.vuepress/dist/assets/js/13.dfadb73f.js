(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{371:function(n,s,a){"use strict";a.r(s);var e=a(4),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"大-o-时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大-o-时间复杂度","aria-hidden":"true"}},[n._v("#")]),n._v(" 大 O 时间复杂度")]),n._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),a("p",[n._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),n._v(" "),a("h2",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[n._v("#")]),n._v(" 内容")]),n._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90"}},[n._v("什么是复杂度分析")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8C%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%BF%9B%E8%A1%8C%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90"}},[n._v("为什么要进行复杂度分析")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90"}},[n._v("如何进行复杂度分析")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9B%9B%E3%80%81%E5%A6%82%E4%BD%95%E6%8E%8C%E6%8F%A1%E5%A5%BD%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95"}},[n._v("如何掌握好复杂度分析方法")])])]),n._v(" "),a("blockquote",[a("p",[n._v("复杂度分析是整个算法学习的精髓，只要掌握了它，数据结构和算法的内容基本上就掌握了一半了。")])]),n._v(" "),a("h3",{attrs:{id:"一、什么是复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是复杂度分析","aria-hidden":"true"}},[n._v("#")]),n._v(" 一、什么是复杂度分析")]),n._v(" "),a("ol",[a("li",[n._v("数据结构和算法解决是“如何让计算机更快时间、更省空间的解决问题”。")]),n._v(" "),a("li",[n._v("因此需从执行时间和占用空间两个来评估数据结构和算法的性能。")]),n._v(" "),a("li",[n._v("分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度。")]),n._v(" "),a("li",[n._v("复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系。")])]),n._v(" "),a("h3",{attrs:{id:"二、为什么要进行复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、为什么要进行复杂度分析","aria-hidden":"true"}},[n._v("#")]),n._v(" 二、为什么要进行复杂度分析")]),n._v(" "),a("ol",[a("li",[n._v("和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。")]),n._v(" "),a("li",[n._v("掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。")])]),n._v(" "),a("h3",{attrs:{id:"三、如何进行复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、如何进行复杂度分析","aria-hidden":"true"}},[n._v("#")]),n._v(" 三、如何进行复杂度分析")]),n._v(" "),a("ul",[a("li",[a("a",{attrs:{href:""}},[n._v("大 O 表示法")])]),n._v(" "),a("li",[a("a",{attrs:{href:""}},[n._v("时间复杂度")])]),n._v(" "),a("li",[a("a",{attrs:{href:""}},[n._v("时间复杂度分析")])]),n._v(" "),a("li",[a("a",{attrs:{href:""}},[n._v("常用的时间复杂度分析")])]),n._v(" "),a("li",[a("a",{attrs:{href:""}},[n._v("时间复杂度分类")])]),n._v(" "),a("li",[a("a",{attrs:{href:""}},[n._v("时间复杂度总结")])]),n._v(" "),a("li",[a("a",{attrs:{href:""}},[n._v("空间复杂度分析")])])]),n._v(" "),a("h4",{attrs:{id:"_3-1-大-o-表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-大-o-表示法","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.1 大 O 表示法")]),n._v(" "),a("p",[n._v("算法的执行时间与代码的执行次数成正比，用"),a("code",[n._v("T(n) = O(f(n))")]),n._v(" 表示，其中"),a("code",[n._v("T(n)")]),n._v(" 表示算法执行总时间，"),a("code",[n._v("f(n)")]),n._v(" 表示每行代码执行总次数，而 n 往往表示数据的规模。这就是大 O 时间复杂度表示法。")]),n._v(" "),a("h4",{attrs:{id:"_3-2-时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-时间复杂度","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.2 时间复杂度")]),n._v(" "),a("p",[a("strong",[n._v("定义：")]),n._v(" 算法的时间复杂度，也就是算法的时间量度。")]),n._v(" "),a("p",[a("strong",[n._v("大 O 时间复杂度表示法")]),n._v(" 实际上并不具体表示代码真正的执行时间，而是表示"),a("strong",[n._v("代码执行时间随数据规模增长的变化趋势")]),n._v("，所以也叫渐进时间复杂度，简称"),a("strong",[n._v("时间复杂度")]),n._v("。")]),n._v(" "),a("p",[n._v("例子 1：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('function aFun() {\n    console.log("Hello, World!");      //  需要执行 1 次\n    return 0;       // 需要执行 1 次\n}\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("那么这个方法需要执行 2 次运算。")]),n._v(" "),a("p",[n._v("例子 2：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('function bFun(n) {\n    for(let i = 0; i < n; i++) {         // 需要执行 (n + 1) 次\n        console.log("Hello, World!");      // 需要执行 n 次\n    }\n    return 0;       // 需要执行 1 次\n}\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("那么这个方法需要执行 ( n + 1 + n + 1 ) = 2n +2 次运算。")]),n._v(" "),a("p",[n._v("例子 3：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function cal(n){\n    let sum=0;  // 1次\n    let i=1;    // 1次\n    let j=1;    // 1次\n    for(;i<=n;++i){\n        j=1;    // n次\n        for(;j<=n;++j){     // n*n，也即是  n平方次\n            sum=sum+i*j;    // n*n，也即是 n平方次\n        }\n    }\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("p",[n._v("注意，这里是二层 for 循环，所以第二层执行的是"),a("code",[n._v("n * n = n2")]),n._v(" 次，而且这里的循环是++i，和例子 2 的是 i++，是不同的，是先加与后加的区别。")]),n._v(" "),a("p",[n._v("那么这个方法需要执行"),a("code",[n._v("( n2 + n2 + n + n + 1 + 1 +1 ) = 2n2 +2n + 3")]),n._v(" 。")]),n._v(" "),a("p",[a("strong",[n._v("特点：")]),n._v(" 以时间复杂度为例，由于"),a("strong",[n._v("时间复杂度")]),n._v("描述的是算法执行时间与数据规模的"),a("strong",[n._v("增长变化趋势")]),n._v("，所以"),a("strong",[n._v("常量")]),n._v("、"),a("strong",[n._v("低阶")]),n._v("、"),a("strong",[n._v("系数")]),n._v("实际上对这种增长趋势不产生决定性影响，所以在做时间复杂度分析时"),a("strong",[n._v("忽略")]),n._v("这些项。")]),n._v(" "),a("p",[n._v("所以，上面例子 1 的时间复杂度为 "),a("code",[n._v("T(n)")]),n._v(" = "),a("code",[n._v("O(1)")]),n._v("，例子 2 的时间复杂度为 "),a("code",[n._v("T(n)")]),n._v(" = "),a("code",[n._v("O(n)")]),n._v("，例子 3 的时间复杂度为"),a("code",[n._v("T(n)")]),n._v(" = "),a("code",[n._v("O(n2)")]),n._v("。")]),n._v(" "),a("h4",{attrs:{id:"_3-3-时间复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-时间复杂度分析","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.3 时间复杂度分析")]),n._v(" "),a("ul",[a("li",[a("strong",[n._v("只关注循环执行次数最多的一段代码")])])]),n._v(" "),a("p",[n._v("单段代码看高频：比如循环。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function cal(n){\n    let sum=0;\n    let i=1;\n    for(;i<=n;++i){\n        sum=sum+i;\n    }\n    return sum;\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("p",[n._v("执行次数最多的是"),a("code",[n._v("for")]),n._v("循环及里面的代码，执行了"),a("code",[n._v("n")]),n._v("次，所以时间复杂度为"),a("code",[n._v("O(n)")]),n._v("。")]),n._v(" "),a("ul",[a("li",[a("strong",[n._v("加法法则：总复杂度等于量级最大的那段代码的复杂度")])])]),n._v(" "),a("p",[n._v("多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\nfunction cal(n){\n    let sum_1=0;\n    let p=1;\n    for(;p<100;++p){\n        sum_1=sum_1+p;\n    }\n\n    let sum_2=0;\n    let q=1;\n    for(;q<n;++q){\n        sum_2=sum2+q;\n    }\n\n    let sum_3=0;\n    let i=1;\n    let j=1;\n    for(;i<=n;++i){\n        j=1;\n        for(;j<=n;++j){\n            sum_3=sum_3+i*j;\n        }\n    }\n    return sum_1+sum_2+sum_3;\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br")])]),a("p",[n._v("上面代码分为三部分，分别求"),a("code",[n._v("sum_1")]),n._v("、"),a("code",[n._v("sum_2")]),n._v("、"),a("code",[n._v("sum_3")]),n._v("，主要看循环部分。")]),n._v(" "),a("p",[n._v("第一部分，求"),a("code",[n._v("sum_1")]),n._v("，明确知道执行了 100 次，而和 n 规模无关，是个常量的执行时间，不能反映"),a("strong",[n._v("增长变化趋势")]),n._v("，所以时间复杂度为 O(1)。")]),n._v(" "),a("p",[n._v("第二和第三部分，求"),a("code",[n._v("sum_2")]),n._v("和"),a("code",[n._v("sum_3")]),n._v("，时间复杂度是和 n 的规模有关的，分别为"),a("code",[n._v("O(n)")]),n._v("和"),a("code",[n._v("O(n2)")]),n._v("。")]),n._v(" "),a("p",[n._v("所以，取三段代码的最大量级，上面例子的最终的时间复杂度 O(n2)。")]),n._v(" "),a("p",[n._v("同理类推，如果有 3 层 for 循环，那么时间复杂度为"),a("code",[n._v("O(n3)")]),n._v("，4 层就是"),a("code",[n._v("O(n4)")]),n._v("。")]),n._v(" "),a("p",[n._v("所以，"),a("strong",[n._v("总的时间复杂度就等于量级最大的那段代码的时间复杂度。")])]),n._v(" "),a("ul",[a("li",[a("strong",[n._v("乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积")])])]),n._v(" "),a("p",[n._v("嵌套代码求乘积：比如递归、多循环等。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function cal(n){\n    let ret=0;\n    let i=1;\n    for(;i<n;++i){\n        ret=ret+f(i);   //重点为 f(i)\n    }\n}\n\nfunction f(n){\n    let sum=0;\n    let i=1;\n    for(;i<n;++i){\n        sum=sum+i;\n    }\n    return sum;\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br")])]),a("p",[n._v("方法 cal 手环里面调用 f 方法，而 f 方法里面也有循环。")]),n._v(" "),a("p",[n._v("所以，整个 cal() 函数的时间复杂度就是，"),a("code",[n._v("T(n) = T1(n) * T2(n) = O(n*n) = O(n2)")]),n._v(" 。")]),n._v(" "),a("ul",[a("li",[a("strong",[n._v("多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加")])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function cal(m,n){\n    let sum_1=0;\n    let i=1;\n    for(;i<m;++i){\n        sum_1=sum_1+i;\n    }\n\n    let sum_2=0;\n    let j=1;\n    for(;j<n;++j){\n        sum_2=sum_2+j;\n    }\n\n    return sum_1+sum_2;\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("p",[n._v("以上代码也是求和，求 sum_1 的数据规模为 m、求 sum_2 的数据规模为 n，所以时间复杂度为 O(m+n)。")]),n._v(" "),a("p",[a("strong",[n._v("公式：")]),n._v(" "),a("code",[n._v("T1(m) + T2(n) = O(f(m) + g(n))")]),n._v(" 。")]),n._v(" "),a("ul",[a("li",[a("strong",[n._v("多个规模求乘法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相乘")])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\nfunction cal(m,n){\n    let sum_3=0;\n    let i=1;\n    let j=1;\n    for(;i<=m;++i){\n        j=1;\n        for(;j<=m;++i){\n            sum_3=sum_3+i*j;\n        }\n    }\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("p",[n._v("以上代码也是求和，两层 for 循环 ，求 sum_3 的数据规模为 "),a("code",[n._v("m")]),n._v(" 和 "),a("code",[n._v("n")]),n._v("，所以时间复杂度为 "),a("code",[n._v("O(m*n)")]),n._v("。")]),n._v(" "),a("p",[a("strong",[n._v("公式：")]),n._v(" "),a("code",[n._v("T1(m) * T2(n) = O(f(m) * g(n))")]),n._v(" 。")]),n._v(" "),a("h4",{attrs:{id:"_3-4-常用的时间复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-常用的时间复杂度分析","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.4 常用的时间复杂度分析")]),n._v(" "),a("ul",[a("li",[n._v("多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。")])]),n._v(" "),a("p",[n._v("包括 "),a("code",[n._v("O(1)")]),n._v("（常数阶）、"),a("code",[n._v("O(logn)")]),n._v("（对数阶）、"),a("code",[n._v("O(n)")]),n._v("（线性阶）、"),a("code",[n._v("O(nlogn)")]),n._v("（线性对数阶）、"),a("code",[n._v("O(n2)")]),n._v(" （平方阶）、"),a("code",[n._v("O(n3)")]),n._v("（立方阶）。")]),n._v(" "),a("p",[n._v("除了 "),a("code",[n._v("O(logn)")]),n._v("、"),a("code",[n._v("O(nlogn)")]),n._v(" ，其他的都可从上面的几个例子中看到。")]),n._v(" "),a("p",[n._v("下面举例说明 "),a("code",[n._v("O(logn)")]),n._v("（对数阶）：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("let i=1;\nwhile (i <= n)  {\n   i = i * 2;\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("代码是从 1 开始，每次循环就乘以 2，当大于 n 时，循环结束。")]),n._v(" "),a("p",[n._v("其实就是高中学过的等比数列，i 的取值就是一个等比数列。在数学里面是这样子的：")]),n._v(" "),a("p",[a("code",[n._v("20 21 22 ... 2k ... 2x = n")])]),n._v(" "),a("p",[n._v("所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了，通过"),a("code",[n._v("2x = n")]),n._v(" 求解"),a("code",[n._v("x")]),n._v("，数学中求解得"),a("code",[n._v("x = log2n")]),n._v("。所以上面代码的时间复杂度为"),a("code",[n._v("O(log2n)")]),n._v("。")]),n._v(" "),a("p",[n._v("实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为"),a("code",[n._v("O(logn)")]),n._v("。为什么呢？")]),n._v(" "),a("p",[n._v("因为对数之间是可以互相转换的，"),a("code",[n._v("log3n = log32 * log2n")]),n._v("，所以"),a("code",[n._v("O(log3n) = O(C * log2n)")]),n._v("，其中"),a("code",[n._v("C=log32")]),n._v("是一个常量。")]),n._v(" "),a("p",[n._v("由于"),a("strong",[n._v("时间复杂度")]),n._v("描述的是算法执行时间与数据规模的"),a("strong",[n._v("增长变化趋势")]),n._v("，所以"),a("strong",[n._v("常量")]),n._v("、"),a("strong",[n._v("低阶")]),n._v("、"),a("strong",[n._v("系数")]),n._v("实际上对这种增长趋势不产生决定性影响，所以在做时间复杂度分析时"),a("strong",[n._v("忽略")]),n._v("这些项。")]),n._v(" "),a("p",[n._v("因此，"),a("strong",[n._v("在对数阶时间复杂度的表示方法里，我们忽略对数的 “底”，统一表示为 O(logn)")]),n._v("。")]),n._v(" "),a("p",[n._v("下面举例说明 O(nlogn)"),a("strong",[n._v("（对数阶）")]),n._v("：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function aFun(n){\n  let i = 1;\n  while (i <= n)  {\n     i = i * 2;\n  }\n  return i\n}\n\nfunction cal(n) {\n   let sum = 0;\n   for (let i = 1; i <= n; ++i) {\n     sum = sum + aFun(n);\n   }\n   return sum;\n }\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("ul",[a("li",[a("strong",[n._v("非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。")])])]),n._v(" "),a("p",[n._v("包括 "),a("code",[n._v("O(2n)")]),n._v("（指数阶）、"),a("code",[n._v("O(n!)")]),n._v("（阶乘阶）。")]),n._v(" "),a("p",[n._v("O(2n)（指数阶）例子：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\naFunc(n){\n    if(n<=1){\n        return 1;\n    }else{\n        return aFunc(n-1)+aFunc(n-2);\n    }\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("p",[n._v("参考答案：")]),n._v(" "),a("p",[n._v("显然运行次数，"),a("code",[n._v("T(0)=T(1)=1")]),n._v("，同时 "),a("code",[n._v("T(n) = T(n - 1) + T(n - 2) + 1")]),n._v("，这里的"),a("code",[n._v("1")]),n._v(" 是其中的加法算一次执行。")]),n._v(" "),a("p",[n._v("显然"),a("code",[n._v("T(n) = T(n - 1) + T(n - 2)")]),n._v(" 是一个斐波那契数列，通过归纳证明法可以证明，当"),a("code",[n._v("n >= 1")]),n._v("时"),a("code",[n._v("T(n) < (5/3)n")]),n._v("，同时当"),a("code",[n._v("n > 4")]),n._v("时"),a("code",[n._v("T(n) >= (3/2)n")]),n._v("。\n所以该方法的时间复杂度可以表示为 O((5/3)n)，简化后为"),a("code",[n._v("O(2n)")]),n._v("。")]),n._v(" "),a("p",[n._v("可见这个方法所需的运行时间是以指数的速度增长的。\n如果大家感兴趣，可以试下分别用 1，10，100 的输入大小来测试下算法的运行时间，相信大家会感受到时间复杂度的无穷魅力。")]),n._v(" "),a("h4",{attrs:{id:"_3-5-时间复杂度分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-时间复杂度分类","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.5 时间复杂度分类")]),n._v(" "),a("p",[n._v("时间复杂度可以分为：")]),n._v(" "),a("ul",[a("li",[n._v("**最好情况时间复杂度：**在最理想的情况下，执行这段代码的时间复杂度。")]),n._v(" "),a("li",[n._v("**最坏情况时间复杂度：**在最糟糕的情况下，执行这段代码的时间复杂度。")]),n._v(" "),a("li",[a("strong",[n._v("平均情况时间复杂度："),a("strong",[n._v("用代码在所有情况下执行的次数的加权平均值表示。也叫")]),n._v("加权平均时间复杂度")]),n._v("或者期望时间复杂度。")]),n._v(" "),a("li",[n._v("**均摊时间复杂度：**在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度上。基本上均摊结果就等于低级别复杂度。")])]),n._v(" "),a("p",[n._v("举例说明：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("//n表示数组array的长度\nfunction find(array,n,x){\n    let i=0;\n    let pos=-1;\n    for(;i<n;++i){\n        if(array[i]==x){\n            pos=i;\n            break;\n        }\n    }\n    return pos;\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("p",[n._v("find 函数实现的功能是在一个数组中找到值等于"),a("code",[n._v("x")]),n._v("的项，并返回索引值，如果没找到就返回"),a("code",[n._v("-1")]),n._v("。")]),n._v(" "),a("p",[a("strong",[n._v("最好情况时间复杂度，最坏情况时间复杂度")])]),n._v(" "),a("p",[n._v("如果数组中第一个值就等于 x，那么时间复杂度为 O(1)，如果数组中不存在变量 x，那我们就需要把整个数组都遍历一遍，时间复杂度就成了 O(n)。所以，不同的情况下，这段代码时间复杂是不一样的。")]),n._v(" "),a("p",[n._v("所以上页面代码的最好情况时间复杂度为 O(1)，最坏情况时间复杂度为 O(n)。")]),n._v(" "),a("p",[a("strong",[n._v("平均情况时间复杂度")])]),n._v(" "),a("p",[n._v("如何分析平均时间复杂度 ？代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数的加权平均值表示。")]),n._v(" "),a("p",[n._v("要查找的变量 x 在数组中的位置，有"),a("code",[n._v("n+1")]),n._v("种情况：在数组的"),a("code",[n._v("0～n-1")]),n._v("位置中和不在数组中。我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1，就可以得到需要遍历的元素个数的平均值，即：")]),n._v(" "),a("p",[a("img",{attrs:{src:"algorithm-timing04.png",alt:"images"}})]),n._v(" "),a("p",[n._v("省略掉系数、低阶、常量，所以，这个公式简化之后，得到的平均时间复杂度就是 O(n)。")]),n._v(" "),a("p",[n._v("我们知道，要查找的变量 "),a("code",[n._v("x")]),n._v("，要么在数组里，要么就不在数组里。这两种情况对应的概率统计起来很麻烦，我们假设在数组中与不在数组中的概率都为 "),a("code",[n._v("1/2")]),n._v("。另外，要查找的数据出现在 "),a("code",[n._v("0～n-1")]),n._v(" 这 "),a("code",[n._v("n")]),n._v("个位置的概率也是一样的，为 1/n。所以，根据概率乘法法则，要查找的数据出现在 "),a("code",[n._v("0～n-1")]),n._v(" 中任意位置的概率就是 "),a("code",[n._v("1/(2n)")]),n._v("。")]),n._v(" "),a("p",[n._v("因此，前面的推导过程中存在的最大问题就是，没有将各种情况发生的概率考虑进去。如果我们把每种情况发生的概率也考虑进去，那平均时间复杂度的计算过程就变成了这样：")]),n._v(" "),a("p",[a("img",{attrs:{src:"algorithm-timing05.png",alt:"images"}})]),n._v(" "),a("p",[n._v("这个值就是概率论中的"),a("strong",[n._v("加权平均值")]),n._v("，也叫"),a("strong",[n._v("期望值")]),n._v("，所以平均时间复杂度的全称应该叫"),a("strong",[n._v("加权平均时间复杂度")]),n._v("或者"),a("strong",[n._v("期望时间复杂度")]),n._v("。")]),n._v(" "),a("p",[n._v("所以，根据上面结论推导出，得到的"),a("code",[n._v("平均时间复杂度")]),n._v("仍然是 "),a("code",[n._v("O(n)")]),n._v("。")]),n._v(" "),a("p",[a("strong",[n._v("均摊时间复杂度")])]),n._v(" "),a("p",[n._v("均摊时间复杂度就是一种特殊的平均时间复杂度 (应用场景非常特殊，非常有限，这里不说)。")]),n._v(" "),a("h4",{attrs:{id:"_3-6-时间复杂度总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-时间复杂度总结","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.6 时间复杂度总结")]),n._v(" "),a("p",[n._v("常用的时间复杂度所耗费的时间从小到大依次是：")]),n._v(" "),a("blockquote",[a("p",[a("code",[n._v("O(1)")]),n._v(" < "),a("code",[n._v("O(logn)")]),n._v(" < "),a("code",[n._v("(n)")]),n._v(" < "),a("code",[n._v("O(nlogn)")]),n._v(" < "),a("code",[n._v("O(n2)")]),n._v(" < "),a("code",[n._v("O(n3)")]),n._v(" < "),a("code",[n._v("O(2n)")]),n._v(" < "),a("code",[n._v("O(n!)")]),n._v(" < "),a("code",[n._v("O(nn)")])])]),n._v(" "),a("p",[n._v("常见的时间复杂度：")]),n._v(" "),a("p",[a("img",{attrs:{src:"algorithm-timing.png",alt:"images"}}),n._v(" "),a("img",{attrs:{src:"algorithm-timing02.png",alt:"images"}}),n._v(" "),a("img",{attrs:{src:"algorithm-timing03.png",alt:"images"}})]),n._v(" "),a("h4",{attrs:{id:"_3-7-空间复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-空间复杂度分析","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.7 空间复杂度分析")]),n._v(" "),a("p",[n._v("时间复杂度的全称是"),a("strong",[n._v("渐进时间复杂度")]),n._v("，表示"),a("strong",[n._v("算法的执行时间与数据规模之间的增长关系")]),n._v("。")]),n._v(" "),a("p",[n._v("类比一下，空间复杂度全称就是"),a("strong",[n._v("渐进空间复杂度")]),n._v("，表示"),a("strong",[n._v("算法的存储空间与数据规模之间的增长关系")]),n._v("。")]),n._v(" "),a("p",[n._v("定义：算法的空间复杂度通过计算算法所需的存储空间实现，算法的空间复杂度的计算公式记作："),a("code",[n._v("S(n) = O(f(n))")]),n._v("，其中，"),a("code",[n._v("n")]),n._v(" 为问题的规模，"),a("code",[n._v("f(n)")]),n._v(" 为语句关于 "),a("code",[n._v("n")]),n._v(" 所占存储空间的函数。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function print(n){\n    const newArr = []; // 第 2 行\n    newArr.length = n; // 第 3 行\n    for (let i = 0; i <n; ++i) {\n        newArr[i] = i * i;\n    }\n\n    for (let j = n-1; j >= 0; --j) {\n        console.log(newArr[i])\n    }\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("p",[n._v("跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 newArr，是个空数组。第 3 行把 newArr 的长度修改为 n 的长度的数组，每期的值为 undefined，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。")]),n._v(" "),a("p",[n._v("我们常见的空间复杂度就是 "),a("code",[n._v("O(1)")]),n._v("、"),a("code",[n._v("O(n)")]),n._v("、"),a("code",[n._v("O(n2)")]),n._v("，像 "),a("code",[n._v("O(logn)")]),n._v("、"),a("code",[n._v("O(nlogn)")]),n._v(" 这样的对数阶复杂度平时都用不到。")]),n._v(" "),a("h3",{attrs:{id:"四、如何掌握好复杂度分析方法-？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、如何掌握好复杂度分析方法-？","aria-hidden":"true"}},[n._v("#")]),n._v(" 四、如何掌握好复杂度分析方法 ？")]),n._v(" "),a("blockquote",[a("p",[n._v("复杂度分析关键在于多练，所谓孰能生巧。")])]),n._v(" "),a("p",[n._v("平时我们在写代码时，是用 空间换时间 还是 时间换空间，可以根据算法的时间复杂度和空间复杂度来衡量。")]),n._v(" "),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[n._v("#")]),n._v(" 参考资料")]),n._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/biaochenxuying/blog/issues/29",target:"_blank",rel:"noopener noreferrer"}},[n._v("JavaScript 数据结构与算法之美 - 时间和空间复杂度"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:"https://www.zhihu.com/question/21387264",target:"_blank",rel:"noopener noreferrer"}},[n._v("如何理解算法时间复杂度的表示法，例如 O(n²)、O(n)、O(1)、O(nlogn) 等？"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/40447",target:"_blank",rel:"noopener noreferrer"}},[n._v("复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/9t1HClKmDN9Y91jo-7jR7g",target:"_blank",rel:"noopener noreferrer"}},[n._v("看动画轻松理解时间复杂度（一）"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/M0EPHU29cYv_cNzVialJQA",target:"_blank",rel:"noopener noreferrer"}},[n._v("看动画轻松理解时间复杂度（二）"),a("OutboundLink")],1)])]),n._v(" "),a("h2",{attrs:{id:"联系作者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[n._v("#")]),n._v(" 联系作者")]),n._v(" "),a("div",{attrs:{align:"center"}},[a("p",[n._v("\n        平凡世界，贵在坚持。\n    ")]),n._v(" "),a("img",{attrs:{src:n.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);s.default=t.exports}}]);