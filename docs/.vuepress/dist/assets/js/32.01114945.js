(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{257:function(n,s,a){"use strict";a.r(s);var e=a(13),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"二叉堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉堆"}},[n._v("#")]),n._v(" 二叉堆")]),n._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),a("p",[n._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),n._v(" "),a("h2",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[n._v("#")]),n._v(" 内容")]),n._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E5%A0%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"}},[n._v("堆是什么？")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8C%E3%80%81%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%A0%86"}},[n._v("实现一个堆")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E5%A0%86%E6%8E%92%E5%BA%8F"}},[n._v("堆排序")])])]),n._v(" "),a("h3",{attrs:{id:"一、二叉堆是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、二叉堆是什么？"}},[n._v("#")]),n._v(" 一、二叉堆是什么？")]),n._v(" "),a("p",[n._v("堆，又称为优先队列。虽然名为优先队列，但堆并不是队列。堆和队列是两种不同的数据结构，堆是树态的，队列是线性的。在队列中，我们可以向队列添加元素，取出的时候是按照进入队列的先后顺序取出元素的，先进先出；而在堆中，却不是按照元素添加的先后顺序，而是按照元素的优先级取出元素。")]),n._v(" "),a("p",[n._v("二叉堆是一种完全二叉树，因为完全二叉树的特性普遍使用数组结构是非常好用的，所以性注定了二叉堆的存储形式只能数组或动态数组。")]),n._v(" "),a("h3",{attrs:{id:"二、二叉堆特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、二叉堆特点"}},[n._v("#")]),n._v(" 二、二叉堆特点")]),n._v(" "),a("ul",[a("li",[n._v("它是一棵完全二叉树，表示树的每一层都有左侧和右侧子节点（除了最后一层的叶节点），并且最后一层的叶节点尽可能都是左侧节点。")]),n._v(" "),a("li",[n._v("二叉堆不是最小堆就是最大堆。最小堆允许你快速导出树的最小值，最大堆允许你快速导出树的最大值。所有的节点都大于等于（最大堆）或小于等于（最小堆）每个它的子节点。")])]),n._v(" "),a("h3",{attrs:{id:"二、实现一个堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、实现一个堆"}},[n._v("#")]),n._v(" 二、实现一个堆")]),n._v(" "),a("p",[n._v("二叉树有两种表示方式。第一种是使用动态的表示方式，也就是指针。第二种是使用一个数组，通过索引值检索父节点、左侧和右侧子节点的值。")]),n._v(" "),a("p",[n._v("堆数据结构中有三个主要操作。")]),n._v(" "),a("ul",[a("li",[n._v("insert(value)：这个方法向堆中插入一个新的值。如果插入成功，它返回 true，否则返回 false。")]),n._v(" "),a("li",[n._v("extract()：这个方法移除最小值（最小堆）或最大值（最大堆），并返回这个值。")]),n._v(" "),a("li",[n._v("findMinimum()：这个方法返回最小值（最小堆）或最大值（最大堆）且不会移除这个值。")])]),n._v(" "),a("p",[n._v("代码如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const Compare = {\n    LESS_THAN: -1,\n    bigger_THAN: 1,\n    EQUALS: 0\n}\n\nfunction defaultCompare(a, b) {\n    if (a === b) {\n        return Compare.EQUALS\n    }\n    return a < b ? Compare.LESS_THAN : Compare.BIGGER_THAN;\n}\n\nfunction reverseCompare(compareFn) {\n    return (a, b) => compareFn(b, a)\n}\n\nfunction swap(array, a, b) {\n    [array[a], array[b]] = [array[b], array[a]]\n}\n\nclass MinHeap {\n    constructor(compareFn = defaultCompare) {\n        this.compareFn = compareFn\n        this.heap = []\n    }\n    // 左侧子节点的位置是2*index+1\n    getLeftIndex(index) {\n        return (2 * index) + 1\n    }\n    // 右侧子节点的位置是2*index+2\n    getRightIndex(index) {\n        return (2 * index) + 2\n    }\n    // 父节点位置是index/2\n    getParentIndex(index) {\n        if (index === 0) {\n            return undefined\n        }\n        return Math.floor((index - 1) / 2)\n    }\n    size() {\n        return this.heap.length\n    }\n    isEmpty() {\n        return this.size() <= 0\n    }\n    clear() {\n        this.heap = []\n    }\n    findMinimum() {\n        return this.isEmpty() ? undefined : this.heap[0]\n    }\n    insert(value) {\n        if (value != null) {\n            const index = this.heap.length\n            this.heap.push(value)\n            this.siftUp(index)\n            return true\n        }\n        return false\n    }\n    // 下移操作\n    siftDown(index) {\n        let element = index\n        const left = this.getLeftIndex(index)\n        const right = this.getRightIndex(index)\n        const size = this.size()\n        if (left < size && this.compareFn(this.heap[element], this.heap[left]) === Compare.BIGGER_THAN) {\n            element = left\n        }\n        if (right < size && this.compareFn(this.heap[element], this.heap[right]) === Compare.BIGGER_THAN) {\n            element = right\n        }\n        if (index !== element) {\n            swap(this.heap, index, element)\n            this.siftDown(element)\n        }\n    }\n    // 上移操作\n    siftUp(index) {\n        let parent = this.getParentIndex(index)\n        while (index > 0 && this.compareFn(this.heap[parent], this.heap[index]) === Compare.BIGGER_THAN) {\n            swap(this.heap, parent, index)\n            index = parent\n            parent = this.getParentIndex(index)\n        }\n    }\n    extract() {\n        if (this.isEmpty()) {\n            return undefined\n        }\n        if (this.size() === 1) {\n            return this.heap.shift()\n        }\n        const removeValue = this.heap[0]\n        this.heap[0] = this.heap.pop()\n        this.siftDown(0)\n        return removeValue\n    }\n    heapify(array) {\n        if (array) {\n            this.heap = array\n        }\n        const maxIndex = Math.floor(this.size() / 2) - 1\n        for (let i = 0; i <= maxIndex; i++) {\n            this.siftDown(i)\n        }\n        return this.heap\n    }\n    getAsArray() {\n        return this.heap\n    }\n}\n\nclass Max extends MinHeap {\n    constructor(compareFn = defaultCompare) {\n        super(compareFn)\n        this.compareFn = compareFn\n        this.compareFn = reverseCompare(compareFn)\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br"),a("span",{staticClass:"line-number"},[n._v("100")]),a("br"),a("span",{staticClass:"line-number"},[n._v("101")]),a("br"),a("span",{staticClass:"line-number"},[n._v("102")]),a("br"),a("span",{staticClass:"line-number"},[n._v("103")]),a("br"),a("span",{staticClass:"line-number"},[n._v("104")]),a("br"),a("span",{staticClass:"line-number"},[n._v("105")]),a("br"),a("span",{staticClass:"line-number"},[n._v("106")]),a("br"),a("span",{staticClass:"line-number"},[n._v("107")]),a("br"),a("span",{staticClass:"line-number"},[n._v("108")]),a("br"),a("span",{staticClass:"line-number"},[n._v("109")]),a("br"),a("span",{staticClass:"line-number"},[n._v("110")]),a("br"),a("span",{staticClass:"line-number"},[n._v("111")]),a("br"),a("span",{staticClass:"line-number"},[n._v("112")]),a("br"),a("span",{staticClass:"line-number"},[n._v("113")]),a("br"),a("span",{staticClass:"line-number"},[n._v("114")]),a("br"),a("span",{staticClass:"line-number"},[n._v("115")]),a("br"),a("span",{staticClass:"line-number"},[n._v("116")]),a("br"),a("span",{staticClass:"line-number"},[n._v("117")]),a("br"),a("span",{staticClass:"line-number"},[n._v("118")]),a("br"),a("span",{staticClass:"line-number"},[n._v("119")]),a("br"),a("span",{staticClass:"line-number"},[n._v("120")]),a("br"),a("span",{staticClass:"line-number"},[n._v("121")]),a("br"),a("span",{staticClass:"line-number"},[n._v("122")]),a("br")])]),a("h3",{attrs:{id:"三、堆排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、堆排序"}},[n._v("#")]),n._v(" 三、堆排序")]),n._v(" "),a("p",[n._v("我们可以使用二叉堆数据结构来帮助我们创建一个非常著名的排序算法：堆排序算法。它包下面三个步骤。")]),n._v(" "),a("ol",[a("li",[n._v("用数组创建一个最大堆用作源数据。")]),n._v(" "),a("li",[n._v("在创建最大堆后，最大的值会被存储在堆的第一个位置。我们要将它替换为堆的最后个值，将堆的大小减 1。")]),n._v(" "),a("li",[n._v("最后，我们将堆的根节点下移并重复步骤 2 直到堆的大小为 1。")])]),n._v(" "),a("p",[n._v("相关代码如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function heapify(array,index,heapSize,compareFn){\n    let largest = index;\n    const left = (2*index)+1;\n    const right = (2*index)+2;\n    if(left < heapSize && compareFn(array[left],array[index]>0)){\n        largest = left;\n    }\n    if(right < heapSize && compareFn(array[right],array[largest])>0){\n        largest = right;\n    }\n    if(largest ! == index){\n        swap(array,index,largest)\n        heapify(array,largest,heapSize,compareFn)\n    }\n}\n\nfunction buildMaxHeap(array,compareFn){\n    for(let i = Math.floor(array.length/2);i>=0;i-=1){\n        heapify(array,i,array.length,compareFn)\n    }\n    return array\n}\n\nfunction heapSort(array,compareFn = defaultCompart){\n    let heapSize = array.length\n    buildMaxHeap(array,compareFn)\n    while(heapSize>1){\n        swap(array,0,--heapSize);\n        heapify(array,0,heapSize,compareFn)\n    }\n    return array\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br")])]),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[n._v("#")]),n._v(" 参考资料")]),n._v(" "),a("ul",[a("li",[n._v("《学习 JavaScript 数据结构与算法》")]),n._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/En9p_zPRWpEFVZvbwdaJAA",target:"_blank",rel:"noopener noreferrer"}},[n._v("什么是二叉堆？"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:"http://www.conardli.top/docs/dataStructure/%E5%A0%86/%E5%A0%86.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("堆"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/69913",target:"_blank",rel:"noopener noreferrer"}},[n._v("堆和堆排序：为什么说堆排序没有快速排序快？"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/j1wQ6KhA7jk9ftOoKUagWA",target:"_blank",rel:"noopener noreferrer"}},[n._v("动画：什么是堆？"),a("OutboundLink")],1)]),n._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/XG0hSN7I6LXNcpPJk7X2qA",target:"_blank",rel:"noopener noreferrer"}},[n._v("拜托，别再问我什么是堆了!"),a("OutboundLink")],1)])]),n._v(" "),a("h2",{attrs:{id:"联系作者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系作者"}},[n._v("#")]),n._v(" 联系作者")]),n._v(" "),a("div",{attrs:{align:"center"}},[a("p",[n._v("\n        平凡世界，贵在坚持。\n    ")]),n._v(" "),a("img",{attrs:{src:n.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);s.default=t.exports}}]);