(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{279:function(t,e,n){"use strict";n.r(e);var a=n(4),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"数据类型与数据类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型与数据类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据类型与数据类型转换")]),t._v(" "),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),n("p",[t._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),t._v(" "),n("h2",{attrs:{id:"内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%A7%8D%E7%B1%BB"}},[t._v("数据类型种类")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E4%BA%8C%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2"}},[t._v("数据类型转换")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD"}},[t._v("数据类型判断")])]),t._v(" "),n("li",[t._v("[实现typeAPI](#四、实现 type API)")])]),t._v(" "),n("h2",{attrs:{id:"一、数据类型种类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、数据类型种类","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、数据类型种类")]),t._v(" "),n("p",[t._v("js 数据类型主要有 "),n("code",[t._v("String")]),t._v("、"),n("code",[t._v("Number")]),t._v("、"),n("code",[t._v("Boolean")]),t._v("、"),n("code",[t._v("Object")]),t._v("、"),n("code",[t._v("Null")]),t._v("、"),n("code",[t._v("Undefined")]),t._v("、"),n("code",[t._v("Symbol")])]),t._v(" "),n("p",[t._v("值类型："),n("code",[t._v("String")]),t._v("、"),n("code",[t._v("Number")]),t._v("、"),n("code",[t._v("Boolean")]),t._v("、"),n("code",[t._v("Symbol")])]),t._v(" "),n("p",[t._v("引用类型："),n("code",[t._v("Object")])]),t._v(" "),n("p",[t._v("特殊类型："),n("code",[t._v("Null")]),t._v("、"),n("code",[t._v("Undefined")])]),t._v(" "),n("h2",{attrs:{id:"二、数据类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、数据类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、数据类型转换")]),t._v(" "),n("h3",{attrs:{id:"_2-1-数据类型转换表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-数据类型转换表","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.1 数据类型转换表")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("值")]),t._v(" "),n("th",[t._v("字符串")]),t._v(" "),n("th",[t._v("数字")]),t._v(" "),n("th",[t._v("布尔值")]),t._v(" "),n("th",[t._v("对象")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("undefined")]),t._v(" "),n("td",[t._v('"undefined"')]),t._v(" "),n("td",[t._v("NaN")]),t._v(" "),n("td",[t._v("false")]),t._v(" "),n("td",[t._v("throws TypeError")])]),t._v(" "),n("tr",[n("td",[t._v("null")]),t._v(" "),n("td",[t._v('"null"')]),t._v(" "),n("td",[t._v("0")]),t._v(" "),n("td",[t._v("false")]),t._v(" "),n("td",[t._v("throws TypeError")])]),t._v(" "),n("tr",[n("td",[t._v("true")]),t._v(" "),n("td",[t._v('"true"')]),t._v(" "),n("td",[t._v("1")]),t._v(" "),n("td"),t._v(" "),n("td",[t._v("new Boolean(true)")])]),t._v(" "),n("tr",[n("td",[t._v("false")]),t._v(" "),n("td",[t._v('"false"')]),t._v(" "),n("td",[t._v("0")]),t._v(" "),n("td"),t._v(" "),n("td",[t._v("Boolean(false)")])]),t._v(" "),n("tr",[n("td",[t._v('""(空字符串)')]),t._v(" "),n("td"),t._v(" "),n("td",[t._v("0")]),t._v(" "),n("td",[t._v("false")]),t._v(" "),n("td",[t._v('new String("")')])]),t._v(" "),n("tr",[n("td",[t._v('"1.2"(非空，数字)')]),t._v(" "),n("td"),t._v(" "),n("td",[t._v("1.2")]),t._v(" "),n("td",[t._v("true")]),t._v(" "),n("td",[t._v('new String("")')])]),t._v(" "),n("tr",[n("td",[t._v('"none"(非空，非数字)')]),t._v(" "),n("td"),t._v(" "),n("td",[t._v("NaN")]),t._v(" "),n("td",[t._v("true")]),t._v(" "),n("td",[t._v('new String("one")')])]),t._v(" "),n("tr",[n("td",[t._v("0")]),t._v(" "),n("td",[t._v('"0"')]),t._v(" "),n("td"),t._v(" "),n("td",[t._v("false")]),t._v(" "),n("td",[t._v("new Number(0)")])]),t._v(" "),n("tr",[n("td",[t._v("-0")]),t._v(" "),n("td",[t._v('"0"')]),t._v(" "),n("td"),t._v(" "),n("td",[t._v("false")]),t._v(" "),n("td",[t._v("new Number(-0)")])]),t._v(" "),n("tr",[n("td",[t._v("NaN")]),t._v(" "),n("td",[t._v('"NaN"')]),t._v(" "),n("td"),t._v(" "),n("td",[t._v("false")]),t._v(" "),n("td",[t._v("new Number(NaN)")])]),t._v(" "),n("tr",[n("td",[t._v("Infinity")]),t._v(" "),n("td",[t._v('"Infinity"')]),t._v(" "),n("td"),t._v(" "),n("td",[t._v("true")]),t._v(" "),n("td",[t._v("new Number(Infinity)")])]),t._v(" "),n("tr",[n("td",[t._v("-Infinity")]),t._v(" "),n("td",[t._v('"-Infinity"')]),t._v(" "),n("td"),t._v(" "),n("td",[t._v("true")]),t._v(" "),n("td",[t._v("new Number(-Infinity)")])]),t._v(" "),n("tr",[n("td",[t._v("1(无穷大，非零)")]),t._v(" "),n("td",[t._v('"1"')]),t._v(" "),n("td"),t._v(" "),n("td",[t._v("true")]),t._v(" "),n("td",[t._v("new Number(1)")])]),t._v(" "),n("tr",[n("td",[t._v("{}(任意对象)")]),t._v(" "),n("td",[t._v("调用对象的 toStirng()方法，如果值是原值则返回，否则，调用对象的 valueOf()方法，如果值是原值则返回，否则抛出 TypeError 错误")]),t._v(" "),n("td",[t._v("调用对象的 toValue()方法，如果值是原值则返回，否则，调用对象的 valueString()方法，如果值是原值则返回，否则抛出 TypeError 错误")]),t._v(" "),n("td",[t._v("true")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("[](任意数组)")]),t._v(" "),n("td",[t._v('""')]),t._v(" "),n("td",[t._v("0")]),t._v(" "),n("td",[t._v("true")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("[9](1 个数字元素)")]),t._v(" "),n("td",[t._v('"9"')]),t._v(" "),n("td",[t._v("9")]),t._v(" "),n("td",[t._v("true")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("['a'](其他数组)")]),t._v(" "),n("td",[t._v("使用 join()方法")]),t._v(" "),n("td",[t._v("NaN")]),t._v(" "),n("td",[t._v("true")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("function(){}(任意函数)")]),t._v(" "),n("td",[t._v("将用户定义的函数转换为 JavaScript 源 eadc 字符串")]),t._v(" "),n("td",[t._v("NaN")]),t._v(" "),n("td",[t._v("true")]),t._v(" "),n("td")])])]),t._v(" "),n("h3",{attrs:{id:"_2-2-toprimitive"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-toprimitive","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.2 ToPrimitive")]),t._v(" "),n("p",[t._v("抽象操作 ToPrimitive 用于将引用类型转为原始类型。实现细节比较复杂，可以"),n("a",{attrs:{href:"https://segmentfault.com/a/1190000016325587",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考这里"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//模拟一个对象的转基本类型操作 ToPrimitive\nvar o = {};\no[Symbol.toPrimitive] = function(hint) {\n  console.log(hint) //hint字符串至为 string number default 中的一个\n  if (hint == \"default\" || hint == \"number\") {\n    if (o.valueOf && typeof(o.valueof()) != 'object') {\n      return o.valueOf()\n    } else {\n      return o.toString()\n    }\n  } else {\n    if (o.toString && typeof(o.toString()) != 'object') {\n      return o.toString()\n    } else {\n      return o.valueOf()\n    }\n  }\n}\nString(o) // string\nNumber(o) // number\n1+o // default\n1-o // number\no++ // number\n++o // number\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br")])]),n("p",[t._v("规则如下：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("如果传入参数是 string（目前只有调用 String()函数是执行这个顺序）：首先检查该值是否有 toString()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就检查该值是否有 valueOf()方法。如果有并且返回基本类型值就使用该回值来进行强制类型转换，如果没有或者返回的不是基本类型值，就抛出错误。")])]),t._v(" "),n("li",[n("p",[t._v("如果传入参数是 number/default（常见强制类型转换都是这个顺序）：首先检查该值是否有 valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就检查该值是否有 toString()方法。如果有并且返回基本类型值就使用该回值来进行强制类型转换，如果没有或者返回的不是基本类型值，就抛出错误。")])])]),t._v(" "),n("h3",{attrs:{id:"_2-3-tostring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-tostring","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.3 ToString")]),t._v(" "),n("p",[t._v("抽象操作 ToString，负责处理非字符串到字符串的强制类型转换。当需要一个值的字符串形式，就会进行 ToString 类型转换。")]),t._v(" "),n("p",[t._v("String()函数就会执行抽象操作 ToString，遵循下列转换规则：")]),t._v(" "),n("ul",[n("li",[t._v("如果值是基本类型，则直接转为字符串。如果是引用类型，则执行 ToPrimitive 抽象操作；")]),t._v(" "),n("li",[t._v('如果值是 null，则返回"null"；')]),t._v(" "),n("li",[t._v('如果值是 undefined，则返回"undefined"。')])]),t._v(" "),n("h3",{attrs:{id:"_2-4-tonumber"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-tonumber","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.4 ToNumber")]),t._v(" "),n("p",[t._v("抽象操作 ToNumber，负责处理非数字到数字的强制类型转换。")]),t._v(" "),n("p",[t._v("Number()执行抽象操作 ToNumber，函数的转换规则如下。")]),t._v(" "),n("ul",[n("li",[t._v("如果是 Boolean 值，true 和 false 将分别被转换为 1 和 0。")]),t._v(" "),n("li",[t._v("如果是数字值，只是简单的传入和返回。")]),t._v(" "),n("li",[t._v("如果是 null 值，返回 0。")]),t._v(" "),n("li",[t._v("如果是 undefined，返回 NaN。")]),t._v(" "),n("li",[t._v("如果是字符串：如果字符串是空的（不包含任何字符），则将其转换为 0；如果含非数字，则将其转换为 NaN。")]),t._v(" "),n("li",[t._v("如果是对象，则执行 ToPrimitive 抽象操作，返回基本类型再按照以上规则处理。")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Number()  // 0\nNumber('')  // 0\nNumber(' ')  // 0\nNumber('0')  // 0\nNumber('asdf')  // NaN\nNumber(true)  // 1\nNumber(false)  // 0\nNumber(null)  // 0\nNumber(undefined)  // NaN    与null不同，需要注意\n// 对象会先通过抽象操作ToPrimitive转为基本类型，然后再转数字\nNumber({})  // NaN\nNumber([])  // 0\nNumber([''])  // 0\nNumber([' '])  // 0\nNumber(['0'])  // 0\nNumber([1,2])  // NaN\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br")])]),n("h3",{attrs:{id:"_2-5-toboolean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-toboolean","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.5 ToBoolean")]),t._v(" "),n("p",[t._v("抽象操作 ToBoolean，负责处理非布尔值到布尔值的强制类型转换。")]),t._v(" "),n("p",[t._v("转换为 boolean 类型是最为简单的一个。转换规则如下：")]),t._v(" "),n("p",[t._v("(1) 可以被强制类型转换为 false 的值")]),t._v(" "),n("ul",[n("li",[t._v("undefined")]),t._v(" "),n("li",[t._v("null")]),t._v(" "),n("li",[t._v("false")]),t._v(" "),n("li",[t._v("+0、-0 和 NaN")]),t._v(" "),n("li",[t._v('""')])]),t._v(" "),n("p",[t._v("(2) 其他值会被被强制类型转换为 true")]),t._v(" "),n("p",[t._v("这里有一个概念需要先理解：js 的操作符和操作数组成了表达式，表达式必定会返回一个值。无论是一元操作++a，还是布尔操作[] || false，都会返回一个值。")]),t._v(" "),n("h3",{attrs:{id:"_2-6-相等运算符类型转换，一共有-12-步骤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-相等运算符类型转换，一共有-12-步骤","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.6 相等运算符类型转换，一共有 12 步骤")]),t._v(" "),n("ol",[n("li",[t._v("如果 y 不是正常值，中断执行。")]),t._v(" "),n("li",[t._v("如果 Type(x)与 Type(y)相同，执行严格相等运算 x === y。")]),t._v(" "),n("li",[t._v("如果 x 是 null，y 是 undefined，返回 true。")]),t._v(" "),n("li",[t._v("如果 x 是 undefined，y 是 null，返回 true。")]),t._v(" "),n("li",[t._v("如果 Type(x)是数值，Type(y)是字符串，返回 x == ToNumber(y)的结果。")]),t._v(" "),n("li",[t._v("如果 Type(x)是字符串，Type(y)是数值，返回 ToNumber(x) == y 的结果。")]),t._v(" "),n("li",[t._v("如果 Type(x)是布尔值，返回 ToNumber(x) == y 的结果。")]),t._v(" "),n("li",[t._v("如果 Type(y)是布尔值，返回 x == ToNumber(y)的结果。")]),t._v(" "),n("li",[t._v("如果 Type(x)是字符串或数值或 Symbol 值，Type(y)是对象，返回 x == ToPrimitive(y)的结果。")]),t._v(" "),n("li",[t._v("如果 Type(x)是对象，Type(y)是字符串或数值或 Symbol 值，返回 ToPrimitive(x) == y 的结果。")]),t._v(" "),n("li",[t._v("返回 false。")])]),t._v(" "),n("p",[t._v("理解如图：\n"),n("img",{attrs:{src:"type.jpg",alt:"运算转换过程"}})]),t._v(" "),n("h2",{attrs:{id:"三、数据类型判断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、数据类型判断","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、数据类型判断")]),t._v(" "),n("ul",[n("li",[t._v("typeof")]),t._v(" "),n("li",[t._v("Object.prototype.toString")]),t._v(" "),n("li",[t._v("Instanceof")]),t._v(" "),n("li",[t._v("Constructor")]),t._v(" "),n("li",[t._v("实现 type API")])]),t._v(" "),n("h3",{attrs:{id:"_3-1-typeof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-typeof","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.1 typeof")]),t._v(" "),n("blockquote",[n("p",[t._v("typeof 是一元操作符，放在其单个操作数的前面，操作数可以是任意类型。返回值为表示操作数类型的一个字符串。")])]),t._v(" "),n("p",[t._v("typeof 不能细分 object,object 可以细分 Array、Function、Date、RegExp、Error 等。")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('"undefined" — 未定义\n"boolean"   — 布尔值\n"string"    — 字符串\n"number"    — 数值\n"object"    — 对象或null\n"function"  — 函数\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("h3",{attrs:{id:"_3-2-object-prototype-tostring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-object-prototype-tostring","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.2 Object.prototype.toString")]),t._v(" "),n("p",[t._v("当 toString 方法被调用的时候，下面的步骤会被执行：")]),t._v(" "),n("ol",[n("li",[t._v("如果 this 值是 undefined，就返回 [object Undefined]")]),t._v(" "),n("li",[t._v("如果 this 的值是 null，就返回 [object Null]")]),t._v(" "),n("li",[t._v("让 O 成为 ToObject(this) 的结果")]),t._v(" "),n("li",[t._v("让 class 成为 O 的内部属性 [[Class]] 的值")]),t._v(" "),n("li",[t._v('最后返回由 "[object " 和 class 和 "]" 三个部分组成的字符串')])]),t._v(" "),n("h3",{attrs:{id:"_3-3-instanceof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-instanceof","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.3 Instanceof")]),t._v(" "),n("p",[t._v("instanceof 用于检测引用类型，可以检测到它是什么类型的实例。\ninstanceof 检测一个对象 A 是不是另一个对象 B 的实例的原理是：查看对象 B 的 prototype 指向的对象是否在对象 A 的[[prototype]]链上。如果在，则返回 true,如果不在则返回 false。不过有一个特殊的情况，当对象 B 的 prototype 为 null 将会报错(类似于空指针异常)。")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('var sXzaver = new String("Xzavier");\nconsole.log(sXzaver instanceof String);   //  "true"\nvar aXzaver = [1,2,3];\nconsole.log(aXzaver instanceof Array);   //  "true"\n检测数组在ECMA Script5中定义了一个新方法Array.isArray()\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("h3",{attrs:{id:"_3-3-instanceof-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-instanceof-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.3 Instanceof")]),t._v(" "),n("p",[t._v("constructor 属性返回对创建此对象的数组函数的引用。可以用于检测自定义类型。")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    'xz'.constructor == String // true\n    (123).constructor == Number // true\n    (true).constructor == Boolean // true\n    [1,2].constructor == Array // true\n    ({name:'xz'}).constructor == Object // true\n    (function(){}).constructor == Function // true\n    (new Date()).constructor == Date // true\n    (Symbol()).constructor == Symbol // true\n    (/xz/).constructor == RegExp // true\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])]),n("h3",{attrs:{id:"_3-4-object-prototype-tostring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-object-prototype-tostring","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.4 Object.prototype.toString")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('原理：调用从Object继承来的原始的toString()方法\n\nObject.prototype.toString.call(\'xz\'); //"[object String]"\nObject.prototype.toString.call(123);  //"[object Number]"\nObject.prototype.toString.call(true); //"[object Boolean]"\nObject.prototype.toString.call([1,2]); //"[object Array]"\nObject.prototype.toString.call({name:\'xz\'}); //"[object Object]"\nObject.prototype.toString.call(function(){}); //"[object Function]"\nObject.prototype.toString.call(null); //"[object Null]"\nObject.prototype.toString.call(undefined); //"[object Undefined]"\nObject.prototype.toString.call(); //"[object Undefined]"\nObject.prototype.toString.call(new Date()); //"[object Date]"\nObject.prototype.toString.call(/xz/);  //"[object RegExp]"\nObject.prototype.toString.call(Symbol()); //"[object Symbol]"\n\nvar obj = {name:"Xzavier", age:23};\nvar a = [1,2,3];\n\nfunction isType(obj) {\n    return Object.prototype.toString.call(obj).slice(8, -1);\n}\nisType(obj);  // "Object"\nisType(a)  // "Array"\n\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br")])]),n("h2",{attrs:{id:"四、实现-type-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、实现-type-api","aria-hidden":"true"}},[t._v("#")]),t._v(" 四、实现 type API")]),t._v(" "),n("p",[t._v("既然有了 Object.prototype.toString 这个神器！那就让我们写个 type 函数帮助我们以后识别各种类型的值了。")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('var class2type = {};\n\n// 生成class2type映射\n"Boolean Number String Function Array Date RegExp Object Error".split(" ").map(function(item, index) {\n    class2type["[object " + item + "]"] = item.toLowerCase();\n})\n\nfunction type(obj) {\n    // 一箭双雕\n    if (obj == null) {\n        return obj + "";\n    }\n    return typeof obj === "object" || typeof obj === "function" ?\n        class2type[Object.prototype.toString.call(obj)] || "object" :\n        typeof obj;\n}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br")])]),n("h3",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),n("ul",[n("li",[t._v("《JavaScript 权威第六版》")]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/28",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 专题之类型判断(上) "),n("OutboundLink")],1)])]),t._v(" "),n("h2",{attrs:{id:"联系作者"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[t._v("#")]),t._v(" 联系作者")]),t._v(" "),n("div",{attrs:{align:"center"}},[n("p",[t._v("\n        平凡世界，贵在坚持。\n    ")]),t._v(" "),n("img",{attrs:{src:t.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);e.default=r.exports}}]);