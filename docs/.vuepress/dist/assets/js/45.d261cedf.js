(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{287:function(s,a,t){"use strict";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"操作系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作系统","aria-hidden":"true"}},[s._v("#")]),s._v(" 操作系统")]),s._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),t("p",[s._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),s._v(" "),t("h2",{attrs:{id:"内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[s._v("#")]),s._v(" 内容")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E6%A6%82%E8%BF%B0"}},[s._v("概述")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86"}},[s._v("进程管理")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E6%AD%BB%E9%94%81"}},[s._v("死锁")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%9B%9B%E3%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86"}},[s._v("内存管理")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E4%BA%94%E3%80%81%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86"}},[s._v("设备管理")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%85%AD%E3%80%81%E9%93%BE%E6%8E%A5"}},[s._v("链接")])])]),s._v(" "),t("h3",{attrs:{id:"一、概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、概述","aria-hidden":"true"}},[s._v("#")]),s._v(" 一、概述")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#11-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E7%89%B9%E5%BE%81"}},[s._v("操作系统基本特征")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#12-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD"}},[s._v("操作系统基本功能")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#13-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8"}},[s._v("系统调用")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#14-%E5%A4%A7%E5%86%85%E6%A0%B8%E5%92%8C%E5%BE%AE%E5%86%85%E6%A0%B8"}},[s._v("大内核和微内核")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#15-%E4%B8%AD%E6%96%AD%E5%88%86%E7%B1%BB"}},[s._v("中断分类")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#16-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A0%86%E5%92%8C%E6%A0%88%E8%AF%B4%E4%B8%80%E4%B8%8B%E5%A0%86%E6%A0%88%E9%83%BD%E5%AD%98%E5%82%A8%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE"}},[s._v("什么是堆和栈？说一下堆栈都存储哪些数据？")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#17-%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81"}},[s._v("如何理解分布式锁？")])])]),s._v(" "),t("h4",{attrs:{id:"_1-1-操作系统基本特征"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-操作系统基本特征","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.1 操作系统基本特征")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C"}},[s._v("并发与并行")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%85%B1%E4%BA%AB"}},[s._v("共享")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E8%99%9A%E6%8B%9F"}},[s._v("虚拟")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%BC%82%E6%AD%A5"}},[s._v("异步")])])]),s._v(" "),t("h5",{attrs:{id:"并发与并行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发与并行","aria-hidden":"true"}},[s._v("#")]),s._v(" 并发与并行")]),s._v(" "),t("p",[t("strong",[s._v("并发")]),s._v("是指宏观上在一段时间内能同时运行多个程序，而"),t("strong",[s._v("并行")]),s._v("则指同一时刻能运行多个指令。")]),s._v(" "),t("p",[t("strong",[s._v("并行")]),s._v("需要硬件支持，如多流水线或者多处理器。")]),s._v(" "),t("p",[s._v("操作系统通过引入进程和线程，使得程序能够并发运行。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os02.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"共享"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#共享","aria-hidden":"true"}},[s._v("#")]),s._v(" 共享")]),s._v(" "),t("p",[s._v("共享是指系统中的资源可以被多个并发里程共同使用。")]),s._v(" "),t("p",[s._v("有两种共享方式：互斥共享和同时共享。")]),s._v(" "),t("p",[t("strong",[s._v("互斥共享")]),s._v("的资源称为临界资源，例如打印机等，在同一时间只允许一个进程访问，需要用同步机制来实现对临界资源的访问。")]),s._v(" "),t("h5",{attrs:{id:"虚拟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚拟","aria-hidden":"true"}},[s._v("#")]),s._v(" 虚拟")]),s._v(" "),t("p",[s._v("虚拟技术把一个物理实体转换为多个逻辑实体。")]),s._v(" "),t("p",[s._v("利用多道程序设计技术，让每个用户都觉得有一个计算机专门为他服务。")]),s._v(" "),t("p",[s._v("主要有两种虚拟技术："),t("strong",[s._v("时分复用技术和空分复用技术")]),s._v("。例如多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占有处理器，每次只执行一小个时间片并快速切换。")]),s._v(" "),t("h5",{attrs:{id:"异步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步","aria-hidden":"true"}},[s._v("#")]),s._v(" 异步")]),s._v(" "),t("p",[s._v("异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。")]),s._v(" "),t("p",[s._v("但只要运行环境相同，OS 需要保证程序运行的结果也要相同。")]),s._v(" "),t("h4",{attrs:{id:"_1-2-操作系统基本功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-操作系统基本功能","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.2 操作系统基本功能")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86"}},[s._v("进程管理")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86"}},[s._v("内存管理")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86"}},[s._v("文件管理")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86"}},[s._v("设备管理")])])]),s._v(" "),t("h5",{attrs:{id:"进程管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程管理","aria-hidden":"true"}},[s._v("#")]),s._v(" 进程管理")]),s._v(" "),t("p",[s._v("进程控制、进程同步、进程通信、死锁处理、处理机调试等。")]),s._v(" "),t("h5",{attrs:{id:"内存管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存管理","aria-hidden":"true"}},[s._v("#")]),s._v(" 内存管理")]),s._v(" "),t("p",[s._v("内在分配、地址映射、内在保护与共享、虚拟内存等。")]),s._v(" "),t("h5",{attrs:{id:"文件管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件管理","aria-hidden":"true"}},[s._v("#")]),s._v(" 文件管理")]),s._v(" "),t("p",[s._v("文件存储空间的管理、目录管理、文件读写管理和保护等。")]),s._v(" "),t("h5",{attrs:{id:"设备管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设备管理","aria-hidden":"true"}},[s._v("#")]),s._v(" 设备管理")]),s._v(" "),t("p",[s._v("完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率。")]),s._v(" "),t("p",[s._v("主要包括缓冲管理、设备分配、设备处理、虚拟设备等。")]),s._v(" "),t("h4",{attrs:{id:"_1-3-系统调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-系统调用","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.3 系统调用")]),s._v(" "),t("p",[s._v("如果一个进程在"),t("strong",[s._v("用户态")]),s._v("需要使用"),t("strong",[s._v("内核态")]),s._v("的功能，就进行系统调用从而陷入内核，由操作系统代为完成。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os03.png",alt:""}})]),s._v(" "),t("p",[s._v("Linux 的系统调用主要有以下这些：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("Task")]),s._v(" "),t("th",[s._v("Commands")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("进程控制")]),s._v(" "),t("td",[s._v("fork();exit();wait();")])]),s._v(" "),t("tr",[t("td",[s._v("进程通信")]),s._v(" "),t("td",[s._v("pipe();chmget();mmap();")])]),s._v(" "),t("tr",[t("td",[s._v("文件操作")]),s._v(" "),t("td",[s._v("open();read();write();")])]),s._v(" "),t("tr",[t("td",[s._v("设备操作")]),s._v(" "),t("td",[s._v("ioctl();read();write();")])]),s._v(" "),t("tr",[t("td",[s._v("信息维护")]),s._v(" "),t("td",[s._v("getpid();alarm();sleep();")])]),s._v(" "),t("tr",[t("td",[s._v("安全")]),s._v(" "),t("td",[s._v("chmod();umask();chown();")])])])]),s._v(" "),t("h4",{attrs:{id:"_1-4-大内核和微内核"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-大内核和微内核","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.4 大内核和微内核")]),s._v(" "),t("ul",[t("li",[s._v("大内核")]),s._v(" "),t("li",[s._v("微内核")])]),s._v(" "),t("h5",{attrs:{id:"大内核"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#大内核","aria-hidden":"true"}},[s._v("#")]),s._v(" 大内核")]),s._v(" "),t("p",[s._v("大内核是将操作系统功能作为一个紧密结合的整体放到内核。")]),s._v(" "),t("p",[s._v("由于各模块共享信息，因此有很高的性能。")]),s._v(" "),t("h5",{attrs:{id:"微内核"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微内核","aria-hidden":"true"}},[s._v("#")]),s._v(" 微内核")]),s._v(" "),t("p",[s._v("由于操作系统不复杂，因此将一部分操作系统功能移出内核，从而降低内核的复杂性。移出的部分根据分层的原则划分成若干服务，相互独立。")]),s._v(" "),t("p",[s._v("在微内核结构下，操作系统被划分成小的、定义良好的模块，只有微内核这一个运行在内核态，其余模块运行在用户态。")]),s._v(" "),t("p",[s._v("因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os04.jpg",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"_1-5-中断分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-中断分类","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.5 中断分类")]),s._v(" "),t("ul",[t("li",[s._v("外中断")]),s._v(" "),t("li",[s._v("异常")]),s._v(" "),t("li",[s._v("陷入")])]),s._v(" "),t("h5",{attrs:{id:"外中断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#外中断","aria-hidden":"true"}},[s._v("#")]),s._v(" 外中断")]),s._v(" "),t("p",[s._v("由 CPU 执行指令以外的事件引起，如 I/O 完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。")]),s._v(" "),t("h5",{attrs:{id:"异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常","aria-hidden":"true"}},[s._v("#")]),s._v(" 异常")]),s._v(" "),t("p",[s._v("由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。")]),s._v(" "),t("h5",{attrs:{id:"陷入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#陷入","aria-hidden":"true"}},[s._v("#")]),s._v(" 陷入")]),s._v(" "),t("p",[s._v("在用户程序中使用系统使用。")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("类型")]),s._v(" "),t("th",[s._v("源头")]),s._v(" "),t("th",[s._v("响应方式")]),s._v(" "),t("th",[s._v("处理机制")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("中断")]),s._v(" "),t("td",[s._v("外设")]),s._v(" "),t("td",[s._v("异步")]),s._v(" "),t("td",[s._v("持续，对用户应用程序是透明的")])]),s._v(" "),t("tr",[t("td",[s._v("异常")]),s._v(" "),t("td",[s._v("应用程序意想不到的行为")]),s._v(" "),t("td",[s._v("同步")]),s._v(" "),t("td",[s._v("杀死或重新执行意想不到的应用程序指令")])]),s._v(" "),t("tr",[t("td",[s._v("系统调用")]),s._v(" "),t("td",[s._v("应用程序请求操作提供服务")]),s._v(" "),t("td",[s._v("异步或同步")]),s._v(" "),t("td",[s._v("等待和持续")])])])]),s._v(" "),t("h4",{attrs:{id:"_1-6-什么是堆和栈？说一下堆栈都存储哪些数据？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-什么是堆和栈？说一下堆栈都存储哪些数据？","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.6 什么是堆和栈？说一下堆栈都存储哪些数据？")]),s._v(" "),t("p",[s._v("栈区(stack)——由"),t("strong",[s._v("编译器")]),s._v("自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。")]),s._v(" "),t("p",[s._v("堆区(heap)——一般由"),t("strong",[s._v("程序员分配释放")]),s._v("，若程序员不释放，程序结束时可能由 OS 回收。")]),s._v(" "),t("p",[s._v("数据结构中这两个完全就不放一块来讲，数据结构中栈和队列才是好基友，我想新手也很容易区分。")]),s._v(" "),t("p",[s._v("我想需要区分的情况肯定不是在数据结构话题下，而大多是在 OS 关于不同对象的内存分配这块上。")]),s._v(" "),t("p",[s._v("简单讲的话，在 C 语言中：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int a[N];   // go on a stack\nint* a = (int *)malloc(sizeof(int) * N);  // go on a heap\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("img",{attrs:{src:"os05.jpg",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"_1-7-如何理解分布式锁？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-如何理解分布式锁？","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.7 如何理解分布式锁？")]),s._v(" "),t("p",[s._v("分布式锁，是控制分布式系统之间同步访问共享资源的一种方式。在分布式系统中，常常需要协调他们的动作。如果不同的系统或是同一个系统的不同主机之间共享了一个或一组资源，那么访问这些资源的时候，往往需要互斥来防止彼此干扰来保证一致性，在这种情况下，便需要使用到分布式锁。")]),s._v(" "),t("h3",{attrs:{id:"二、进程管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、进程管理","aria-hidden":"true"}},[s._v("#")]),s._v(" 二、进程管理")]),s._v(" "),t("ul",[t("li",[s._v("进程与线程")]),s._v(" "),t("li",[s._v("进程状态的切换（生命周期）")]),s._v(" "),t("li",[s._v("进程调度算法")]),s._v(" "),t("li",[s._v("进程同步")]),s._v(" "),t("li",[s._v("经典同步问题")]),s._v(" "),t("li",[s._v("进程通信")]),s._v(" "),t("li",[s._v("线程间通信和进程间通信")]),s._v(" "),t("li",[s._v("进程操作")]),s._v(" "),t("li",[s._v("孤儿进程和僵尸进程")]),s._v(" "),t("li",[s._v("守护进程")]),s._v(" "),t("li",[s._v("上下文切换")])]),s._v(" "),t("h4",{attrs:{id:"_2-1-进程与线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-进程与线程","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.1 进程与线程")]),s._v(" "),t("p",[t("img",{attrs:{src:"os06.png",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("进程")]),s._v(" "),t("li",[s._v("线程")]),s._v(" "),t("li",[s._v("区别")])]),s._v(" "),t("h5",{attrs:{id:"_2-1-1-进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-进程","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.1.1 进程")]),s._v(" "),t("p",[t("strong",[s._v("进程是资源分配的基本单位")]),s._v("，用来管理资源（例如：内在，文件，网络等资源）")]),s._v(" "),t("p",[s._v("进程控制块(Process Control Block, PCB)描述进程的基本信息和运行状态，所谓的创建进程和撤销进程，都是指对 PCB 的操作。"),t("strong",[s._v("（PCB 是描述进程的数据结构）")])]),s._v(" "),t("p",[s._v("下图显示了 4 个程序创建了 4 个进程，这 4 个进程可以并发地执行。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os01.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_2-1-2-线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-线程","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.1.2 线程")]),s._v(" "),t("p",[t("strong",[s._v("线程是独立调度的基本单位")]),s._v("，一个进程可以有多个线程，它们共享进程资源。QQ 和浏览器是两个进程，浏览器进程里面有很多线程，例如 HTTP 请求线程、事件响应线程、渲染线程等等，线程的并发执行使得在浏览器中点击一个新链接从而发起 HTTP 请求时，浏览器还可以响应用户的其它事件。")]),s._v(" "),t("h5",{attrs:{id:"_2-1-3-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-区别","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.1.3 区别")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("拥有资源")]),s._v("，进程得资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。")]),s._v(" "),t("li",[t("strong",[s._v("调度")]),s._v("，线程是独立调试的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程内的线程切换到另一个进程中的线程时，会引起进程切换。")]),s._v(" "),t("li",[t("strong",[s._v("系统开销")]),s._v("，由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新高度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。")]),s._v(" "),t("li",[t("strong",[s._v("通信方面")]),s._v("，进程间通信(IPC)需要进程同步和互斥手段的辅助，以保证数据的一致性。而线程间可以通过直接读/写同一进程中的数据段(如全局变量)来进行通信。")])]),s._v(" "),t("h4",{attrs:{id:"_2-2-进程状态的切换（生命周期）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-进程状态的切换（生命周期）","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.2 进程状态的切换（生命周期）")]),s._v(" "),t("p",[t("img",{attrs:{src:"os07.jpg",alt:""}})]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("就绪状态(ready)")]),s._v("：等待被调度")]),s._v(" "),t("li",[t("strong",[s._v("运行状态(running)")])]),s._v(" "),t("li",[t("strong",[s._v("阻塞状态(waiting)")]),s._v("：等待资源")])]),s._v(" "),t("p",[s._v("应该注意以下内容：")]),s._v(" "),t("ul",[t("li",[s._v("只有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 的时间片用完之后就会转为就绪状态，等待下一次调度。")]),s._v(" "),t("li",[s._v("阻塞状态就是缺少需要的资源从而由运行状态转换而来，但是该资源不包括 CPU 时间，缺少 CPU 时间会从运行态转换为就绪态。")]),s._v(" "),t("li",[s._v("进程只能自己阻塞自己，因为只有进程自身才知道何时需要等待某种事件的发生。")])]),s._v(" "),t("h4",{attrs:{id:"_2-3-进程调度算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-进程调度算法","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.3 进程调度算法")]),s._v(" "),t("p",[s._v("不同环境的调度算法目标不同，因此需要针对不同环境来讨论调度算法。")]),s._v(" "),t("ul",[t("li",[s._v("批处理系统")]),s._v(" "),t("li",[s._v("交互式系统")]),s._v(" "),t("li",[s._v("实时系统")])]),s._v(" "),t("h5",{attrs:{id:"_2-3-1-批处理系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-批处理系统","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.3.1 批处理系统")]),s._v(" "),t("p",[s._v("批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。")]),s._v(" "),t("ul",[t("li",[s._v("先来先服务(FCFS)")]),s._v(" "),t("li",[s._v("短作业优先")]),s._v(" "),t("li",[s._v("最短剩余时间优先")])]),s._v(" "),t("p",[t("strong",[s._v("先来先服务(FCFS)")]),s._v("，按照请求的顺序进行高度。有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。")]),s._v(" "),t("p",[t("strong",[s._v("短作业优先(SJF)")]),s._v("，按估计运行时间最短的顺序进行调度。长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。")]),s._v(" "),t("p",[t("strong",[s._v("最短剩余时间优先(SRTN)")]),s._v("，按估计剩余时间最短的顺序进行调度。")]),s._v(" "),t("h5",{attrs:{id:"_2-3-2-交互式系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-交互式系统","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.3.2 交互式系统")]),s._v(" "),t("p",[s._v("交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。")]),s._v(" "),t("ul",[t("li",[s._v("时间片轮转")]),s._v(" "),t("li",[s._v("优先级调度")]),s._v(" "),t("li",[s._v("多级反馈队列")])]),s._v(" "),t("p",[t("strong",[s._v("时间片轮转")])]),s._v(" "),t("p",[s._v("将所有就绪进程按 FCFS（先来先服务）的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。")]),s._v(" "),t("p",[s._v("时间片轮转算法的效率和时间片的大小有很大关系。因为进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os08.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("优先级调度")])]),s._v(" "),t("p",[s._v("为每个进程分配一个优先级，按优先级进行调度。")]),s._v(" "),t("p",[s._v("为了防止低优先级永远等不到调度，可以随着时间的失衡增加等待的优先级。")]),s._v(" "),t("p",[t("strong",[s._v("多级反馈队列")])]),s._v(" "),t("p",[s._v("如果一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。")]),s._v(" "),t("p",[s._v("多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8...。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次。")]),s._v(" "),t("p",[s._v("每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。")]),s._v(" "),t("p",[s._v("可以将这种调度算法看成是"),t("strong",[s._v("时间片轮转调度算法和优先级调度算法")]),s._v("的结合。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os09.jpg",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_2-3-3-实时系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-实时系统","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.3.3 实时系统")]),s._v(" "),t("p",[s._v("实时系统要求一个请求在一个确定时间内得到响应。")]),s._v(" "),t("p",[s._v("分为*"),t("em",[s._v("硬实时和软实时")]),s._v("，前者必须满足绝对的截止时间，后者可以容忍一定的超时。")]),s._v(" "),t("p",[s._v("参考资料：")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://c.biancheng.net/cpp/html/2595.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("操作系统典型调度算法_C 语言中文网"),t("OutboundLink")],1)])]),s._v(" "),t("h4",{attrs:{id:"_2-4-进程同步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-进程同步","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.4 进程同步")]),s._v(" "),t("ul",[t("li",[s._v("临界区")]),s._v(" "),t("li",[s._v("同步与互斥")]),s._v(" "),t("li",[s._v("信号量")]),s._v(" "),t("li",[s._v("管程")])]),s._v(" "),t("h5",{attrs:{id:"_2-4-1-临界区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-临界区","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.4.1 临界区")]),s._v(" "),t("p",[t("strong",[s._v("对临界资源进行访问的那段代码称为临界区。")])]),s._v(" "),t("p",[s._v("为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。")]),s._v(" "),t("h5",{attrs:{id:"_2-4-2-同步与互斥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-同步与互斥","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.4.2 同步与互斥")]),s._v(" "),t("ul",[t("li",[s._v("同步：多个进程按一定顺序执行；")]),s._v(" "),t("li",[s._v("互斥：多个进程在同一时刻只有一个进程能进入临界区。")])]),s._v(" "),t("h5",{attrs:{id:"_2-4-3-信号量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-3-信号量","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.4.3 信号量")]),s._v(" "),t("blockquote",[t("p",[s._v("P 和 V 是来源于两个荷兰词汇，P0---prolaag(荷兰语，尝试减少的意思)，V0---verhoog(荷兰语，增加的意思)")])]),s._v(" "),t("p",[s._v("信号量(Semaphone)是一个整形变量，可以对其执行 down 和 up 操作，也就是常见的 P 和 V 操作。")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("down")]),s._v(":如果信号量大于 0，执行-1 操作；如果信号量等于 0，进程睡眠，等待信号量大于 0；(阻塞)")]),s._v(" "),t("li",[t("strong",[s._v("up")]),s._v(":对信号量执行+1 操作，影印本睡眠的进程让其完成 down 操作。(唤醒)")])]),s._v(" "),t("p",[s._v("down 和 up 操作需要被设计成原语，不可分割，通常的做法是在执行这些操作的时候屏蔽中断。")]),s._v(" "),t("p",[s._v("如果信号量的取值只能为 0 或者 1，那么就成为了"),t("strong",[s._v("互斥量（Mutex）")]),s._v("，0 表示临界区已经加锁，1 表示临界区解锁。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("typedef int semaphore;\nsemaphore mutex = 1;\nvoid P1() {\n    down(&mutex);\n    // 临界区\n    up(&mutex);\n}\n\nvoid P2() {\n    down(&mutex);\n    // 临界区\n    up(&mutex);\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[t("strong",[s._v("使用信号量实现生产者——消费者问题")])]),s._v(" "),t("p",[s._v("问题描述：使用一个缓冲区来保存物品，只有缓冲区没有满，生产者才可以放入物品；只有缓冲区不为空，消费者才可以拿走物品。")]),s._v(" "),t("p",[s._v("因为缓冲区属于临界资源，因此需要使用一个互斥量 mutex 来控制对缓冲区的互斥访问。")]),s._v(" "),t("p",[s._v("为了同步生产者和消费者的行为，需要记录缓冲区中物品的数量。数量可以使用信号量来进行统计，这里需要使用两个信号：empty 记录空缓冲区的数量，full 记录缓冲区的数量。其中，empty 信号量是在生产者进程中使用，当 empty 不为 0 时，生产者才可以放入物品；full 信号量是在消费者进程中使用，当 full 信号量不为 0 时，消费者才可以取走物品。")]),s._v(" "),t("p",[s._v("注意，不能先对缓冲区进行加锁，再测试信号量。也就是说，不能先执行 down(mutex) 再执行 down(empty)。如果这么做了，那么可能会出现这种情况：生产者对缓冲区加锁后，执行 down(empty) 操作，发现 empty = 0，此时生产者睡眠。消费者不能进入临界区，因为生产者对缓冲区加锁了，也就无法执行 up(empty) 操作，empty 永远都为 0，那么生产者和消费者就会一直等待下去，造成死锁。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#define N 100\ntypedef int semaphore;\nsemaphore mutex = 1;\nsemaphore empty = N;\nsemaphore full = 0;\n\nvoid producer() {\n    while(TRUE){\n        int item = produce_item(); // 生产一个产品\n        // down(&empty) 和 down(&mutex) 不能交换位置，否则造成死锁\n        down(&empty); // 记录空缓冲区的数量，这里减少一个产品空间\n        down(&mutex); // 互斥锁\n        insert_item(item);\n        up(&mutex); // 互斥锁\n        up(&full); // 记录满缓冲区的数量，这里增加一个产品\n    }\n}\n\nvoid consumer() {\n    while(TRUE){\n        down(&full); // 记录满缓冲区的数量，减少一个产品\n        down(&mutex); // 互斥锁\n        int item = remove_item();\n        up(&mutex); // 互斥锁\n        up(&empty); // 记录空缓冲区的数量，这里增加一个产品空间\n        consume_item(item);\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])]),t("h5",{attrs:{id:"_2-4-5-管程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-5-管程","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.4.5 管程")]),s._v(" "),t("p",[s._v("管程(英语：Monitors，也称为监视器)是一种程序结构，结构内的多个子程序（对象或模块）形成的多个工作线程互斥访问共享资源。")]),s._v(" "),t("p",[s._v("使用信号量机制实现的生产者消费者问题需要客户端代码做很多控制，而管程把控制的代码独立出来，不仅不容易出错，也使得客户端代码调用更容易。")]),s._v(" "),t("p",[s._v("管程是为了解决信号量在临界区的 PV 操作上的配对的麻烦，把配对的 PV 操作集中在一起，生成一种羡慕嫉妒恨编程方法。其中使用了条件变量这种同步机制。")]),s._v(" "),t("p",[s._v("c 语言不支持管理，下面的示例代码使用了类 Pascal 语言来描述管理。示例代码的管程提供了 insert()和 remove()方法，客户端代码通过调用这两个方法解决生产者-消费者问题。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("monitor ProducerConsumer\n    integer i;\n    condition c;\n\n    procedure insert();\n    begin\n        // ...\n    end;\n\n    procedure remove();\n    begin\n        // ...\n    end;\nend monitor;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("管程有一个重要特性：在一个时刻只能有一个进程使用管程。进程在无法继续执行的时候不能一直占用管程，否者其它进程永远不能使用管程。")]),s._v(" "),t("p",[s._v("管程引入了"),t("strong",[s._v("条件变量")]),s._v("以及相关的操作：wait()和 signal()来实现同步操作。对条件变量执行 wait()操作会导致调用进程阻塞，把管程让出来给另一个进程持有。signal()操作用于唤醒被阻塞的进程。")]),s._v(" "),t("p",[t("strong",[s._v("使用管程实现生产者-消费者问题")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 管程\nmonitor ProducerConsumer\n    condition full, empty;\n    integer count := 0;\n    condition c;\n\n    procedure insert(item: integer);\n    begin\n        if count = N then wait(full);\n        insert_item(item);\n        count := count + 1;\n        if count = 1 then signal(empty);\n    end;\n\n    function remove: integer;\n    begin\n        if count = 0 then wait(empty);\n        remove = remove_item;\n        count := count - 1;\n        if count = N -1 then signal(full);\n    end;\nend monitor;\n\n// 生产者客户端\nprocedure producer\nbegin\n    while true do\n    begin\n        item = produce_item;\n        ProducerConsumer.insert(item);\n    end\nend;\n\n// 消费者客户端\nprocedure consumer\nbegin\n    while true do\n    begin\n        item = ProducerConsumer.remove;\n        consume_item(item);\n    end\nend;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br")])]),t("h4",{attrs:{id:"_2-5-经典同步问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-经典同步问题","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.5 经典同步问题")]),s._v(" "),t("p",[s._v("生产者和消费者问题前面已经讨论过了。")]),s._v(" "),t("h5",{attrs:{id:"_2-5-1-读者-写者问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-读者-写者问题","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.5.1 读者-写者问题")]),s._v(" "),t("p",[s._v("允许多个进程同时对数据进行操作，但是不允许读和写以及写和写操作同时发生。读者优先策略")]),s._v(" "),t("p",[s._v("Rcount:读操作的进程数量(Rcount=0)")]),s._v(" "),t("p",[s._v("CountMutex:对于 Rcount 进行加锁(CountMutex=1)")]),s._v(" "),t("p",[s._v("WriteMutex:互斥量对于写操作的加锁(WriteMutex=1)")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Rcount = 0;\nsemaphore CountMutex = 1;\nsemaphore WriteMutex = 1;\n\nvoid writer(){\n    while(true){\n        sem_wait(WriteMutex);\n        // TO DO write();\n        sem_post(WriteMutex);\n    }\n}\n\n// 读者优先策略\nvoid reader(){\n    while(true){\n        sem_wait(CountMutex);\n        if(Rcount == 0)\n            sem_wait(WriteMutex);\n        Rcount++;\n        sem_post(CountMutex);\n\n        // TO DO read();\n\n        sem_wait(CountMutex);\n        Rcount--;\n        if(Rcount == 0)\n            sem_post(WriteMutex);\n        sem_post(CountMutex);\n\t}\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br")])]),t("h5",{attrs:{id:"_2-5-2-哲学家进餐问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-哲学家进餐问题","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.5.2 哲学家进餐问题")]),s._v(" "),t("p",[t("img",{attrs:{src:"os23.jpg",alt:""}})]),s._v(" "),t("p",[s._v("五个哲学家围着一张圆桌，每个哲学家面前放着食物。哲学家的生活有两种交替活动：吃饭以及思考。当一个哲学家吃饭时，需要先拿起自己左右两边的两根筷子，并且一次只能拿起一根筷子。")]),s._v(" "),t("p",[t("strong",[s._v("方案一：下面是一种错误的解法，考虑到如果所有哲学家同时拿起左手边的筷子，那么就无法拿起右手边的筷子，造成死锁。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#define N 5\t\t   // 哲学家个数\nvoid philosopher(int i)  // 哲学家编号：0 － 4\n{\n    while(TRUE)\n    {\n        think();\t\t\t// 哲学家在思考\n        take_fork(i);\t\t\t// 去拿左边的叉子\n        take_fork((i + 1) % N);\t// 去拿右边的叉子\n        eat();\t\t\t\t// 吃面条中….\n        put_fork(i);\t\t\t// 放下左边的叉子\n        put_fork((i + 1) % N);\t// 放下右边的叉子\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[t("strong",[s._v("方案二：对拿叉子的过程进行了改进，但仍不正确")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#define N 5\t // 哲学家个数\nwhile(1)  // 去拿两把叉子\n{\n    take_fork(i);\t\t\t// 去拿左边的叉子\n    if(fork((i+1)%N)) {\t\t// 右边叉子还在吗\n    \ttake_fork((i + 1) % N);// 去拿右边的叉子\n    \tbreak;\t\t\t// 两把叉子均到手\n    }\n    else {\t\t\t\t// 右边叉子已不在\n    \tput_fork(i);\t\t// 放下左边的叉子\n    \twait_some_time();\t// 等待一会儿\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[t("strong",[s._v("方案三：等待时间随机变化。可行，但非万全之策")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#define N 5\t // 哲学家个数\nwhile(1)  // 去拿两把叉子\n{\n\ttake_fork(i);\t\t\t// 去拿左边的叉子\n\tif(fork((i+1)%N)) {\t\t// 右边叉子还在吗\n\t    take_fork((i + 1) % N);// 去拿右边的叉子\n\t    break;\t\t\t// 两把叉子均到手\n\t}\n\telse {\t\t\t\t// 右边叉子已不在\n\t    put_fork(i);\t\t// 放下左边的叉子\n\t    wait_random_time( );\t// 等待随机长时间\n\t}\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[t("strong",[s._v("方案四：互斥访问。正确，但每次只允许一人进餐")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("semaphore mutex\t   // 互斥信号量，初值1\nvoid philosopher(int i)  // 哲学家编号i：0－4\n{\n\twhile(TRUE){\n\t    think();\t\t\t// 哲学家在思考\n\t    P(mutex);\t\t\t// 进入临界区\n\t    take_fork(i);\t\t\t// 去拿左边的叉子\n\t    take_fork((i + 1) % N);\t// 去拿右边的叉子\n\t    eat();\t\t\t\t// 吃面条中….\n\t    put_fork(i);\t\t\t// 放下左边的叉子\n\t    put_fork((i + 1) % N);\t// 放下右边的叉子\n\t    V(mutex);\t\t\t// 退出临界区\n\t}\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("strong",[s._v("正确方案如下：")])]),s._v(" "),t("p",[s._v("为了防止死锁的发生，可以设置两个条件（临界资源）：")]),s._v(" "),t("ul",[t("li",[s._v("必须同时拿起左右两根筷子；")]),s._v(" "),t("li",[s._v("只有在两个邻居都没有进餐的情况下才允许进餐。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("//1. 必须由一个数据结构，来描述每个哲学家当前的状态\n#define N 5\n#define LEFT i // 左邻居\n#define RIGHT (i + 1) % N    // 右邻居\n#define THINKING 0\n#define HUNGRY   1\n#define EATING   2\ntypedef int semaphore;\nint state[N];                // 跟踪每个哲学家的状态\n\n//2. 该状态是一个临界资源，对它的访问应该互斥地进行\nsemaphore mutex = 1;         // 临界区的互斥\n\n//3. 一个哲学家吃饱后，可能要唤醒邻居，存在着同步关系\nsemaphore s[N];              // 每个哲学家一个信号量\n\nvoid philosopher(int i) {\n    while(TRUE) {\n        think();\n        take_two(i);\n        eat();\n        put_tow(i);\n    }\n}\n\nvoid take_two(int i) {\n    P(&mutex);  // 进入临界区\n    state[i] = HUNGRY; // 我饿了\n    test(i); // 试图拿两把叉子\n    V(&mutex); // 退出临界区\n    P(&s[i]); // 没有叉子便阻塞\n}\n\nvoid put_tow(i) {\n    P(&mutex);\n    state[i] = THINKING;\n    test(LEFT);\n    test(RIGHT);\n    V(&mutex);\n}\n\nvoid test(i) {         // 尝试拿起两把筷子\n    if(state[i] == HUNGRY && state[LEFT] != EATING && state[RIGHT] !=EATING) {\n        state[i] = EATING;\n        V(&s[i]); // 通知第i个人可以吃饭了\n    }\n}\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br")])]),t("h4",{attrs:{id:"_2-6-进程通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-进程通信","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.6 进程通信")]),s._v(" "),t("p",[s._v("进程同步与进程通信很容易混淆，它们的区别在于：")]),s._v(" "),t("ul",[t("li",[s._v("进程同步：控制多个进程按一定顺序执行")]),s._v(" "),t("li",[s._v("进程通信：进程间传输信息")])]),s._v(" "),t("p",[s._v("进程通信是一种手段，而进程同步是一种目的。也可以说，为了能够达到进程同步的目的，需要让进程进行通信，传输一些进程同步所需要的信息。")]),s._v(" "),t("h5",{attrs:{id:"_2-6-1-进程通信方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-1-进程通信方式","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.6.1 进程通信方式")]),s._v(" "),t("p",[t("img",{attrs:{src:"os24.jpg",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("直接通信")])]),s._v(" "),t("p",[s._v("发送进程直接把消息发送给接收进程，并将它挂在接收进程的消息缓冲队列上，接收进程从消息缓冲队列中取得消息。")]),s._v(" "),t("p",[s._v("Send 和 Receive 原语的使用格式如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Send(Receiver,message);//发送一个消息message给接收进程Receiver\nReceive(Sender,message);//接收Sender进程发送的消息message\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("间接通信")])]),s._v(" "),t("p",[s._v("间接通信方式是指进程之间的通信需要通过作为"),t("strong",[s._v("共享数据结构的实体")]),s._v("。该实体用来暂存发送进程发给目标进程的消息。")]),s._v(" "),t("p",[s._v("发送进程把消息发送到某个中间实体中，接收进程从中间实体中取得消息。这种中间实体一般称为信箱，这种通信方式又称为信箱通信方式。该通信方式广泛应用于计算机网络中，相应的通信系统称为电子邮件系统。")]),s._v(" "),t("h5",{attrs:{id:"_2-6-2-管道"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-2-管道","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.6.2 管道")]),s._v(" "),t("p",[s._v("管道是通过调用 pipe 函数创建的，fd[0] 用于读，fd[1] 用于写。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#include <unistd.h>\nint pipe(int fd[2]);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("它具有以下限制：")]),s._v(" "),t("ul",[t("li",[s._v("只支持半双工通信（单向传输）；")]),s._v(" "),t("li",[s._v("只能在父子进程中使用。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"os25.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_2-6-2-命名管道"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-2-命名管道","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.6.2 命名管道")]),s._v(" "),t("p",[s._v("也称为命名管道，去除了管道只能在父子进程中使用的限制。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#include <sys/stat.h>\nint mkfifo(const char *path, mode_t mode);\nint mkfifoat(int fd, const char *path, mode_t mode);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("FIFO 常用于客户-服务器应用程序中，FIFO 用作汇聚点，在客户进程和服务器进程之间传递数据。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os26.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_2-6-3-消息队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-3-消息队列","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.6.3 消息队列")]),s._v(" "),t("p",[s._v("间接（内核）")]),s._v(" "),t("p",[s._v("相比于 FIFO，消息队列具有以下优点：")]),s._v(" "),t("ul",[t("li",[s._v("消息队列可以独立于读写进程存在，从而避免了 FIFO 中同步管道的打开和关闭时可能产生的困难；")]),s._v(" "),t("li",[s._v("避免了 FIFO 的同步阻塞问题，不需要进程自己提供同步方法；")]),s._v(" "),t("li",[s._v("读进程可以根据消息类型有选择地接收消息，而不像 FIFO 那样只能默认地接收。")])]),s._v(" "),t("h5",{attrs:{id:"_2-6-4-信号量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-4-信号量","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.6.4 信号量")]),s._v(" "),t("p",[s._v("它是一个计数器，用于为多个进程提供对共享数据对象的访问。")]),s._v(" "),t("h5",{attrs:{id:"_2-6-5-共享内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-5-共享内存","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.6.5 共享内存")]),s._v(" "),t("p",[s._v("允许多个进程共享一个给定的存储区。因为数据不需要在进程之间复制，所以这是最快的一种 IPC。需要使用信号量用来同步对共享存储的访问。多个进程可以将同一个文件映射到它们的地址空间从而实现共享内存。另外 XSI 共享内存不是使用文件，而是使用使用内存的匿名段。")]),s._v(" "),t("h5",{attrs:{id:"_2-6-6-套接字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-6-套接字","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.6.6 套接字")]),s._v(" "),t("p",[s._v("与其它通信机制不同的是，它可用于不同机器间的进程通信。")]),s._v(" "),t("p",[s._v("参考资料："),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/5CbYGrylSKx1JwtOiW3aOQ",target:"_blank",rel:"noopener noreferrer"}},[s._v("记一次面试：进程之间究竟有哪些通信方式？ ---- 告别死记硬背"),t("OutboundLink")],1)]),s._v(" "),t("h4",{attrs:{id:"_2-7-线程间通信和进程间通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-线程间通信和进程间通信","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.7 线程间通信和进程间通信")]),s._v(" "),t("ul",[t("li",[s._v("线程间通信")]),s._v(" "),t("li",[s._v("进程间通信")])]),s._v(" "),t("h5",{attrs:{id:"_2-7-1-线程间通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-1-线程间通信","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.7.1 线程间通信")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("synchronized 同步")]),s._v(" "),t("ul",[t("li",[s._v("这种方式，本质上就是“共享内存” 式的通信。多个线程需要访问同一个共享变量，谁拿到了锁（获得了访问权限），谁就可以执行。")])])]),s._v(" "),t("li",[t("strong",[s._v("while 轮询方式")]),s._v(" "),t("ul",[t("li",[s._v("在这种方式下，ThreadA 不断地改变条件，ThreadB 不停地通过 while 语句检测这个条件 "),t("code",[s._v("(list.size()==5)")]),s._v("是否成立 ，从而实现了线程间的通信。但是这种方式会浪费 CPU 资源。")]),s._v(" "),t("li",[s._v("之所以说它浪费资源，是因为 JVM 调度器将 CPU 交给 ThreadB 执行时，它没做啥 “有用” 的工作，只是在不断地测试某个条件是否成立。")]),s._v(" "),t("li",[s._v("就类似于现实生活中，某个人一直看着手机屏幕是否有电话来了，而不是：在干别的事情，当有电话来时，响铃通知 TA 电话来了。")])])]),s._v(" "),t("li",[t("strong",[s._v("wait/notify 机制")]),s._v(" "),t("ul",[t("li",[s._v("当条件未满足时，ThreadA 调用 wait() 放弃 CPU，并进入阻塞状态。（不像 while 轮询那样占用 CPU）当条件满足时，ThreadB 调用 notify() 通知线程 A，所谓通知线程 A，就是唤醒线程 A，并让它进入可运行状态。")])])]),s._v(" "),t("li",[t("strong",[s._v("管道通信")]),s._v(" "),t("ul",[t("li",[s._v("java.io.PipedInputStream 和 java.io.PipedOutputStream 进行通信")])])])]),s._v(" "),t("h5",{attrs:{id:"_2-7-2-进程间通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-2-进程间通信","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.7.2 进程间通信")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("管道(Pip)")]),s._v("：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。")]),s._v(" "),t("li",[t("strong",[s._v("命名管道(named pipe)")]),s._v("：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令 mkfifo 或系统调用 mkfifo 来创建。")]),s._v(" "),t("li",[t("strong",[s._v("信号(Signal)")]),s._v(":信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给信号给进程本身；Linux 除了支持 Unix 早期信号主义函数 sigal 外，还支持语义符合 Posix.1 标准的信号函数 sigaction（实际上，该函数是基于 BSD 的，BSD 为了实现可靠信号机制，又能够统一对外接口，用 singaction 函数重新实现了 signal 函数）。")]),s._v(" "),t("li",[t("strong",[s._v("消息(Message)队列")]),s._v("：消息队列是消息的链接表，包括 Posix 消息队列 system V 消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺")]),s._v(" "),t("li",[t("strong",[s._v("共享内存")]),s._v("：保利多个进程可以访问同一块内存空间，是最快的可用 IPC 形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。")]),s._v(" "),t("li",[t("strong",[s._v("内存映射(mapped memory)")]),s._v("：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。")]),s._v(" "),t("li",[t("strong",[s._v("信号量(semaphore)")]),s._v("：主要作为进程间以及同一进程不同线程之间的同步手段。")]),s._v(" "),t("li",[t("strong",[s._v("套接口(Socket)")]),s._v("：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由 Unix 系统的 BSD 分支开发出来的，但现在一般可以移植到其它类 Unix 系统上：linux 和 System V 的变种都支持套接字。")])]),s._v(" "),t("p",[s._v("参考资料：")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.tuhd.top/2017/08/04/2017-08-04-threadandprocess/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Java 线程与线程、进程与进程之间通信方式 | 理想村 | 屠杭镝的博客"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/hapjin/p/5492619.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("JAVA 多线程之线程间的通信方式 - hapjin - 博客园"),t("OutboundLink")],1)])]),s._v(" "),t("h4",{attrs:{id:"_2-8-进程操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-进程操作","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.8 进程操作")]),s._v(" "),t("p",[s._v("Linux 进程结构可由三部分组成：")]),s._v(" "),t("ul",[t("li",[s._v("代码段（程序）")]),s._v(" "),t("li",[s._v("数据段（数据）")]),s._v(" "),t("li",[s._v("堆栈段（控制块 PCB）")])]),s._v(" "),t("p",[s._v("进程控制块是进程存在的惟一标识，系统通过 PCB 的存在而感知进程的存在。系统通过 PCB 对进程进行管理和调度。PCB 包括创建进程、执行进程、退出进程以及改变进程的优先级等。")]),s._v(" "),t("p",[s._v("一般程序转换为进程分以下几个步骤：")]),s._v(" "),t("ol",[t("li",[s._v("内核将程序读入内存，为程序分配内存空间")]),s._v(" "),t("li",[s._v("内核为该进程分配进程标识符 PID 和其他所需资源")]),s._v(" "),t("li",[s._v("内核为进程保存 PID 及相应的状态信息，把进程放到运行队列中等待执行，程序转化为进程后可以被操作系统的调度程序调度执行了")])]),s._v(" "),t("p",[s._v("在 UNIX 里，除了进程 0（即 PID=0 的交换进程，Swapper Process）以外的所有进程都是由其他进程使用系统调用 fork 创建的，这里调用 fork 创建新进程的进程即为父进程，而相对应的为其创建出的进程则为子进程，因而除了进程 0 以外的进程都只有一个父进程，但一个进程可以有多个子进程。操作系统内核以进程标识符（Process identifier，即 PID）来识别进程。进程 0 是系统引导时创建的一个特殊进程，在其调用 fork 创建出一个子进程（即 PID=1 的进程 1，又称 init）后，进程 0 就转为交换进程（有时也被称为空闲进程），而进程 1（init 进程）就是系统里其他所有进程的祖先。")]),s._v(" "),t("p",[s._v("进程 0：Linux 引导中创建的第一个进程，完成加载系统后，演变为进程调度、交换及存储管理进程。")]),s._v(" "),t("p",[s._v("进程 1：init 进程，由 0 进程创建，完成系统的初始化，是系统中所有其它用户进程的祖先进程。")]),s._v(" "),t("p",[s._v("Linux 中 1 号进程是由 0 号进程来创建的，因此必须要知道的是如何创建 0 号进程，由于在创建进程时，程序一直运行在内核态，而进程运行在用户态，因此创建 0 号进程涉及到特权级的变化，即从特权级 0 变到特权级 3，Linux 是通过模拟中断返回来实现特权级的变化以及创建 0 号进程，通过将 0 号进程的代码段选择子以及程序计数器 EIP 直接压入内核态堆栈，然后利用 iret 汇编指令中断返回跳转到 0 号进程运行。")]),s._v(" "),t("h5",{attrs:{id:"_2-8-1-创建一个进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-1-创建一个进程","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.8.1 创建一个进程")]),s._v(" "),t("p",[s._v("进程是系统中基本的执行单位。Linux 系统允许任何一个用户进程创建一个子进程，创建成功后，子进程存在于系统之中，并且独立于父进程。该子进程可以接受系统调度，可以得到分配的系统资源。系统也可以检测到子进程的存在，并且赋予它与父进程同样的权利。")]),s._v(" "),t("p",[s._v("Linux 系统下使用 fork()函数创建一个子进程，其函数原型如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#include <unistd.h>\npid_t fork(void);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("在讨论 fork() 函数之前，有必要先明确父进程和子进程两个概念。除了 0 号进程（该进程是系统自举时由系统创建的）以外，Linux 系统中的任何一个进程都是由其他进程创建的。创建新进程的进程，即调用 fork() 函数的进程就是父进程，而新创建的进程就是子进程。")]),s._v(" "),t("p",[s._v("fork() 函数不需要参数，返回值是一个进程标识符 (PID)。对于返回值，有以下 3 种情况：")]),s._v(" "),t("ol",[t("li",[s._v("对于父进程，fork() 函数返回新创建的子进程的 ID。")]),s._v(" "),t("li",[s._v("对于子进程，fork() 函数返回 0。由于系统的 0 号进程是内核进程，所以子进程的进程标识符不会是 0，由此可以用来区别父进程和子进程。")]),s._v(" "),t("li",[s._v("如果创建出错，则 fork() 函数返回 -1。")])]),s._v(" "),t("p",[s._v("fork() 函数会创建一个新的进程，并从内核中为此进程分配一个新的可用的进程标识符 (PID)，之后，为这个新进程分配进程空间，并将父进程的进程空间中的内容复制到子进程的进程空间中，包括父进程的数据段和堆栈段，并且和父进程共享代码段（写时复制）。这时候，系统中又多了一个进程，这个进程和父进程一模一样，两个进程都要接受系统的调度。")]),s._v(" "),t("p",[s._v("**注意：**由于在复制时复制了父进程的堆栈段，所以两个进程都停留在了 fork()函数中，等待返回。因此，fork()函数会返回两次，一次是在父进程中返回，另一次是在子进程中返回，这两次的返回值是不一样的。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os27.png",alt:""}})]),s._v(" "),t("p",[s._v("下面给出的示例程序用来创建一个子进程，该程序在父进程和子进程中分别输出不同的内容。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main(void)\n{\n\tpid_t pid; // 保存进程ID\n\tpid = fork(); // 创建一个新进程\n\tif(pid < 0){ // fork出错\n\t\tprintf("fail to fork\\n");\n\t\texit(1);\n\t}\n    else if(pid == 0){\t// 子进程\n        // 打印子进程的进程ID\n\t\tprintf("this is child, pid is : %u\\n", getpid());\n\t}\n    else{\n        // 打印父进程和其子进程的进程ID\n\t\tprintf("this is parent, pid is : %u, child-pid is : %u\\n", getpid(), pid);\n\t}\n\treturn 0;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("程序运行结果如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ ./fork\nParent, PID: 2598, Sub-process PID: 2599\nSub-process, PID: 2599, PPID: 2598\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("由于创建的新进程和父进程在系统看来是地位平等的两个进程，所以运行机会也是一样的，我们不能够对其执行先后顺序进行假设、先执行哪一个进程取系统的调度算法。如果想要指定的运行的顺序，则需要执行额外的操作。正因为如此，程序在运行时并不能保证输出顺序和上面所描述的一致。")]),s._v(" "),t("p",[s._v("getpid() 是获得当前进程的 pid，而 getppid() 则是获得父进程的 id。")]),s._v(" "),t("h5",{attrs:{id:"_2-8-2-父子进程的共享资源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-2-父子进程的共享资源","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.8.2 父子进程的共享资源")]),s._v(" "),t("p",[s._v("子进程完复制了父进程的地址空间的内容，包括堆栈段和数据段的内容。子进程并没有复制代码段，而是和父进程共用代码段。这样做是存在其合理依据的，因为子进程可能执行不同的流程，那么就会改变数据段和堆栈段，因此需要分开存储父子进程各自的数据段和堆栈段。但是代码段是只读的，不存在被修改的问题，因此这一个段可以让父子进程共享，以节省存储空间，如下图所示。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os28.png",alt:""}})]),s._v(" "),t("p",[s._v("下面给出一个示例来说明这个问题。该程序定义了一个全局变量 global、一个局部变量 stack 和一个指针 heap。该指针用来指向一块动态分配的内存区域。之后，该程序创建一个子进程，在子进程中修改 global、stack 和动态分配的内存中变量的值。然后在父子进程中分别打印出这些变量的值。由于父子进程的运行顺序是不确定的，因此我们先让父进程额外休眠 2 秒，以保证子进程先运行。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n// 全局变量，在数据段中\nint global;\nint main()\n{\n\tpid_t pid;\n\tint stack = 1; // 局部变量，在栈中\n\tint * heap;\n\theap = (int *)malloc(sizeof(int)); // 动态分配的内存，在堆中\n\t*heap = 2;\n\tpid = fork(); // 创建一个子进程\n\tif(pid < 0){ // 创建子进程失败\n\t\tprintf("fail to fork\\n");\n\t\texit(1);\n\t}\n    else if(pid == 0){ // 子进程，改变各变量的值\n\t\tglobal++; // 修改栈、堆和数据段\n\t\tstack++;\n\t\t(*heap)++;\n\t\tprintf("the child, data : %d, stack : %d, heap : %d\\n", global, stack, *heap);\n\t\texit(0); // 子进程运行结束\n\t}\n    // 父进程休眠2秒钟，保证子进程先运行\n\tsleep(2);\n    // 输出结果\n\tprintf("the parent, data : %d, stack : %d, heap : %d\\n", global, stack, *heap);\n\treturn 0;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br")])]),t("p",[s._v("程序运行效果如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ ./fork\nIn sub-process, global: 2, stack: 2, heap: 3\nIn parent-process, global: 1, stack: 1, heap: 2\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("由于父进程休眠了 2 秒钟，子进程先于父进程运行，因此会先在子进程中修改数据段和堆栈段中的内容。因此不难看出，子进程对这些数据段和堆栈段中内容的修改并不会影响到父进程的进程环境。")]),s._v(" "),t("h5",{attrs:{id:"_2-8-3-fork-函数的出错情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-3-fork-函数的出错情况","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.8.3 fork()函数的出错情况")]),s._v(" "),t("p",[s._v("有两种情况可能会导致 fork()函数出错：")]),s._v(" "),t("ol",[t("li",[s._v("系统中已经有太多的进程存在了")]),s._v(" "),t("li",[s._v("调用 fork()函数的用户进程太多了")])]),s._v(" "),t("p",[s._v("一般情况下，系统都会对一个用户所创建的进程数加以限制。如果操作系统不对其加限制，那么恶意用户可以利用这一缺陷攻击系统。下面是一个利用进程的特性编写的一个病毒程序，该程序是一个死循环，在循环中不断调用 fork()函数来创建子进程，直到系统中不能容纳如此多的进程而崩溃为止。下图展示了这种情况：")]),s._v(" "),t("p",[t("img",{attrs:{src:"os29.png",alt:""}})]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#include <unistd.h>\nint main()\n{\n\twhile(1)\n\t\tfork(); /* 不断地创建子进程，使系统中进程溢满 */\n\treturn 0;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h5",{attrs:{id:"_2-8-4-创建共享空间的子进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-4-创建共享空间的子进程","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.8.4 创建共享空间的子进程")]),s._v(" "),t("p",[s._v("进程在创建一个新的子进程之后，子进程的地址空间完全和父进程分开。父子进程是两个独立的进程，接受系统调度和分配系统资源的机会均等，因此父进程和子进程更像是一对兄弟。如果父子进程共用父进程的地址空间，则子进程就不是独立于父进程的。")]),s._v(" "),t("p",[s._v("Linux 环境下提供了一个与 fork() 函数类似的函数，也可以用来创建一个子进程，只不过新进程与父进程共用父进程的地址空间，其函数原型如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#include <unistd.h>\npid_t vfork(void);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("vfork() 和 fork() 函数的区别有以下两点：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("vfork() 函数产生的子进程和父进程完全共享地址空间，包括代码段、数据段和堆栈段，子进程对这些共享资源所做的修改，可以影响到父进程。由此可知，vfork() 函数与其说是产生了一个进程，还不如说是产生了一个线程。")])]),s._v(" "),t("li",[t("p",[s._v("vfork() 函数产生的子进程一定比父进程先运行，也就是说父进程调用了 vfork() 函数后会等待子进程运行后再运行。")])])]),s._v(" "),t("p",[s._v("下面的示例程序用来验证以上两点。在子进程中，我们先让其休眠 2 秒以释放 CPU 控制权，在前面的 fork() 示例代码中我们已经知道这样会导致其他线程先运行，也就是说如果休眠后父进程先运行的话，则第 1 点则为假；否则为真。第 2 点为真，则会先执行子进程，那么全局变量便会被修改，如果第 1 点为真，那么后执行的父进程也会输出与子进程相同的内容。代码如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('//@file vfork.c\n//@brief vfork() usage\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\nint global = 1;\n\nint main(void)\n{\n    pid_t pid;\n    int   stack = 1;\n    int  *heap;\n\n    heap = (int *)malloc(sizeof(int));\n    *heap = 1;\n\n    pid = vfork();\n    if (pid < 0)\n    {\n        perror("fail to vfork");\n        exit(-1);\n    }\n    else if (pid == 0)\n    {\n        //sub-process, change values\n        sleep(2);//release cpu controlling\n        global = 999;\n        stack  = 888;\n        *heap  = 777;\n        //print all values\n        printf("In sub-process, global: %d, stack: %d, heap: %d\\n",global,stack,*heap);\n        exit(0);\n    }\n    else\n    {\n        //parent-process\n        printf("In parent-process, global: %d, stack: %d, heap: %d\\n",global,stack,*heap);\n    }\n\n    return 0;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br")])]),t("p",[s._v("程序运行效果如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ ./vfork\nIn sub-process, global: 999, stack: 888, heap: 777\nIn parent-process, global: 999, stack: 888, heap: 777\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h5",{attrs:{id:"_2-8-5-在函数内部调用-vfork"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-5-在函数内部调用-vfork","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.8.5 在函数内部调用 vfork")]),s._v(" "),t("p",[s._v("在使用 vfork() 函数时应该注意不要在任何函数中调用 vfork() 函数。下面的示例是在一个非 main 函数中调用了 vfork() 函数。该程序定义了一个函数 f1()，该函数内部调用了 vfork() 函数。之后，又定义了一个函数 f2()，这个函数没有实际的意义，只是用来覆盖函数 f1() 调用时的栈帧。main 函数中先调用 f1() 函数，接着调用 f2() 函数。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\nint f1(void)\n{\n    vfork();\n    return 0;\n}\n\nint f2(int a, int b)\n{\n    return a+b;\n}\n\nint main(void)\n{\n    int c;\n\n    f1();\n    c = f2(1,2);\n    printf("%d\\n",c);\n\n    return 0;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("p",[s._v("程序运行效果如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ ./vfork\n3\nSegmentation fault (core dumped)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("通过上面的程序运行结果可以看出，一个进程运行正常，打印出了预期结果，而另一个进程似乎出了问题，发生了段错误。出现这种情况的原因可以用下图来分析一下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"os30.png",alt:""}})]),s._v(" "),t("p",[s._v("左边这张图说明调用 vfork() 之后产生了一个子进程，并且和父进程共享堆栈段，两个进程都要从 f1() 函数返回。由于子进程先于父进程运行，所以子进程先从 f1() 函数中返回，并且调用 f2() 函数，其栈帧覆盖了原来 f1() 函数的栈帧。当子进程运行结束，父进程开始运行时，就出现了右图的情景，父进程需要从 f1() 函数返回，但是 f1() 函数的栈帧已经被 f2() 函数的所替代，因此就会出现父进程返回出错，发生段错误的情况。")]),s._v(" "),t("p",[s._v("由此可知，使用 vfork() 函数之后，子进程对父进程的影响是巨大的，其同步措施势在必行。")]),s._v(" "),t("h5",{attrs:{id:"_2-8-6-退出进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-6-退出进程","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.8.6 退出进程")]),s._v(" "),t("p",[s._v("当一个进程需要退出时，需要调用退出函数。Linux 环境下使用 exit()函数退出进程，其函数原型如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#include <stdlib.h>\nvoid exit(int status);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("exit()函数的参数表示进程的退出状态，这个状态的值是一个整形，保存在全局变量"),t("code",[s._v("$?")]),s._v("中，在 shell 中可以通过"),t("code",[s._v("echo $?")]),s._v("来检查退出状态值。")]),s._v(" "),t("p",[s._v("注意：这个退出函数会深入内核注销掉进程的内核数据结构，并且释放掉进程的资源。")]),s._v(" "),t("h5",{attrs:{id:"_2-8-7-exit-函数与内核函数的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-7-exit-函数与内核函数的关系","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.8.7 exit 函数与内核函数的关系")]),s._v(" "),t("p",[s._v("exit 函数是一个标准的库函数，其内部封装了 Linux 系统调用 exit() 函数。两者的主要区别在于 exit() 函数会在用户空间做一些善后工作，例如清理用户的 I/O 缓冲区，将其内容写入 磁盘文件等，之后才进入内核释放用户进程的地址空间；而 exit() 函数直接进入内核释放用户进程的地址空间，所有用户空间的缓冲区内容都将丢失。")]),s._v(" "),t("h5",{attrs:{id:"_2-8-8-设置进程所有者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-8-设置进程所有者","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.8.8 设置进程所有者")]),s._v(" "),t("p",[s._v("每个进程都有两个用户 ID，实际用户 ID 和有效用户 ID。通常这两个 ID 的值是相等的，其取值为进程所有者的用户 ID。但是，在有些场合需要改变进程的有效用户 ID。Linux 环境下使用 setuid() 函数改变一个进程的实际用户 ID 和有效用户 ID，其函数原型如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#include <unistd.h>\nint setuid(uid_t uid);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("setuid() 函数的参数表示改变后的新用户 ID，如果成功修改当前进程的实际用户 ID 和有效用户 ID，函数返回值为 0；如果失败，则返回 -1。只有两种用户可以修改进程的实际用户 ID 和有效用户 ID：")]),s._v(" "),t("ol",[t("li",[s._v("根用户：根用户可以将进程的实际用户 ID 和有效用户 ID 更换。")]),s._v(" "),t("li",[s._v("其他用户：其该用户的用户 ID 等于进程的实际用户 ID 或者保存的用户 ID。")])]),s._v(" "),t("p",[s._v("也就是说，用户可以将自己的有效用户 ID 改回去。这种情况多出现于下面的情况：一个进程需要具有某种权限，所以将其有效用户 ID 设置为具有这种权限的用户 ID，当进程不需要这种权限时，进程还原自己之前的有效用户 ID，使自己的权限复原。下面给出一个修改的示例：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main(void)\n{\n\tFILE *fp;\n\tuid_t uid;\n\tuid_t euid;\n\tuid = getuid();\t\t/* 得到进程的实际用户ID */\n\teuid = geteuid();\t/* 得到进程的有效用户ID */\n\tprintf("the uid is : %d\\n", uid);\n\tprintf("the euid is : %d\\n", euid);\n\tif(setuid(8000) == -1){ /* 改变进程的实际用户ID和有效用户ID */\n\t\tperror("fail to set uid");\n\t\texit(1);\n\t}\n\tprintf("after changing\\n");\n\tuid = getuid();\t\t/* 再次得到进程的实际用户ID */\n\teuid = geteuid();\t/* 再次得到进程的有效用户ID */\n\tprintf("the uid is : %d\\n", uid);\n\tprintf("the euid is : %d\\n", euid);\n\treturn 0;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[s._v("程序运行效果如下")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$./setuid\nthe uid is : 0\nthe euid is : 0\nafter changing\nthe uid is : 8000\nthe euid is : 8000\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("本节参考：")]),s._v(" "),t("ul",[t("li",[s._v("《后台开发：核心技术与应用实践》")]),s._v(" "),t("li",[s._v("《Linux+C 程序设计大全》十一章：进程控制")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/xiaomanon/p/4201006.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("进程控制(2): 进程操作 - XiaoManon - 博客园"),t("OutboundLink")],1)])]),s._v(" "),t("h4",{attrs:{id:"_2-9-孤儿进程和僵尸进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-孤儿进程和僵尸进程","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.9 孤儿进程和僵尸进程")]),s._v(" "),t("ul",[t("li",[s._v("基本概念")]),s._v(" "),t("li",[s._v("问题及危害")]),s._v(" "),t("li",[s._v("测试代码")]),s._v(" "),t("li",[s._v("僵尸进程解决办法")])]),s._v(" "),t("h5",{attrs:{id:"_2-9-1-基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-1-基本概念","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.9.1 基本概念")]),s._v(" "),t("p",[s._v("我们知道在 Unix/Linux 中，正常情况下，子进程是通过父进程创建的，子进程在创建新的进程。子进程的结束和父进程的运行是一个异步过程，即父进程永远无法预测子进程 到底什么时候结束。当一个进程完成它的工作终止之后，它的父进程需要调用 wait() 或者 waitpid() 系统调用取得子进程的终止状态。")]),s._v(" "),t("p",[s._v("**孤儿进程：**一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被 init 进程（进程号为 1）所收养，并由 init 进程对它们完成状态收集工作。")]),s._v(" "),t("p",[s._v("**僵尸进程：**一个进程使用 fork 创建子进程，如果子进程退出，而父进程并没有调用 wait 或 waitpid 获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵尸进程。")]),s._v(" "),t("h5",{attrs:{id:"_2-9-2-问题及危害"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-2-问题及危害","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.9.2 问题及危害")]),s._v(" "),t("p",[s._v("Unix 提供了一种机制可以保证只要父进程想知道子进程结束时的状态信息，就可以得到。这种机制就是：在每个进程退出的时候，内核释放该进程所有的资源，包括打开的文件，占用的内存等。但是仍然为其保留一定的信息（包括进程号 the process ID，退出状态 the termination status of the process，运行时间 the amount of CPU time taken by the process 等)。直到父进程通过 wait / waitpid 来取时才释放。但这样就导致了问题，如果进程不调用 wait / waitpid 的话， 那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程。此即为僵尸进程的危害，应当避免。")]),s._v(" "),t("p",[s._v("孤儿进程是没有父进程的进程，孤儿进程这个重任就落到了 init 进程身上，init 进程就好像是一个民政局，专门负责处理孤儿进程的善后工作。每当出现一个孤儿进程的时候，内核就把孤 儿进程的父进程设置为 init，而 init 进程会循环地 wait() 它的已经退出的子进程。这样，当一个孤儿进程凄凉地结束了其生命周期的时候，init 进程就会代表党和政府出面处理它的一切善后工作。因此孤儿进程并不会有什么危害。")]),s._v(" "),t("p",[s._v("任何一个子进程（init 除外）在 exit() 之后，并非马上就消失掉，而是留下一个称为僵尸进程 (Zombie) 的数据结构，等待父进程处理。这是每个子进程在结束时都要经过的阶段。如果子进程在 exit()之后，父进程没有来得及处理，这时用 ps 命令就能看到子进程的状态是 Z。如果父进程能及时处理，可能用 ps 命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。如果父进程在子进程结束之前退出，则子进程将由 init 接管。 init 将会以父进程的身份对僵尸状态的子进程进行处理。")]),s._v(" "),t("p",[s._v("僵尸进程危害场景：")]),s._v(" "),t("p",[s._v("例如有个进程，它定期的产生一个子进程，这个子进程需要做的事情很少，做完它该做的事情之后就退出了，因此这个子进程的生命周期很短，但是，父进程只管生成新的子进程，至于子进程退出之后的事情，则一概不闻不问，这样，系统运行上一段时间之后，系统中就会存在很多的僵死进程，倘若用 ps 命令查看的话，就会看到很多状态为 Z 的进程。 严格地来说，僵死进程并不是问题的根源，罪魁祸首是产生出大量僵死进程的那个父进程。因此，当我们寻求如何消灭系统中大量的僵死进程时，答案就是把产生大 量僵死进程的那个元凶枪毙掉（也就是通过 kill 发送 SIGTERM 或者 SIGKILL 信号啦）。枪毙了元凶进程之后，它产生的僵死进程就变成了孤儿进程，这些孤儿进程会被 init 进程接管，init 进程会 wait() 这些孤儿进程，释放它们占用的系统进程表中的资源，这样，这些已经僵死的孤儿进程就能瞑目而去了。")]),s._v(" "),t("h5",{attrs:{id:"_2-9-3-测试代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-3-测试代码","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.9.3 测试代码")]),s._v(" "),t("p",[s._v("孤儿进程测试程序如下所示：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('\n#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <unistd.h>\n\nint main()\n{\n    pid_t pid;\n    //创建一个进程\n    pid = fork();\n    //创建失败\n    if (pid < 0)\n    {\n        perror("fork error:");\n        exit(1);\n    }\n    //子进程\n    if (pid == 0)\n    {\n        printf("I am the child process.\\n");\n        //输出进程ID和父进程ID\n        printf("pid: %d\\tppid:%d\\n",getpid(),getppid());\n        printf("I will sleep five seconds.\\n");\n        //睡眠5s，保证父进程先退出\n        sleep(5);\n        printf("pid: %d\\tppid:%d\\n",getpid(),getppid());\n        printf("child process is exited.\\n");\n    }\n    //父进程\n    else\n    {\n        printf("I am father process.\\n");\n        //父进程睡眠1s，保证子进程输出进程id\n        sleep(1);\n        printf("father process is  exited.");\n    }\n    return 0;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br")])]),t("p",[t("img",{attrs:{src:"os31.png",alt:""}})]),s._v(" "),t("p",[s._v("僵尸进程测试程序如下所示：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#include <stdio.h>\n#include <unistd.h>\n#include <errno.h>\n#include <stdlib.h>\n\nint main()\n{\n    pid_t pid;\n    pid = fork();\n    if (pid < 0)\n    {\n        perror("fork error:");\n        exit(1);\n    }\n    else if (pid == 0)\n    {\n        printf("I am child process.I am exiting.\\n");\n        exit(0);\n    }\n    printf("I am father process.I will sleep two seconds\\n");\n    //等待子进程先退出\n    sleep(2);\n    //输出进程信息\n    system("ps -o pid,ppid,state,tty,command");\n    printf("father process is exiting.\\n");\n    return 0;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v("测试结果如下所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"os32.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_2-9-4-僵尸进程解决办法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-4-僵尸进程解决办法","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.9.4 僵尸进程解决办法")]),s._v(" "),t("ul",[t("li",[s._v("通过信号机制\n"),t("ul",[t("li",[s._v("子进程退出时向父进程发送 SIGCHILD 信号，父进程处理 SIGCHILD 信号。在信号处理函数中调用 wait 进行处理僵尸进程")])])]),s._v(" "),t("li",[s._v("fork 两次\n"),t("ul",[t("li",[s._v("将子进程成为孤儿进程，从而其的父进程变为 init 进程，通过 init 进程可以处理僵尸进程")])])])]),s._v(" "),t("p",[s._v("参考资料：")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/Anker/p/3271773.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("孤儿进程与僵尸进程总结 - Anker's Blog - 博客园"),t("OutboundLink")],1)])]),s._v(" "),t("h4",{attrs:{id:"_2-10-守护进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-守护进程","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.10 守护进程")]),s._v(" "),t("p",[s._v("Linux Daemon（守护进程）是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。它不需要用户输入就能运行而且提供某种服务，不是对整个系统就是对某个用户程序提供服务。Linux 系统的大多数服务器就是通过守护进程实现的。常见的守护进程包括系统日志进程 syslogd、 web 服务器 httpd、邮件服务器 sendmail 和数据库服务器 mysqld 等。")]),s._v(" "),t("p",[s._v("守护进程一般在系统启动时开始运行，除非强行终止，否则直到系统关机都保持运行。守护进程经常以超级用户（root）权限运行，因为它们要使用特殊的端口（1-1024）或访问某些特殊的资源。")]),s._v(" "),t("p",[s._v("一个守护进程的父进程是 init 进程，因为它真正的父进程在 fork 出子进程后就先于子进程 exit 退出了，所以它是一个由 init 继承的孤儿进程。守护进程是非交互式程序，没有控制终端，所以任何输出，无论是向标准输出设备 stdout 还是标准出错设备 stderr 的输出都需要特殊处理。")]),s._v(" "),t("p",[s._v("守护进程的名称通常以 d 结尾，比如 sshd、xinetd、crond 等")]),s._v(" "),t("p",[s._v("编写守护进程的一般步骤步骤：")]),s._v(" "),t("ol",[t("li",[s._v("在父进程中执行 fork 并 exit 推出；")]),s._v(" "),t("li",[s._v("在子进程中调用 setsid 函数创建新的会话；")]),s._v(" "),t("li",[s._v("在子进程中调用 chdir 函数，让根目录 / 成为子进程的工作目录；")]),s._v(" "),t("li",[s._v("在子进程中调用 umask 函数，设置进程的 umask 为 0；")]),s._v(" "),t("li",[s._v("在子进程中关闭任何不需要的文件描述符")])]),s._v(" "),t("p",[s._v("参考资料：")]),s._v(" "),t("p",[s._v("-"),t("a",{attrs:{href:"https://blog.csdn.net/one_piece_hmh/article/details/52770111",target:"_blank",rel:"noopener noreferrer"}},[s._v("守护进程概念，以及怎么创建守护进程 - CSDN 博客"),t("OutboundLink")],1)]),s._v(" "),t("h4",{attrs:{id:"_2-11-上下文切换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-11-上下文切换","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.11 上下文切换")]),s._v(" "),t("p",[s._v("上下文切换，有时也称做"),t("strong",[s._v("进程切换或任务切换")]),s._v("，是指 CPU 从一个进程或线程切换到另一个进程或线程。 在操作系统中，CPU 切换到另一个进程需要保存当前进程的状态并恢复另一个进程的状态：当前运行任务转为就绪（或者挂起、删除）状态，另一个被选定的就绪任务成为当前任务")]),s._v(" "),t("p",[t("img",{attrs:{src:"os33.jpg",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"三、死锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、死锁","aria-hidden":"true"}},[s._v("#")]),s._v(" 三、死锁")]),s._v(" "),t("ul",[t("li",[s._v("什么是死锁")]),s._v(" "),t("li",[s._v("死锁的必要条件")]),s._v(" "),t("li",[s._v("死锁的处理方法")]),s._v(" "),t("li",[s._v("如何在写程序的时候就避免死锁")])]),s._v(" "),t("h4",{attrs:{id:"_3-1-什么是死锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-什么是死锁","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.1 什么是死锁")]),s._v(" "),t("p",[s._v("造成死锁的原因就是多个线程或进程对同一个资源的争抢或相互依赖。一个最简单的解释就是你去面试，面试官问你告诉我什么是死锁，我就录用你，你回答面试官你录用我，我告诉你。")]),s._v(" "),t("p",[s._v("如果一个进程集合里面的每个进程都在等待只能由这个集合中的其他一个进程（包括他自身）才能引发的事件，这种情况就是死锁。")]),s._v(" "),t("p",[s._v("这个定义可能点拗口，下面用一个简单例子说明。")]),s._v(" "),t("p",[s._v("资源 A、B，进程 C、D 描述如下：")]),s._v(" "),t("p",[s._v("资源 A 和资源 B，都是不可剥夺资源，现在进程 C 已经申请了资源 A，进程 D 也申请了资源 B，进程 C 接下来的操作需要用到资源 B，而进程 D 恰好也在申请资源 A，进程 C、D 都是不到接下来的资源，那么就引发了死锁。")]),s._v(" "),t("p",[t("strong",[s._v("然后套用回去定义")]),s._v("：如果一个进程集合里面（进程 C 和进程 D）的每个进程（进程 C 和进程 D）都在等待只能由这个集合中的其他一个进程（对于进程 C，他在等进程 D；对于进程 D，他在等进程 C）才能引发的事件（释放相应资源）。")]),s._v(" "),t("p",[s._v("这里的资源包括了软的资源（代码块）和硬的资源（例如扫描仪）。资源一般可以分两种："),t("strong",[s._v("可剥夺资源（Preemptable）和不可剥夺资源（Nonpreemptable）")]),s._v("。一般来说对于由可剥夺资源引起的死锁可以由系统的重新分配资源来解决，所以一般来说大家说的死锁都是由于不可剥夺资源所引起的。")]),s._v(" "),t("h4",{attrs:{id:"_3-2-死锁的必要条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-死锁的必要条件","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.2 死锁的必要条件")]),s._v(" "),t("p",[t("img",{attrs:{src:"os20.png",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("互斥：每个资源要么已经分配给了一个进程，要么就是可用的。")]),s._v(" "),t("li",[s._v("占有和等待：已经得到了某个资源的进程可以再请求新的资源。")]),s._v(" "),t("li",[s._v("不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。")]),s._v(" "),t("li",[s._v("循环等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。")])]),s._v(" "),t("h4",{attrs:{id:"_3-3-死锁的处理方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-死锁的处理方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.3 死锁的处理方法")]),s._v(" "),t("ul",[t("li",[s._v("处理死锁的策略")]),s._v(" "),t("li",[s._v("死锁检测与死锁恢复")]),s._v(" "),t("li",[s._v("死锁预防")]),s._v(" "),t("li",[s._v("死锁避免")])]),s._v(" "),t("h5",{attrs:{id:"_3-3-1-处理死锁的策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-处理死锁的策略","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.3.1 处理死锁的策略")]),s._v(" "),t("ul",[t("li",[s._v("鸵鸟策略\n"),t("ul",[t("li",[s._v("把头埋在沙子里，假装根本没有发生问题。")]),s._v(" "),t("li",[s._v("因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。")]),s._v(" "),t("li",[s._v("大多数操作系统，包括 Unix，Liunx 和 Windows，处理死锁问题的办法仅仅是忽略它。")])])]),s._v(" "),t("li",[s._v("检测死锁并且恢复。")]),s._v(" "),t("li",[s._v("仔细地对资源进行动态分配，以避免死锁。")]),s._v(" "),t("li",[s._v("通过破除死锁四个必要条件之一，来防止死锁产生。")])]),s._v(" "),t("h5",{attrs:{id:"_3-3-2-死锁检测与死锁恢复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-死锁检测与死锁恢复","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.3.2 死锁检测与死锁恢复")]),s._v(" "),t("p",[s._v("不试图阻止死锁，而是当检测到死锁发生时，采取措施进行恢复。")]),s._v(" "),t("p",[s._v("（一）每种类型一个资源的死锁检测")]),s._v(" "),t("p",[t("img",{attrs:{src:"os21.png",alt:""}})]),s._v(" "),t("p",[s._v("上图为资源分配图，其中方框表示资源，圆圈表示进程。资源指向进程表示该资源已经分配给该进程，进程指向资源表示进程获取该资源。")]),s._v(" "),t("p",[s._v("图 a 可以抽取出环，如图 b，它满足了环路等待条件，因此会发生死锁。")]),s._v(" "),t("p",[s._v("每种类型一个资源的死锁检测算法是通过检测有向图是否存在环来实现，从一个节点出发进行尝试优先搜索，对访问过的节点进行标记，如果访问了已经标记的节点，就表示有向图存在环，也就是检测到死锁的发生。")]),s._v(" "),t("p",[s._v("（二）每种类型多个资源的死锁检测")]),s._v(" "),t("p",[t("img",{attrs:{src:"os22.png",alt:""}})]),s._v(" "),t("p",[s._v("上图中，有三个进程四个资源，每个数据代表的含义如下：")]),s._v(" "),t("ul",[t("li",[s._v("E 向量：资源总量")]),s._v(" "),t("li",[s._v("A 向量：资源剩余量")]),s._v(" "),t("li",[s._v("C 矩阵：每个进程所拥有的资源数量，每一行都代表一个进程拥有资源的数量")]),s._v(" "),t("li",[s._v("R 矩阵：每个进程请求的资源数量")])]),s._v(" "),t("p",[s._v("进程 P1 和 P2 所请求的资源都得不到满足，只有进程 P3 可以，让 P3 执行，之后释放 P3 拥有的资源，此时 A=(2 2 2 0)。P2 可以执行，执行后释放 P2 拥有的资源，A=(4 2 2 1)。P1 也可以执行。所有进程都可以顺利执行，没有死锁。")]),s._v(" "),t("p",[s._v("算法总结如下：")]),s._v(" "),t("p",[s._v("每个进程最开始时都不被标记，执行过程有可能被标记。当算法结束时，任何没有被标记的进程都是死锁进程。")]),s._v(" "),t("ol",[t("li",[s._v("寻找一个没有标记的进程 Pi，它所请求的资源小于等于 A。")]),s._v(" "),t("li",[s._v("如果找到了这样一个进程，那么将 C 矩阵的第 i 行向量加到 A 中，标记该进程，并转回 1.")]),s._v(" "),t("li",[s._v("如果没有这样一个进程，算法终止。")])]),s._v(" "),t("p",[s._v("（三）死锁恢复")]),s._v(" "),t("ul",[t("li",[s._v("利用抢占恢复")]),s._v(" "),t("li",[s._v("利用回滚恢复")]),s._v(" "),t("li",[s._v("通过杀死进程恢复")])]),s._v(" "),t("h5",{attrs:{id:"_3-3-3-死锁预防"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3-死锁预防","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.3.3 死锁预防")]),s._v(" "),t("p",[s._v("在程序运行之前预防发生死锁，确保系统永远不会进入死锁状态。")]),s._v(" "),t("p",[t("strong",[s._v("（一）破坏互斥条件")])]),s._v(" "),t("p",[s._v("例如假脱机打印技术允许若干个进程同时输出，唯一真正请求物理打印机的进程是打印机守护进程。（把互斥地封装成可以同时访问的，例如：打印机的缓存）")]),s._v(" "),t("p",[t("strong",[s._v("（二）破坏占有和等待条件")])]),s._v(" "),t("p",[s._v("一种实现方式是规定所有进程在开始执行前请求所需要的全部资源。")]),s._v(" "),t("p",[s._v("但是，这种策略也有如下缺点：")]),s._v(" "),t("ul",[t("li",[s._v("在许多情况下。一个进程在执行之前不可能知道它所需要的全部资源。这是由于进程在执行时是动态的，不可预测的；")]),s._v(" "),t("li",[s._v("资源利用率低。无论所分资源何时用到，一个进程只有在占有所需的全部资源后才能执行。即使有些资源最后才被该进程用到一次，但该进程在生存期间却一直占有它们，造成长期占着不用的状况。这显然是一种极大的资源浪费；")]),s._v(" "),t("li",[s._v("降低了进程的并发性。因为资源有限，双加上存在浪费，能分配到所需全部资源的进程个数就必然少了。")])]),s._v(" "),t("p",[t("strong",[s._v("（三）破坏不可抢占条件")])]),s._v(" "),t("p",[s._v("允许进程强行从占有者那里夺取某些资源。就是说，当一个进程已占有了某些资源，它又申请新的资源，但不能立即被满足时，它必须释放所占有的全部资源，以后再重新申请。它所释放的资源可以分配给其它进程。这就相当于该进程占有的资源被隐蔽地强占了。这种预防死锁的方法实现起来困难，会降低系统性能。")]),s._v(" "),t("p",[t("strong",[s._v("（四）破坏循环等待")])]),s._v(" "),t("p",[s._v("实行资源有序分配策略。采用这种策略，即把资源事先分类编号，按号分配，使进程在申请，占用资源时不会形成环路。所有进程对资源的请求必须严格按资源序号递增的顺序提出。进程占用了小号资源，才能申请大号资源，就不会产生环路，从而预防了死锁。这种策略与前面的策略相比，资源的利用率和系统吞吐量都有很大提高，但是也存在以下缺点：")]),s._v(" "),t("ul",[t("li",[s._v("限制了进程对资源的请求，同时给系统中所有资源合理编号也是件困难事，并增加了系统开销；")]),s._v(" "),t("li",[s._v("为了遵循按编号申请的次序，暂不使用的资源也需要提前申请，从而增加了进程对资源的占用时间。")])]),s._v(" "),t("h5",{attrs:{id:"_3-3-4-死锁避免"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-死锁避免","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.3.4 死锁避免")]),s._v(" "),t("p",[s._v("在程序运行时避免发生死锁，在使用前进行判断，只允许不会出现死锁的进程请求资源。")]),s._v(" "),t("p",[s._v("(一）安全状态")]),s._v(" "),t("p",[t("img",{attrs:{src:"os34.png",alt:""}})]),s._v(" "),t("p",[s._v("图 a 的第二列 Has 表示已拥有的资源数，第三列 Max 表示总共需要的资源数，Free 表示还有可以使用的资源数。从图 a 开始出发，先让 B 拥有所需的所有资源（图 b），运行结束后释放 B，此时 Free 变为 5（图 c）；接着以同样的方式运行 C 和 A，使得所有进程都能成功运行，因此可以称图 a 所示的状态时安全的。")]),s._v(" "),t("p",[s._v("定义：如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每一个进程运行完毕，则称该状态是安全的。")]),s._v(" "),t("p",[s._v("安全状态的检测与死锁的检测类似，因为安全状态必须要求不能发生死锁。下面的银行家算法与死锁检测算法非常类似，可以结合着做参考对比。")]),s._v(" "),t("p",[s._v("（二）单个资源的银行家算法")]),s._v(" "),t("p",[s._v("一个小城镇的银行家，他向一群客户分别承诺了一定的贷款额度，算法要做的是判断对请求的满足是否会进入不安全状态，如果是，就拒绝请求；否则予以分配。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os35.png",alt:""}})]),s._v(" "),t("p",[s._v("上图 c 为不安全状态，因此算法会拒绝之前的请求，从而避免进入图 c 中的状态。")]),s._v(" "),t("p",[s._v("（三）多个资源的银行家算法")]),s._v(" "),t("p",[t("img",{attrs:{src:"os36.png",alt:""}})]),s._v(" "),t("p",[s._v("上图中有五个进程，四个资源。左边的图表示已经分配的资源，右边的图表示还需要分配的资源。最右边的 E、P 以及 A 分别表示：总资源、已分配资源以及可用资源，注意这三个为向量，而不是具体数值，例如 A=(1020)，表示 4 个资源分别还剩下 1/0/2/0。")]),s._v(" "),t("p",[s._v("检查一个状态是否安全的算法如下：")]),s._v(" "),t("ul",[t("li",[s._v("查找右边的矩阵是否存在一行小于等于向量 A。如果不存在这样的行，那么系统将会发生死锁，状态是不安全的。")]),s._v(" "),t("li",[s._v("假若找到这样一行，将该进程标记为终止，并将其已分配资源加到 A 中。")]),s._v(" "),t("li",[s._v("重复以上两步，直到所有进程都标记为终止，则状态时安全的。")])]),s._v(" "),t("p",[s._v("如果一个状态不是安全的，需要拒绝进入这个状态。")]),s._v(" "),t("h4",{attrs:{id:"_3-4-如何在写程序的时候就避免死锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-如何在写程序的时候就避免死锁","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.4 如何在写程序的时候就避免死锁")]),s._v(" "),t("p",[s._v("所谓的死锁呢，发生的主要原因在于了有多个进程去竞争资源，也就是同时去抢占。")]),s._v(" "),t("p",[s._v("可以自己写一个支持多线程的消息管理类，单开一个线程访问独占资源，其它纯种用消息交互实现间接访问。这种机制适应性强、效率高，更适合多核环境。")]),s._v(" "),t("h3",{attrs:{id:"四、内存管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、内存管理","aria-hidden":"true"}},[s._v("#")]),s._v(" 四、内存管理")]),s._v(" "),t("ul",[t("li",[s._v("虚拟内存")]),s._v(" "),t("li",[s._v("分页系统地址映射")]),s._v(" "),t("li",[s._v("页面置换算法")]),s._v(" "),t("li",[s._v("分段")]),s._v(" "),t("li",[s._v("段页式")]),s._v(" "),t("li",[s._v("分页与分段的比较")])]),s._v(" "),t("h4",{attrs:{id:"_4-1-虚拟内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-虚拟内存","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.1 虚拟内存")]),s._v(" "),t("p",[s._v("虚拟内在的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。")]),s._v(" "),t("p",[s._v("为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。当程序引用到一部分不在物理内存中的地址空间时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。")]),s._v(" "),t("p",[s._v("从上面的描述中可以看出，虚拟内存允许程序不用将地址空间中的每一页都映射到物理内存，也就是说一个程序不需要全部调入内存可以运行，这使得有限的内在运行大程序成为可能。例如有一台计算机可以产生 16 位地址，那么一个程序的地址空间范围是 0~64K。该计算机只有 32KB 的物理内存，虚拟内存技术允许该计算机运行一个 64K 大小的程序。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os15.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"_4-2-分页系统地址映射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-分页系统地址映射","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.2 分页系统地址映射")]),s._v(" "),t("ul",[t("li",[s._v("内存管理单元（MMU）：管理着地址空间和物理内存的转换。")]),s._v(" "),t("li",[s._v("页表（Page table）：页（地址空间）和页框（物理内存空间）的映射表。例如下图中，页表的第 0 个表项为 010，表示第 0 个页映射到第 2 个页框。页表项的最后一位用来标记页是否在内存中。")])]),s._v(" "),t("p",[s._v("下图的页表存放着 16 个页，这 16 个页需要用 4 个比特位来进行索引定位。因此对虚拟地址（0010 000000000100），前 4 位是用来存储页面号，而后 12 位存储在页中的偏移量。")]),s._v(" "),t("p",[s._v("（0010 000000000100）根据前 4 位得到页号为 2，读取表项内容为(110 1)，它的前 3 为页框号，最后 1 位表示该页在内存中。最后映射得到物理内在地址为（0010 000000000100）")]),s._v(" "),t("p",[t("img",{attrs:{src:"os16.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"_4-3-页面置换算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-页面置换算法","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.3 页面置换算法")]),s._v(" "),t("p",[s._v("在程序运行过程中，如果要访问的页面不在内存中，就发生缺页中断从而将该页调入内存中。此时如果内在已无空闲空间，系统必须从内存中调出一个页面到磁盘对换区中来腾出空间。")]),s._v(" "),t("p",[s._v("页面转换算法和缓存淘汰策略类似，可以将内存看成磁盘的缓存。在缓存系统中，缓存的大小有限，当有新的缓存到达时，需要淘汰一部分已经存在的缓存，这样才有空间存放新的缓存数据。")]),s._v(" "),t("p",[s._v("页面转换算法的主要目标是使页面转换频率最低（也可以说缺页率最低）。")]),s._v(" "),t("ul",[t("li",[s._v("最佳")]),s._v(" "),t("li",[s._v("最近最久未使用")]),s._v(" "),t("li",[s._v("最近未使用")]),s._v(" "),t("li",[s._v("先进先出")]),s._v(" "),t("li",[s._v("第二次机会算法")]),s._v(" "),t("li",[s._v("时钟")])]),s._v(" "),t("h5",{attrs:{id:"_4-3-1-最佳-optimal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-最佳-optimal","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.3.1 最佳(Optimal)")]),s._v(" "),t("p",[s._v("所选择的被换出的页面将是最长时间内不再被访问，通常可以保证获得最低的缺页率。")]),s._v(" "),t("p",[s._v("是一种理论上的算法，因为无法知道一个页面多长时间不再被访问。")]),s._v(" "),t("p",[s._v("举例：一个系统为某进程分配了三个物理地，并有如下页面引用序列：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\n70120304230321201701\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("开始运行时，先将 7,0,1 三个页面装入内存。当进程要访问页面 2 时，产生缺页中断，会将页面 7 换出，因为页面 7 再次被访问的时间最长。")]),s._v(" "),t("h5",{attrs:{id:"_4-3-2-最近最久未使用-lru-least-recently-used"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-最近最久未使用-lru-least-recently-used","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.3.2 最近最久未使用(LRU, Least Recently Used)")]),s._v(" "),t("p",[s._v("虽然无法知道将来要使用的页面情况，但是可以知道过去使用页面的情况。LRU 将最近最久未使用的页面换出。")]),s._v(" "),t("p",[s._v("为了实现 LRU，需要在内存中维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面时最近最久未访问的。")]),s._v(" "),t("p",[s._v("因为每次访问都需要更新链表，因此这种方式实现的 LRU 代价很高。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os17.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_4-3-3-最近未使用-nru-not-recently-used"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-最近未使用-nru-not-recently-used","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.3.3 最近未使用(NRU, Not Recently Used)")]),s._v(" "),t("p",[s._v("每个页面都有两个状态位：R 与 M，当页面被访问时设置页面的 R=1，当页面被修改时设置 M=1.其中 R 位会定时被清零。可以将页面分成以下四类：")]),s._v(" "),t("ul",[t("li",[s._v("R=0，M=0")]),s._v(" "),t("li",[s._v("R=0，M=1")]),s._v(" "),t("li",[s._v("R=1，M=0")]),s._v(" "),t("li",[s._v("R=1，M=1")])]),s._v(" "),t("p",[s._v("当发生缺页中断时，NRU 算法随机地从类编号最小的非空类中挑选一个页面将它换出。")]),s._v(" "),t("p",[s._v("NRU 优先我换出已经被修改的脏页面(R=0，M=1)，而不是被频繁使用的干净页面(R=1,M=0).")]),s._v(" "),t("h5",{attrs:{id:"_4-3-4-先进先出-fifo-first-in-first-out"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-4-先进先出-fifo-first-in-first-out","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.3.4 先进先出(FIFO, First In First Out)")]),s._v(" "),t("p",[s._v("选择换出的页面是最先进入的页面。")]),s._v(" "),t("p",[s._v("该算法会将那些经常被访问的页面也被换出，从而使缺页率升高。")]),s._v(" "),t("h5",{attrs:{id:"_4-3-5-第二次机会算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-5-第二次机会算法","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.3.5 第二次机会算法")]),s._v(" "),t("p",[s._v("FIFO 算法可能会把经常使用的页面置换出去，为了避免这一问题，对该算法做一个简单的修改：")]),s._v(" "),t("p",[s._v("当页面被访问（读或写）时设置该页面的 R 位为 1.需要替换的时候，检查最老页面的 R 位。如果 R 位是 0，那么这个页面既老又没有被使用，可以立刻置换掉；如果是 1，就将 R 位清 0，并把该页面放到链表的尾端，修改它的装入时间使它就像刚装入的一样，然后继续从链表的头部开始搜索。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os18.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_4-3-6-时钟-clock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-6-时钟-clock","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.3.6 时钟(Clock)")]),s._v(" "),t("p",[s._v("第二次机会算法需要在链表中移动页面，降低了效率。时钟算法使用环形链表将页面链接起来，再使用一个指针指向最老的页面。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os19.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"_4-4-分段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-分段","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.4 分段")]),s._v(" "),t("p",[s._v("虚拟内存采用的是分页技术，也就是将地址空间划分成固定大小的页，每一页再与内存进行映射。")]),s._v(" "),t("p",[s._v("下图为一个编译器在编译过程中建立的多个表，有 4 个表是动态增长的，如果使用分页系统的一维地址空间，动态增长的特点会导致覆盖问题的出现。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os37.png",alt:""}})]),s._v(" "),t("p",[s._v("分段的做法是把每个表分成段，一个段构成一个独立的地址空间。每个段的长度可以不同，并且可以动态增长。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os38.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"_4-5-段页式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-段页式","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.5 段页式")]),s._v(" "),t("p",[s._v("程序的地址空间划分成多个拥有独立地址空间的段，每个段上的地址空间划分成大小相同的页。这样既拥有分段系统的共享和保护，又拥有分页系统的虚拟内存功能。")]),s._v(" "),t("h4",{attrs:{id:"_4-6-分页与分段的比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-分页与分段的比较","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.6 分页与分段的比较")]),s._v(" "),t("ul",[t("li",[s._v("对程序员的透明性：分页透明，但是分段需要程序员显示划分每个段。")]),s._v(" "),t("li",[s._v("地址空间的维度：分页是一维地址空间，分段是二维的。")]),s._v(" "),t("li",[s._v("大小是否可以改变：页的大小不可变，段的大小可以动态改变。")]),s._v(" "),t("li",[s._v("出现的原因：分页主要用于实现虚拟内存，从而获得更大的地址空间；分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护。")])]),s._v(" "),t("h3",{attrs:{id:"五、设备管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、设备管理","aria-hidden":"true"}},[s._v("#")]),s._v(" 五、设备管理")]),s._v(" "),t("ul",[t("li",[s._v("磁盘结构")]),s._v(" "),t("li",[s._v("磁盘调度算法")])]),s._v(" "),t("h4",{attrs:{id:"_5-1-磁盘结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-磁盘结构","aria-hidden":"true"}},[s._v("#")]),s._v(" 5.1 磁盘结构")]),s._v(" "),t("ul",[t("li",[s._v("盘面（Platter）：一个磁盘有多个盘面；")]),s._v(" "),t("li",[s._v("磁道（Track）：盘面上的圆形带状区域，一个盘面可以有多个磁道；")]),s._v(" "),t("li",[s._v("扇区（Track Sector）：磁道上的一个弧段，一个磁道可以有多个扇区，它是最小的物理储存单位，目前主要有 512 bytes 与 4K 两种大小；")]),s._v(" "),t("li",[s._v("磁头（Head）：与盘面非常接近，能够将盘面上的磁场转换为电信号（读），或者将电信号转换为盘面的磁场（写）；")]),s._v(" "),t("li",[s._v("制动手臂（Actuator arm）：用于在磁道之间移动磁头。")]),s._v(" "),t("li",[s._v("主轴（Spindle）：使整个盘面转动。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"os10.jpg",alt:""}}),s._v(" "),t("img",{attrs:{src:"os11.jpg",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"_5-2-磁盘调度算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-磁盘调度算法","aria-hidden":"true"}},[s._v("#")]),s._v(" 5.2 磁盘调度算法")]),s._v(" "),t("p",[s._v("读写一个磁盘块的时间的影响因素有：")]),s._v(" "),t("ul",[t("li",[s._v("旋转时间（主轴旋转磁盘，使得磁头移动到适当的扇区上）")]),s._v(" "),t("li",[s._v("寻道时间（制动手臂移动，使得磁头移动到适当的磁道上）")]),s._v(" "),t("li",[s._v("实际的数据传输时间")])]),s._v(" "),t("p",[s._v("其中，寻道时间最长，因此磁盘调度的主要目标是使磁盘的平均寻道时间最短。")]),s._v(" "),t("p",[t("strong",[s._v("先来先服务(FCFS, First Come First Served)")])]),s._v(" "),t("ul",[t("li",[s._v("按照磁盘请求的顺序进行调度")]),s._v(" "),t("li",[s._v("公平对待所有进程")]),s._v(" "),t("li",[s._v("在有很多进程的情况下，接近随机调度的性能")]),s._v(" "),t("li",[s._v("优点是公平和简单。缺点也很明显，因为未对寻道做任何优化，使平均寻道时间可能较长。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"os12.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("最短寻道时间优先(SSTF, Shortest Seek Time First)")])]),s._v(" "),t("p",[s._v("优先调度与当前磁头所在磁道距离最近的磁道。虽然平均寻道时间比较低，但是不够公平。如果新到达的磁道请求总是比一个在等待的磁道请求近，那么在等待的磁道请求会一直等待下去，也就是出现饥饿现象。具体来说，两边的磁道请求更容易出现饥饿现象。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os13.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("电梯算法(SCAN)")])]),s._v(" "),t("p",[s._v("电梯问题保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。")]),s._v(" "),t("p",[s._v("电梯算法（扫描算法）和电梯的运行过程类似，总是按一个方向来进行磁盘调度，直到该方向上没有未完成的磁盘请求，然后改变方向。")]),s._v(" "),t("p",[s._v("因为考虑了移动方向，因此所有的磁盘请求都会被满足，解决了 SSTF 的饥饿问题。")]),s._v(" "),t("p",[t("img",{attrs:{src:"os14.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"六、链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、链接","aria-hidden":"true"}},[s._v("#")]),s._v(" 六、链接")]),s._v(" "),t("ul",[t("li",[s._v("编译系统")]),s._v(" "),t("li",[s._v("静态链接")]),s._v(" "),t("li",[s._v("目标文件")]),s._v(" "),t("li",[s._v("动态链接")])]),s._v(" "),t("h4",{attrs:{id:"_6-1-编译系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-编译系统","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.1 编译系统")]),s._v(" "),t("p",[s._v("以下是一个 hello.c 程序")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#include <stdio.h>\nint main()\n{\n    printf("hello, world\\n");\n    return 0;\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("在 Unix 系统上，由编译器把源文件转换为目标文件。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("gcc -o hello hello.c\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这个过程大致如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"os39.png",alt:""}})]),s._v(" "),t("h5",{attrs:{id:"预处理阶段-preprocessing-phase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预处理阶段-preprocessing-phase","aria-hidden":"true"}},[s._v("#")]),s._v(" 预处理阶段 (Preprocessing phase)")]),s._v(" "),t("p",[s._v("预处理（cpp）根据以字符 # 开头的命令，修改原始的 C 程序，生成扩展名为 .i 的文件。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ gcc -E hello.c -o hello.i\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h5",{attrs:{id:"编译阶段-compilation-phase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译阶段-compilation-phase","aria-hidden":"true"}},[s._v("#")]),s._v(" 编译阶段 (Compilation phase)")]),s._v(" "),t("p",[s._v("编译器（cc1）将文本文件 hello.i 翻译成文本文件 hello.s，它包含一个汇编语言程序。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ gcc -S hello.i -o hello.s\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h5",{attrs:{id:"汇编阶段-assembly-phase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#汇编阶段-assembly-phase","aria-hidden":"true"}},[s._v("#")]),s._v(" 汇编阶段 (Assembly phase)")]),s._v(" "),t("p",[s._v("编译器（as）将 hello.s 翻译成机器语言指令，把这些指令打包成一种叫做可重定位目标程序（relocatable object program）的格式，并将结果保存在目标文件 hello.o 中。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ as hello.s -o hello.o\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h5",{attrs:{id:"链接阶段-linking-phase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链接阶段-linking-phase","aria-hidden":"true"}},[s._v("#")]),s._v(" 链接阶段 (Linking phase)")]),s._v(" "),t("p",[t("code",[s._v("printf")]),s._v("函数是标准 C 库中的一个函数，在 "),t("code",[s._v("printf.o")]),s._v("这个单独预编译好的目标文件中。连接器（ld）将 printf.o 和 hello.o 合并，结果得到 hello 可执行目标文件。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ gcc hello.o -o hello\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"_6-2-静态链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-静态链接","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.2 静态链接")]),s._v(" "),t("p",[s._v("静态连接器以一组可重定向目标文件为输入，生成一个完全链接的可执行目标文件作为输出。链接器主要完成以下两个任务：")]),s._v(" "),t("ul",[t("li",[s._v("符号解析：每个符号对应于一个函数、一个全局变量或一个静态变量，符号解析的目的是将每个符号引用与一个符号定义关联起来。")]),s._v(" "),t("li",[s._v("重定位：链接器通过把每个符号定义与一个内存位置关联起来，然后修改所有对这些符号的引用，使得它们指向这个内存位置。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"os40.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"_6-3-目标文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-目标文件","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.3 目标文件")]),s._v(" "),t("ul",[t("li",[s._v("可执行目标文件：可以直接在内存中执行；")]),s._v(" "),t("li",[s._v("可重定向目标文件：可与其它可重定向目标文件在链接阶段合并，创建一个可执行目标文件；")]),s._v(" "),t("li",[s._v("共享目标文件：这是一种特殊的可重定向目标文件，可以在运行时被动态加载进内存并链接；")])]),s._v(" "),t("h4",{attrs:{id:"_6-4-动态链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-动态链接","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.4 动态链接")]),s._v(" "),t("p",[s._v("静态库有以下两个问题：")]),s._v(" "),t("pre",[t("code",[s._v("- 当静态库更新时那么整个程序都要重新进行链接；\n- 对于 printf 这种标准函数库，如果每个程序都要有代码，这会极大浪费资源。\n")])]),s._v(" "),t("p",[s._v("共享库是为了解决静态库的这两个问题而设计的，在 Linux 系统中通常用 .so 后缀来表示，Windows 系统上它们被称为 DLL。它具有以下特点：")]),s._v(" "),t("pre",[t("code",[s._v("- 在给定的文件系统中一个库只有一个文件，所有引用该库的可执行目标文件都共享这个文件，它不会被复制到引用它的可执行文件中；\n- 在内存中，一个共享库的 .text 节（已编译程序的机器代码）的一个副本可以被不同的正在运行的进程共享。\n")])]),s._v(" "),t("p",[t("img",{attrs:{src:"os41.jpg",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[s._v("《深入操作系统第四版》")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/frank-lam/fullstack-tutorial/blob/master/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("操作系统"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/vTYTpYx4hnXs6wWShCDrTQ",target:"_blank",rel:"noopener noreferrer"}},[s._v("面试专场之「操作系统」知识"),t("OutboundLink")],1)])]),s._v(" "),t("h2",{attrs:{id:"联系作者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[s._v("#")]),s._v(" 联系作者")]),s._v(" "),t("div",{attrs:{align:"center"}},[t("p",[s._v("\n        平凡世界，贵在坚持。\n    ")]),s._v(" "),t("img",{attrs:{src:s.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);a.default=e.exports}}]);