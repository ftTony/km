(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{385:function(e,a,s){"use strict";s.r(a);var t=s(4),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"对象扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象扩展","aria-hidden":"true"}},[e._v("#")]),e._v(" 对象扩展")]),e._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),s("p",[e._v("ES6 对象扩展新增方法 is()、assign()、setPrototypeOf()、getPrototypeOf()、keys()、values()、entries()。")]),e._v(" "),s("h2",{attrs:{id:"内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[e._v("#")]),e._v(" 内容")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E4%B8%80%E5%B1%9E%E6%80%A7%E7%9A%84%E7%AE%80%E6%B4%81%E8%A1%A8%E7%A4%BA%E6%B3%95"}},[e._v("属性的简洁表示法")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%8C%E5%B1%9E%E6%80%A7%E5%90%8D%E8%A1%A8%E8%BE%BE%E5%BC%8F"}},[e._v("属性名表达式")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%89%E6%96%B9%E6%B3%95%E7%9A%84name%E5%B1%9E%E6%80%A7"}},[e._v("方法的 name 属性")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%9B%9B%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8F%AF%E6%9E%9A%E4%B8%BE%E6%80%A7%E5%92%8C%E9%81%8D%E5%8E%86"}},[e._v("属性的可枚举性和遍历")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%94objectis"}},[e._v("Object.is()")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%85%ADobjectassign"}},[e._v("Object.assign()")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%83objectsetprototypeof"}},[e._v("Object.setPrototypeOf()")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%85%ABobjectgetprototypeof"}},[e._v("Object.getPrototypeOf()")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B9%9Dobjectkeysobjectvaluesobjectentries"}},[e._v("Object.keys()，Object.values()，Object.entries()")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8D%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6"}},[e._v("对象的扩展运算符")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8D%81%E4%B8%80null-%E4%BC%A0%E5%AF%BC%E8%BF%90%E7%AE%97%E7%AC%A6"}},[e._v("Null 传导运算符")])])]),e._v(" "),s("h3",{attrs:{id:"一、属性的简洁表示法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、属性的简洁表示法","aria-hidden":"true"}},[e._v("#")]),e._v(" 一、属性的简洁表示法")]),e._v(" "),s("p",[e._v("ES6 允许直接定稿变量和函数，作为对象的属性和方法。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var foo = 'bar';\nvar baz = {foo};\n\nfunction f(x, y) {\n  return {x, y};\n}\n\nvar o = {\n  method() {\n    return \"Hello!\";\n  }\n};\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("h3",{attrs:{id:"二、属性名表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、属性名表达式","aria-hidden":"true"}},[e._v("#")]),e._v(" 二、属性名表达式")]),e._v(" "),s("p",[e._v("ES6 允许字面量定义对象时，用表达式作为对象的属性名，即把表达式放在方括号内。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let propKey = 'foo';\n\nlet obj = {\n    [propKey] : true,\n    ['a'+'bc'] : 123\n}\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("h3",{attrs:{id:"三、方法的-name-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、方法的-name-属性","aria-hidden":"true"}},[e._v("#")]),e._v(" 三、方法的 name 属性")]),e._v(" "),s("p",[e._v("函数的"),s("code",[e._v("name")]),e._v("属性，返回函数名。对象方法也是函数，因此也有"),s("code",[e._v("name")]),e._v("属性。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const person = {\n  sayName() {\n    console.log('hello!');\n  },\n};\n\nperson.sayName.name   // \"sayName\"\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("上面代码中，方法的"),s("code",[e._v("name")]),e._v("属性返回函数名（即方法名）。")]),e._v(" "),s("h3",{attrs:{id:"四、属性的可枚举性和遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、属性的可枚举性和遍历","aria-hidden":"true"}},[e._v("#")]),e._v(" 四、属性的可枚举性和遍历")]),e._v(" "),s("h4",{attrs:{id:"_4-1-可枚举性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-可枚举性","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.1 可枚举性")]),e._v(" "),s("p",[e._v("对象的每个属性都有一个描述对象，用来控制该属性的行为。"),s("code",[e._v("Object.getOwnPropertyDescriptor")]),e._v("方法可以获取该属性的描述对象。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let obj = {foo:123};\nObject.getOwnPropertyDescriptor(obj,'foo')\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h4",{attrs:{id:"_4-2-可遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-可遍历","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.2 可遍历")]),e._v(" "),s("p",[e._v("ES6 一共有 5 种方法可以遍历对象的属性。")]),e._v(" "),s("h5",{attrs:{id:"_4-2-1-for-in"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-for-in","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.2.1 for...in")]),e._v(" "),s("p",[s("code",[e._v("for...in")]),e._v("循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。")]),e._v(" "),s("h5",{attrs:{id:"_4-2-2-object-keys-obj"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-object-keys-obj","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.2.2 Object.keys(obj)")]),e._v(" "),s("p",[s("code",[e._v("Object.keys")]),e._v("返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含）。")]),e._v(" "),s("h5",{attrs:{id:"_4-2-3-object-getownpropertynames-obj"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-object-getownpropertynames-obj","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.2.3 Object.getOwnPropertyNames(obj)")]),e._v(" "),s("p",[s("code",[e._v("Object.getOwnPropertyNames")]),e._v("返回一个数组，包含对象自身的所有 Symbol 属性。")]),e._v(" "),s("h5",{attrs:{id:"_4-2-4-reflect-ownkeys-obj"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-4-reflect-ownkeys-obj","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.2.4 Reflect.ownKeys(obj)")]),e._v(" "),s("p",[s("code",[e._v("Reflect.ownKeys")]),e._v("返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。")]),e._v(" "),s("p",[e._v("以上的 5 种方法遍历对象的属性，都遵守同样的属性遍历的次序规则。")]),e._v(" "),s("ul",[s("li",[e._v("首先遍历所有属性名为数值的属性，按照数字排序。")]),e._v(" "),s("li",[e._v("其次遍历所有属性名为字符串的属性，按照生成时间排序。")]),e._v(" "),s("li",[e._v("最后遍历所有属性名为 Symbol 值的属性，按照生成时间排序。")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Reflect.ownKeys({ [Symbol()]:0, b:0, 10:0, 2:0, a:0 })\n// ['2', '10', 'b', 'a', Symbol()]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"五、object-is"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、object-is","aria-hidden":"true"}},[e._v("#")]),e._v(" 五、Object.is()")]),e._v(" "),s("p",[e._v("ES5 比较两个值是否相等，只有两个运算符：相等运算符（"),s("code",[e._v("==")]),e._v("）和严格相等运算符（"),s("code",[e._v("===")]),e._v("）。它们都有缺点，前者会自动转换数据类型，后者的 NaN 不等于自身，以及+0 等于-0。JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。")]),e._v(" "),s("p",[e._v("ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。"),s("code",[e._v("Object.is")]),e._v("就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h3",{attrs:{id:"六、object-assign"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、object-assign","aria-hidden":"true"}},[e._v("#")]),e._v(" 六、Object.assign()")]),e._v(" "),s("p",[s("code",[e._v("Object.assign")]),e._v("方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var target = { a: 1 };\n\nvar source1 = { b: 2 };\nvar source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("h4",{attrs:{id:"_6-1-常见用途"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-常见用途","aria-hidden":"true"}},[e._v("#")]),e._v(" 6.1 常见用途")]),e._v(" "),s("ul",[s("li",[e._v("为对象添加属性")]),e._v(" "),s("li",[e._v("为对象添加方法")]),e._v(" "),s("li",[e._v("克隆对象")]),e._v(" "),s("li",[e._v("合并多个对象")]),e._v(" "),s("li",[e._v("为属性指定默认值")])]),e._v(" "),s("h3",{attrs:{id:"七、object-setprototypeof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、object-setprototypeof","aria-hidden":"true"}},[e._v("#")]),e._v(" 七、Object.setPrototypeOf()")]),e._v(" "),s("p",[s("code",[e._v("Object.setPrototypeOf")]),e._v("方法的作用与"),s("code",[e._v("__proto__")]),e._v("相同，用来设置一个对象的"),s("code",[e._v("prototype")]),e._v("对象，返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 格式\nObject.setPrototypeOf(object,prototype)\n\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("h3",{attrs:{id:"八、object-getprototypeof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八、object-getprototypeof","aria-hidden":"true"}},[e._v("#")]),e._v(" 八、Object.getPrototypeOf()")]),e._v(" "),s("p",[e._v("该方法与"),s("code",[e._v("Object.setPrototypeOf")]),e._v("方法配套，用于读取一个对象的原型对象。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Object.getPrototypeOf(obj);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"九、object-keys-，object-values-，object-entries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#九、object-keys-，object-values-，object-entries","aria-hidden":"true"}},[e._v("#")]),e._v(" 九、Object.keys()，Object.values()，Object.entries()")]),e._v(" "),s("ul",[s("li",[e._v("Object.keys()")]),e._v(" "),s("li",[e._v("Object.values()")]),e._v(" "),s("li",[e._v("Object.entries()")])]),e._v(" "),s("h4",{attrs:{id:"_9-1-object-keys"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-object-keys","aria-hidden":"true"}},[e._v("#")]),e._v(" 9.1 Object.keys()")]),e._v(" "),s("p",[e._v("ES5 引入了"),s("code",[e._v("Object.keys")]),e._v("方法，返回一个数组，成员参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('var obj = {foo:\'bar\',baz:42};\nObject.keys(obj)\n\n// ["foo","baz"]\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("h4",{attrs:{id:"_9-2-object-values"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-object-values","aria-hidden":"true"}},[e._v("#")]),e._v(" 9.2 Object.values()")]),e._v(" "),s("p",[s("code",[e._v("Object.values")]),e._v("方法返回一个数组，成员是参数对象自身的（不含继承的）")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var obj = {foo:'bar',baz:42};\nObject.values(obj)\n\n//  ['bar',42]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("h4",{attrs:{id:"_9-3-object-entries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-object-entries","aria-hidden":"true"}},[e._v("#")]),e._v(" 9.3 Object.entries()")]),e._v(" "),s("p",[s("code",[e._v("Object.entries")]),e._v("方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('var obj = {foo:\'bar\',baz:42};\nObject.entries(obj)\n// [["foo","bar"],["baz",42]]\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"十、对象的扩展运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十、对象的扩展运算符","aria-hidden":"true"}},[e._v("#")]),e._v(" 十、对象的扩展运算符")]),e._v(" "),s("ul",[s("li",[e._v("解构赋值")]),e._v(" "),s("li",[e._v("扩展运算符")])]),e._v(" "),s("h3",{attrs:{id:"_11-1-解构赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-解构赋值","aria-hidden":"true"}},[e._v("#")]),e._v(" 11.1 解构赋值")]),e._v(" "),s("p",[e._v("对象的解构赋值用于从一个对象取值，相当于将所有可遍历的、但尚未被读取的属性，分配到指定的对象上面。所有的键和它们的值，都会拷贝到新对象上面。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let {x,y,...z} = {x:1,y:2,a:3,b:4};\nx // 1\ny // 2\nz // {a:3,b:4}\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h3",{attrs:{id:"_11-2-扩展运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-扩展运算符","aria-hidden":"true"}},[e._v("#")]),e._v(" 11.2 扩展运算符")]),e._v(" "),s("p",[e._v("扩展运算符("),s("code",[e._v("...")]),e._v(")用于取出参数对象的所有可遍历属性，拷贝不到前对象之中。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("let z = {a:3,b:4};\nlet n = {...z};\nn   // {a:3,b:4}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"十一、null-传导运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十一、null-传导运算符","aria-hidden":"true"}},[e._v("#")]),e._v(" 十一、Null 传导运算符")]),e._v(" "),s("p",[e._v("编程实务中，如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。比如，要读取 message.body.user.firstName，安全的写法是写成下面这样。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const firstName = (message\n  && message.body\n  && message.body.user\n  && message.body.user.firstName) || 'default';\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”（null propagation operator）"),s("code",[e._v("?.")]),e._v("，简化上面的写法。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const firstName = message?.body?.user?.firstName || 'default';\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("上面代码有三个"),s("code",[e._v("?.")]),e._v("运算符，只要其中一个返回"),s("code",[e._v("null")]),e._v("或"),s("code",[e._v("undefined")]),e._v("，就不再往下运算，而是返回 "),s("code",[e._v("undefined")]),e._v("。")]),e._v(" "),s("p",[e._v("“Null 传导运算符”有四种用法。")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("obj?.prop")]),e._v(" // 读取对象属性")]),e._v(" "),s("li",[s("code",[e._v("obj?.[expr]")]),e._v(" // 同上")]),e._v(" "),s("li",[s("code",[e._v("func?.(...args)")]),e._v(" // 函数或对象方法的调用")]),e._v(" "),s("li",[s("code",[e._v("new C?.(...args)")]),e._v(" // 构造函数的调用")])]),e._v(" "),s("h3",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://yjhenan.gitbooks.io/-ecmascript-6/content/docs/object.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("《ECMAScript 6 入门》 第三版"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/object",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMAScript 6 入门"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"联系作者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[e._v("#")]),e._v(" 联系作者")]),e._v(" "),s("div",{attrs:{align:"center"}},[s("p",[e._v("\n        平凡世界，贵在坚持。\n    ")]),e._v(" "),s("img",{attrs:{src:e.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);a.default=r.exports}}]);