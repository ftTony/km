(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{410:function(e,t,s){"use strict";s.r(t);var a=s(13),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"node-的事件循环机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-的事件循环机制"}},[e._v("#")]),e._v(" Node 的事件循环机制")]),e._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),s("p",[e._v("Node 中也有宏任务和微任务，与浏览中的事件循环类似。Node 与浏览器事件循环不同，其中有多个宏任务队列，而浏览器是只一个宏任务队列。")]),e._v(" "),s("p",[e._v("Node 的架构底层是有 libuv，它是 Node 自身的动力来源之一，通过它可以去调用一些底层操作，Node 中的 Event Loop 功能就是在 libuv 中封装实现的。")]),e._v(" "),s("h2",{attrs:{id:"内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[e._v("#")]),e._v(" 内容")]),e._v(" "),s("ul",[s("li",[e._v("宏任务和微任务")]),e._v(" "),s("li",[e._v("事件循环机制的六个阶段")]),e._v(" "),s("li",[e._v("阶段概述")]),e._v(" "),s("li",[e._v("轮循顺序")]),e._v(" "),s("li",[e._v("Event Loop 过程")]),e._v(" "),s("li",[e._v("setTimeout 和 setImmediate")])]),e._v(" "),s("h3",{attrs:{id:"一、宏任务和微任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、宏任务和微任务"}},[e._v("#")]),e._v(" 一、宏任务和微任务")]),e._v(" "),s("p",[e._v("宏任务大概包括：")]),e._v(" "),s("ul",[s("li",[e._v("setTimeout")]),e._v(" "),s("li",[e._v("setInterval")]),e._v(" "),s("li",[e._v("setImmediate")]),e._v(" "),s("li",[e._v("script（整体代码）")]),e._v(" "),s("li",[e._v("I/O 操作等。")])]),e._v(" "),s("p",[e._v("微任务大概包括：")]),e._v(" "),s("ul",[s("li",[e._v("process.nextTick(与普通微任务有区别，在微任务队列执行之前执行)")]),e._v(" "),s("li",[e._v("new Promise().then(回调)等。")])]),e._v(" "),s("h3",{attrs:{id:"二、事件循环机制的六个阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、事件循环机制的六个阶段"}},[e._v("#")]),e._v(" 二、事件循环机制的六个阶段")]),e._v(" "),s("p",[s("img",{attrs:{src:"node11.jpg",alt:"images"}})]),e._v(" "),s("p",[e._v("图中的每个框被称为事件循环机制的一个阶段，每个阶段都有一个 FIFO 队列来执行回调。虽然每个阶段都是特殊的，但通常情况下，当事件循环进入给定的阶段时，它将执行特定于该阶段的任何操作，然后执行该阶段队列中的回调，直到队列用尽或最大回调数已执行。当该队列已用尽或达到回调限制，事件循环将移动到下一个阶段。")]),e._v(" "),s("p",[e._v("从上面这个简化图中，我们可以分析出 node 的事件循环的阶段顺序为：")]),e._v(" "),s("p",[s("strong",[e._v("输入数据阶段(incoming data)—>轮询阶段(poll)—>检查阶段(check)—>关闭事件回调阶段(close callback)—>定时器检测阶段(timers)—>I/O 事件回调阶段(I/O callbacks)—>闲置阶段(idle,prepare)—>轮询阶段")])]),e._v(" "),s("h3",{attrs:{id:"三、阶段概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、阶段概述"}},[e._v("#")]),e._v(" 三、阶段概述")]),e._v(" "),s("ul",[s("li",[e._v("定时器检测阶段(timers)：本阶段执行 timer 的回调，即 setTimeout、setInterval 里面的回调函数。")]),e._v(" "),s("li",[e._v("I/O 事件回调阶段(timers)：执行延迟到下一个循环迭代 I/O 回调，即上一 lwc 循环中未被执行的一些 I/O 回调。")]),e._v(" "),s("li",[e._v("闲置阶段(timers)：仅系统内部使用。")]),e._v(" "),s("li",[e._v("轮询阶段(timers)：检索新的 I/O 事件；执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 setImmediate()调度的之外）。其余情况 node 将在适当的时候在此阻塞。")]),e._v(" "),s("li",[e._v("检查阶段(timers)：setImmediate()回调函数在这里执行")]),e._v(" "),s("li",[e._v("关闭事件回调阶段(timers)：一些关闭的回调函数，如：socket.on('close',...)。")])]),e._v(" "),s("p",[e._v("日常开发中的绝大部分异步任务都是在 poll、check、timers 这 3 个阶段处理的，所以我们来重点看看。")]),e._v(" "),s("h4",{attrs:{id:"_3-1-timers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-timers"}},[e._v("#")]),e._v(" 3.1 timers")]),e._v(" "),s("p",[e._v("timers 阶段会执行 setTimeout 和 setInterval 回调，并且是由 poll 阶段控制的。同样，在 Node 中定时器指定的时间也不是准确时间，只能是尽快执行。")]),e._v(" "),s("h4",{attrs:{id:"_3-2-poll"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-poll"}},[e._v("#")]),e._v(" 3.2 poll")]),e._v(" "),s("p",[e._v("poll 是一个至关重要的阶段，poll 阶段的执行逻辑流程图如下：")]),e._v(" "),s("p",[s("img",{attrs:{src:"node12.jpg",alt:"images"}})]),e._v(" "),s("p",[e._v("如果当前已经存在定时器，而且有定时器到时间了，拿出来执行，eventLoop 将回到"),s("code",[e._v("timers")]),e._v("阶段。")]),e._v(" "),s("p",[e._v("如果没有定时器，会去盾回调函数队列。")]),e._v(" "),s("ul",[s("li",[e._v("如果 poll 队列不为空")]),e._v(" "),s("li",[e._v("如果 poll 队列为空时，会有两件事发生\n"),s("ul",[s("li",[e._v("如果有 setImmediate 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调")]),e._v(" "),s("li",[e._v("如果没有 setImmediate 回调需要执行，会等待回调被加入到队列中并立即执行回调，这里同样会有个超时时间设置防止一直等待下去，一段时间后自动进入 check 阶段。")])])])]),e._v(" "),s("h4",{attrs:{id:"_3-3-check"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-check"}},[e._v("#")]),e._v(" 3.3 check")]),e._v(" "),s("p",[e._v("check 阶段。这是一个比较简单的阶段，直接执行 setImmdiate 的回调。")]),e._v(" "),s("h3",{attrs:{id:"四、轮循顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、轮循顺序"}},[e._v("#")]),e._v(" 四、轮循顺序")]),e._v(" "),s("p",[e._v("执行的轮循顺序——每个阶段都要等对应的宏任务队列执行完毕才会进入到下一个阶段的宏任务队列")]),e._v(" "),s("ol",[s("li",[e._v("timers")]),e._v(" "),s("li",[e._v("I/O callbacks")]),e._v(" "),s("li",[e._v("poll")]),e._v(" "),s("li",[e._v("setImmediate")]),e._v(" "),s("li",[e._v("close events")])]),e._v(" "),s("p",[e._v("每两个阶段之间执行微任务队列")]),e._v(" "),s("h3",{attrs:{id:"五、event-loop-过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、event-loop-过程"}},[e._v("#")]),e._v(" 五、Event Loop 过程")]),e._v(" "),s("ol",[s("li",[e._v("执行全局的 script 同步代码")]),e._v(" "),s("li",[e._v("执行微任务队列，先执行所有 NextTick 队列中的所有任务，再执行其他")]),e._v(" "),s("li",[e._v("开始执行宏任务")]),e._v(" "),s("li",[e._v("每个阶段的宏任务执行完毕之后")]),e._v(" "),s("li",[e._v("TimersQueue—>步骤 2")])]),e._v(" "),s("h3",{attrs:{id:"六、settimeout-和-setimmediate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、settimeout-和-setimmediate"}},[e._v("#")]),e._v(" 六、setTimeout 和 setImmediate")]),e._v(" "),s("p",[e._v("setImmediate()方法用于把一些需要长时间运行的操作放在一个回调函数里，并在浏览器完成其他操作（如事件和显示更新）后立即运行回调函数。从定义来看就是为了防止一些耗时长的操作阻塞后面的操作，这也是为什么 check 阶段运行顺序排的比较后。")]),e._v(" "),s("h3",{attrs:{id:"七、process-nexttick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、process-nexttick"}},[e._v("#")]),e._v(" 七、process.nextTick")]),e._v(" "),s("p",[e._v("process.nextTick 是一个独立于 eventLoop 的任务队列。")]),e._v(" "),s("p",[e._v("在每一个 eventLoop 阶段完成后会去检查 nextTick 队列，如果里面有任务，会让这部分任务优先于微任务执行。")]),e._v(" "),s("p",[e._v("看一个例子：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("setImmediate(()=>{\n    console.log('timeout1')\n    Promise.resolve().then(()=>console.log('promise resolve'))\n    process.nextTick(()=>console.log('next tick1'))\n});\nsetImmediate(()=>{\n    console.log('timeout2')\n    process.nextTick(()=>console.log('next tick2'))\n})\nsetImmediate(()=>console.log('timeout3'))\nsetImmediate(()=>console.log('timeout4'))\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("ul",[s("li",[e._v("在 node11 之前，因为每一个 eventLoop 阶段完成后会去检查 nextTick 队列")])]),e._v(" "),s("h3",{attrs:{id:"八、node-版本差异说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八、node-版本差异说明"}},[e._v("#")]),e._v(" 八、node 版本差异说明")]),e._v(" "),s("p",[e._v("这里主要说明的是 node11 前后的差异，因为 node11 之后一些特性已经向浏览器看齐了，总的变化一句话来说就是，如果是 node11 版本一旦执行一个阶段里的一个宏任务(setTimeout,setInterval 和 setImmediate)就立刻执行对应的微任务队列。")]),e._v(" "),s("ol",[s("li",[e._v("timers 阶段的执行时机变化")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("setTimeout(()=>{\n    console.log('time1')\n    Promise.resolve().then(function(){\n        console.log('promise1')\n    })\n},0)\nsetTimeout(()=>{\n    console.log('time2')\n    Promise.resolve().then(function(){\n        console.log('promise2')\n    })\n},0)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("ol",{attrs:{start:"2"}},[s("li",[e._v("check 阶段的执行时机变化")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("setImmediate(()=>console.log('immediate1'));\nsetImmediate(()=>{\n    console.log('immediate2')\n    Promise.resolve().then(()=>console.log('promise resolve'))\n})\nsetImmediate(()=>console.log('immediate3'));\nsetImmediate(()=>console.log('immedidate4'));\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("ol",{attrs:{start:"3"}},[s("li",[e._v("nextTick 队列的执行时机变化")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("setImmediate(()=>console.log('timeout1'))\nsetImmediate(()=>{\n    console.log('timeout2')\n    process.nextTick(()=>console.log('next tick'))\n})\nsetImmediate(()=>console.log('timeout3'))\nsetImmediate(()=>console.log('timeout4'))\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("h3",{attrs:{id:"九、node-和浏览器-eventloop-的主要区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#九、node-和浏览器-eventloop-的主要区别"}},[e._v("#")]),e._v(" 九、node 和浏览器 eventLoop 的主要区别")]),e._v(" "),s("ol",[s("li",[e._v("浏览器端的 Event Loop 和 Node.js 中的 Event Loop 是不同的，实现机制也不一样")]),e._v(" "),s("li",[e._v("Node.js 可以理解成有 4 个宏任务队列和 2 个微任务队列，但是执行宏任务时有 6 个阶段")]),e._v(" "),s("li",[e._v("Node.js 中限制性全局 script 代码，执行完同步代码，先从微任务队列 NextTick Queue 中取出所有任务放入调用栈执行，")])]),e._v(" "),s("h3",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/qEmR-N6cANSkKuJt2QO_eg",target:"_blank",rel:"noopener noreferrer"}},[e._v("【语音解题系列】说说 Node 的事件循环机制"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/RNYYNR7A01V-Y2aC1wNsGw",target:"_blank",rel:"noopener noreferrer"}},[e._v("分享 10 道 Nodejs EventLoop 和事件相关面试题"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"联系作者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#联系作者"}},[e._v("#")]),e._v(" 联系作者")]),e._v(" "),s("div",{attrs:{align:"center"}},[s("p",[e._v("\n        平凡世界，贵在坚持。\n    ")]),e._v(" "),s("img",{attrs:{src:e.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);t.default=n.exports}}]);