(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{258:function(t,a,e){"use strict";e.r(a);var _=e(13),v=Object(_.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"web-缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web-缓存"}},[t._v("#")]),t._v(" web 缓存")]),t._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),t._v(" "),e("h2",{attrs:{id:"内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFweb%E7%BC%93%E5%AD%98"}},[t._v("什么是 web 缓存")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E4%BA%8C%E3%80%81web%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%9C%E7%94%A8"}},[t._v("web 缓存的作用")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E4%B8%89%E3%80%81web%E7%BC%93%E5%AD%98%E7%9A%84%E7%B1%BB%E5%9E%8B"}},[t._v("web 缓存的类型")])])]),t._v(" "),e("h3",{attrs:{id:"一、什么是-web-缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是-web-缓存"}},[t._v("#")]),t._v(" 一、什么是 web 缓存")]),t._v(" "),e("p",[t._v("Web 缓存是指一个 Web 资源（如 html 页面，图片，js，数据等）存在于 Web 服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的 URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。比较常见的就是浏览器会缓存访问过网站的网页，当再次访问这个 URL 地址的时候，如果网页没有更新，就不会再次下载网页，而是直接使用本地缓存的网页。只有当网站明确标识资源已经更新，浏览器才会再次下载网页。")]),t._v(" "),e("h3",{attrs:{id:"二、web-缓存的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、web-缓存的作用"}},[t._v("#")]),t._v(" 二、web 缓存的作用")]),t._v(" "),e("ol",[e("li",[t._v("减少网络带宽消耗")]),t._v(" "),e("li",[t._v("降低服务器压力")]),t._v(" "),e("li",[t._v("减少服务器压力")]),t._v(" "),e("li",[t._v("减少网络延迟，加快页面打开速度")])]),t._v(" "),e("h3",{attrs:{id:"三、web-缓存的类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、web-缓存的类型"}},[t._v("#")]),t._v(" 三、web 缓存的类型")]),t._v(" "),e("p",[t._v("web 缓存可以分为")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#_3-1-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98"}},[t._v("数据库缓存")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#_3-2-cdn%E7%BC%93%E5%AD%98"}},[t._v("CDN 缓存")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#_3-3-%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98"}},[t._v("代理服务器缓存")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#_3-4-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98"}},[t._v("浏览器缓存")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#_3-5-%E5%BA%94%E7%94%A8%E5%B1%82%E7%BC%93%E5%AD%98"}},[t._v("应用层缓存")])])]),t._v(" "),e("h4",{attrs:{id:"_3-1-数据库缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-数据库缓存"}},[t._v("#")]),t._v(" 3.1 数据库缓存")]),t._v(" "),e("p",[t._v("Web 应用，特别是 SNS 类型的应用，往往关系比较复杂，数据库表繁多，如果频繁进行数据库查询，很容易导致数据库不堪重荷。为了提供查询的性能，会将查询后的数据放到内存中进行缓存，下次查询时，直接从内存缓存直接返回，提供响应效率。比如常用的缓存方案有 memcached redist 等。")]),t._v(" "),e("h4",{attrs:{id:"_3-2-cdn-缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-cdn-缓存"}},[t._v("#")]),t._v(" 3.2 CDN 缓存")]),t._v(" "),e("p",[t._v("CDN 缓存，也叫网关缓存、反向代理缓存。CDN 缓存一般是由网站管理员自己部署，为了让他们的网站更容易扩展并获得更好的性能。浏览器先向 CDN 网关发起 web 请求，网关服务器后面对应着一台或多台负载均衡源服务器，会根据它们的负载请求，动态将请求转发到合适的源服务器上。虽然这种架构负载均衡源服务器之间的缓存没法共享，但却拥有更好的处扩展性。")]),t._v(" "),e("h4",{attrs:{id:"_3-3-代理服务器缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-代理服务器缓存"}},[t._v("#")]),t._v(" 3.3 代理服务器缓存")]),t._v(" "),e("p",[t._v("代理服务器缓存是浏览器和源服务器之间的中间服务器，浏览器先向这个中间服务器发起 web 请求，经过处理后（比如权限验证，缓存匹配等）,再将请求转发到源服务器。代理服务器缓存的运作原理跟浏览器的运作原理差不多，只是规模更大。")]),t._v(" "),e("h4",{attrs:{id:"_3-4-浏览器缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-浏览器缓存"}},[t._v("#")]),t._v(" 3.4 浏览器缓存")]),t._v(" "),e("p",[t._v("每个浏览器都实现了 HTTP 缓存，我们通过浏览器使用 HTTP 协议与服务器交互的时候，浏览器就会根据一套与服务器约定的规则进行缓存工作")]),t._v(" "),e("h4",{attrs:{id:"_3-5-应用层缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-应用层缓存"}},[t._v("#")]),t._v(" 3.5 应用层缓存")]),t._v(" "),e("p",[t._v("应用层缓存是指我们在代码层面上做的缓存。通过代码逻辑，把曾经请求过的数据或资源等，缓存起来，再次需要数据时通过逻辑上的处理选择可用的缓存的数据。")]),t._v(" "),e("p",[t._v("今天我们主要讨论和前端密切想着的浏览器 HTTP 缓存机制。浏览器 HTTP 缓存可以分为强缓存和协商缓存。强缓存和协商缓存最大区别是：强缓存命中的话不会发请求到服务器（比如 chrome 中的 200 from memory cache），协商缓存一定会发请求到服务器，通过资源的请求首部字段难资源是否命中协商缓存，如果协商缓存命中，服务器会将这个请求返回，但是不会返回这个资源的实体，而是通知客户端可以从缓存中加载这个资源（304 not modifend）。流程图如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"http-cache-01.png",alt:"161233e63a84f043"}})]),t._v(" "),e("h3",{attrs:{id:"四、http-缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、http-缓存"}},[t._v("#")]),t._v(" 四、http 缓存")]),t._v(" "),e("h4",{attrs:{id:"_4-1-http-报文中与缓存相关的首部字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-http-报文中与缓存相关的首部字段"}},[t._v("#")]),t._v(" 4.1 http 报文中与缓存相关的首部字段")]),t._v(" "),e("ol",[e("li",[t._v("通用首部字段（就是请求报文和响应都能用上的字段）")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("字段名称")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Cache-Control")]),t._v(" "),e("td",[t._v("控制缓存的行为")])]),t._v(" "),e("tr",[e("td",[t._v("Pragma")]),t._v(" "),e("td",[t._v("http1.0 的旧社会遗留物，值为“no-cache”时禁用缓存")])])])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("Cache-Control 和浏览器相关的命令")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("指令")]),t._v(" "),e("th",[t._v("参数")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("private")]),t._v(" "),e("td",[t._v("无")]),t._v(" "),e("td",[t._v("表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）")])]),t._v(" "),e("tr",[e("td",[t._v("public")]),t._v(" "),e("td",[t._v("可省略")]),t._v(" "),e("td",[t._v("表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存")])]),t._v(" "),e("tr",[e("td",[t._v("no-cache")]),t._v(" "),e("td",[t._v("可省略")]),t._v(" "),e("td",[t._v("缓存前必需确认其有效性")])]),t._v(" "),e("tr",[e("td",[t._v("no-store")]),t._v(" "),e("td",[t._v("无")]),t._v(" "),e("td",[t._v("不缓存请求或响应的任何内容")])]),t._v(" "),e("tr",[e("td",[t._v("max-age=[s]")]),t._v(" "),e("td",[t._v("必需")]),t._v(" "),e("td",[t._v("响应的最大值")])])])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("max-age")]),t._v("（单位为 s）设置缓存的存在时间，相对于发送请求的时间。只有响应报文首部设置 Cache-Control 为非 0 的 max-age 或者设置了大于请求日期的 Expires（下文会讲）才有可能命中强缓存。当满足这个条件，同时响应报文首部中 Cache-Control 不存在 no-cache、no-store 且请求报文首部不存在 Pragma 字段，才会真正命中强缓存。以下所有图片均为刷新（command+R）的截图。")]),t._v(" "),e("li",[e("code",[t._v("no-cache")]),t._v("表示请求必须先与服务器确认缓存的有效性，如果有效才能使用缓存（协商缓存），无论是响应报文首部还是请求报文首部出现这个字段均一定不会命中强缓存。Chrome 硬性重新加载（Command+shift+R）会在请求的首部加上 Pragma：no-cache 和 Cache-Control：no-cache。")]),t._v(" "),e("li",[e("code",[t._v("no-store")]),t._v("表示禁止浏览器以及所有中间缓存存储任何版本的返回响应，一定不会出现强缓存和协商缓存，适合个人隐私数据或者经济类数据。")]),t._v(" "),e("li",[e("code",[t._v("public")]),t._v("表明响应可以被浏览器、CDN 等等缓存。")]),t._v(" "),e("li",[e("code",[t._v("private")]),t._v("响应只作为私有的缓存，不能被 CDN 等缓存。如果要求 HTTP 认证，响应会自动设置为 private。")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("请求首部字段")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("字段名称")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("if-Match")]),t._v(" "),e("td",[t._v("比较 ETag 是否一致")])]),t._v(" "),e("tr",[e("td",[t._v("if-None-Match")]),t._v(" "),e("td",[t._v("比较 ETag 是否不一致")])]),t._v(" "),e("tr",[e("td",[t._v("if-Modified-Since")]),t._v(" "),e("td",[t._v("比较 ETag 是否不一致")])]),t._v(" "),e("tr",[e("td",[t._v("if-UnModified-Since")]),t._v(" "),e("td",[t._v("比较资源最后更新的时间是否一致")])])])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("响应首部字段")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("字段名称")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("ETag")]),t._v(" "),e("td",[t._v("资源的匹配信息")])]),t._v(" "),e("tr",[e("td",[t._v("Expires")]),t._v(" "),e("td",[t._v("http1.0 的遗留物，实体主体过期时间")])]),t._v(" "),e("tr",[e("td",[t._v("Last-Modifid")]),t._v(" "),e("td",[t._v("资源的最后一次修改的时间")])])])]),t._v(" "),e("h4",{attrs:{id:"_4-2-强制缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-强制缓存"}},[t._v("#")]),t._v(" 4.2 强制缓存")]),t._v(" "),e("p",[t._v("与强缓存主要是 Pragma、Cache-Control 、Expires")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<meta http-equiv="Pragma" content="no-cache">\n<meta http-equiv="Expires" content="-1">\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("注意上面两条指令的作用是不允许浏览器缓存当前页面以及页面上引用的资源，强制浏览器每次请求当前页面时都需要从服务器端获取最新版本。这种方式仅对部分浏览器有效，而且不影响代理服务器对该页面的缓存控制，原因是因为代理服务器并不会去解析页面上的内容。")]),t._v(" "),e("h4",{attrs:{id:"控制协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#控制协商缓存"}},[t._v("#")]),t._v(" 控制协商缓存")]),t._v(" "),e("ol",[e("li",[t._v("Last-Modified/If-Modified-Since")])]),t._v(" "),e("p",[t._v("If-Modified-Since 是一个请求首部字段，并且只能用在 GET 或者 HEAD 请求中。Last-Modified 是一个响应首部字段，包含服务器认定的资源作出修改的日期及时间。当带着 If-Modified-Since 头访问服务器请求资源时，服务器会检查 Last-Modified，如果 Last-Modified 的时间早于或等于 If-Modified-Since 则会返回一个不带主体的 304 响应，否则将重新返回资源。")]),t._v(" "),e("blockquote",[e("p",[t._v("If-Modified-Since: , :: GMT Last-Modified: , :: GMT")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("ETag/If-None-Match")])]),t._v(" "),e("p",[t._v("ETag 是一个响应首部字段，它是根据实体内容生成的一段 hash 字符串，标识资源的状态，由服务端产生。If-None-Match 是一个条件式的请求首部。如果请求资源时在请求首部加上这个字段，值为之前服务器端返回的资源上的 ETag，则当且仅当服务器上没有任何资源的 ETag 属性值与这个首部中列出的时候，服务器才会返回带有所请求资源实体的 200 响应，否则服务器会返回不带实体的 304 响应。ETag 优先级比 Last-Modified 高，同时存在时会以 ETag 为准。")]),t._v(" "),e("blockquote",[e("p",[t._v("If-None-Match: <etag_value> If-None-Match: <etag_value>, <etag_value>, … If-None-Match: *")])]),t._v(" "),e("p",[e("img",{attrs:{src:"http-cache-02.png",alt:"161233e63a97e53e"}})]),t._v(" "),e("blockquote",[e("p",[t._v("ETag 属性之间的比较采用的是弱比较算法，即两个文件除了每个比特都相同外，内容一致也可以认为是相同的。例如，如果两个页面仅仅在页脚的生成时间有所不同，就可以认为二者是相同的。")])]),t._v(" "),e("p",[t._v("因为 ETag 的特性，所以相较于 Last-Modified 有一些优势：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("某些情况下服务器无法获取资源的最后修改时间\n资源的最后修改时间变了但是内容没变，使用ETag可以正确缓存\n如果资源修改非常频繁，在秒以下的时间进行修改，Last-Modified只能精确到秒\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("h4",{attrs:{id:"整体流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#整体流程"}},[t._v("#")]),t._v(" 整体流程")]),t._v(" "),e("p",[e("img",{attrs:{src:"http-cache-03.png",alt:"161233e6685e5e73"}})]),t._v(" "),e("h4",{attrs:{id:"用户行为对浏览器的影响"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用户行为对浏览器的影响"}},[t._v("#")]),t._v(" 用户行为对浏览器的影响")]),t._v(" "),e("p",[e("img",{attrs:{src:"http-cache-04.png",alt:"181722532916918"}})]),t._v(" "),e("h3",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"http://www.cnblogs.com/skylar/p/browser-http-caching.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("透过浏览器看 HTTP 缓存"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.cnblogs.com/vajoy/p/5341664.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅谈浏览器 http 的缓存机制"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.im/post/5a673af06fb9a01c927ed880",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器 HTTP 缓存机制"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.cnblogs.com/lyzg/p/5125934.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器缓存知识小结及应用"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/_9aFWDEYmCDz7BVO3sFyLg",target:"_blank",rel:"noopener noreferrer"}},[t._v("响应速度不给力？解锁正确缓存姿势"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/Io-kEWygYuvqb5wqgygcuw",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端面试之浏览器缓存机制"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"联系作者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#联系作者"}},[t._v("#")]),t._v(" 联系作者")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("p",[t._v("\n        平凡世界，贵在坚持。\n    ")]),t._v(" "),e("img",{attrs:{src:t.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);a.default=v.exports}}]);