(window.webpackJsonp=window.webpackJsonp||[]).push([[264],{493:function(e,r,t){"use strict";t.r(r);var n=t(4),a=Object(n.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"ci-与-cd-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ci-与-cd-介绍","aria-hidden":"true"}},[e._v("#")]),e._v(" CI 与 CD 介绍")]),e._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),t("p",[e._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),e._v(" "),t("h2",{attrs:{id:"内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[e._v("#")]),e._v(" 内容")]),e._v(" "),t("ul",[t("li",[e._v("概念")]),e._v(" "),t("li",[e._v("Jenkins 使用")]),e._v(" "),t("li",[e._v("gitlab CI/CD 使用")]),e._v(" "),t("li",[e._v("jenkins与Gitlab-CI的区别")])]),e._v(" "),t("h3",{attrs:{id:"一、概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、概念","aria-hidden":"true"}},[e._v("#")]),e._v(" 一、概念")]),e._v(" "),t("ul",[t("li",[e._v("CI 持续集成")]),e._v(" "),t("li",[e._v("CD 持续交付")]),e._v(" "),t("li",[e._v("CD 持续部署")])]),e._v(" "),t("h4",{attrs:{id:"_1-1-ci-持续集成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-ci-持续集成","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.1 CI 持续集成")]),e._v(" "),t("p",[e._v("开发者尽量时时刻刻合并开发分支至主干分支。避免走到发布日才开始合并，掉入集成地狱。无论何时新分支集成至项目，持续集成可以自动化测试持续难应用是否正常。")]),e._v(" "),t("h4",{attrs:{id:"_1-2-cd-持续交付"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-cd-持续交付","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.2 CD 持续交付")]),e._v(" "),t("p",[e._v("持续将会是持续集成的扩展，可以保证稳定的发布产品新特性。这意味着基于自动化测试，你可以也可以一键自动化发布。理论上，持续将会可以决定是按天，按周，按双周发布产品。如果确实希望能够享受特拉维夫交付的好处，那么应该尽快发布到新产品中。一旦出现问题时能尽早早排除。")]),e._v(" "),t("h4",{attrs:{id:"_1-3-cd-持续部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-cd-持续部署","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.3 CD 持续部署")]),e._v(" "),t("p",[e._v("持续部署是持续交付的下一步。通过这一步，每个新特性都自动的部署到产品中。但是如果出现未通过的测试用例将会终止自动部署。持续部署可以加速用户反馈新特性，避免发布日带来的压力。开发可以着力于开发系统，开发结束后几分钟就可以触达到用户。")]),e._v(" "),t("p",[t("strong",[e._v("参考资料")])]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("持续集成是什么？"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/Y09_FYS2IWae24geE7tK-Q",target:"_blank",rel:"noopener noreferrer"}},[e._v("持续集成 vs 持续交付 vs 持续部署"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"二、jenkins-使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、jenkins-使用","aria-hidden":"true"}},[e._v("#")]),e._v(" 二、Jenkins 使用")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://juejin.im/post/5ad1980e6fb9a028c42ea1be",target:"_blank",rel:"noopener noreferrer"}},[e._v("Jenkins 打造强大的前端自动化工作流"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/DLXnbY3AcZHMgrPw0T28mQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("一文搞定前端 Jenkins 自动化部署"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"三、gitlab-ci-cd-使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、gitlab-ci-cd-使用","aria-hidden":"true"}},[e._v("#")]),e._v(" 三、Gitlab CI/CD 使用")]),e._v(" "),t("ul",[t("li",[e._v("什么是GitLab CI/CD")]),e._v(" "),t("li",[e._v("GitLab CI/CD 接入流程")])]),e._v(" "),t("h4",{attrs:{id:"_3-1-什么是gitlab-ci-cd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-什么是gitlab-ci-cd","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.1 什么是GitLab CI/CD")]),e._v(" "),t("p",[t("code",[e._v("GitLab CI/CD")]),e._v("就是提交代码到"),t("code",[e._v("GitLab")]),e._v(" 后，满足指定条件后会触发"),t("code",[e._v("pipeline")]),e._v("进行自动化构建、发布。\n"),t("code",[e._v("pipeline")]),e._v("可以理解为构建任务，里面可以包含多个流程，如下载依赖、运行测试、编译、部署。"),t("code",[e._v("pipeline")]),e._v(" 什么时候触发，分为几个流程，每个流程做什么，是在项目的 "),t("code",[e._v(".gitlab-ci.yml")]),e._v(" 文件中定义。如图所示：")]),e._v(" "),t("p",[t("img",{attrs:{src:"ci-cd.png",alt:"images"}})]),e._v(" "),t("h4",{attrs:{id:"_3-2-gitlab-ci-cd-接入流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-gitlab-ci-cd-接入流程","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.2 GitLab CI/CD 接入流程")]),e._v(" "),t("p",[t("code",[e._v("GitLab CI/CD")]),e._v(" 的 "),t("code",[e._v("pipeline")]),e._v(" 具体流程和操作在 "),t("code",[e._v(".gitlab-ci.yml")]),e._v(" 文件中申明，触发 "),t("code",[e._v("pipeline")]),e._v(" 后，由 "),t("code",[e._v("GitLab Runner")]),e._v(" 根据 "),t("code",[e._v(".gitlab-ci.yml")]),e._v(" 文件运行，运行结束后将返回至 "),t("code",[e._v("GitLab")]),e._v(" 系统。")]),e._v(" "),t("p",[t("strong",[e._v("gitlab-ci.yml 文件")])]),e._v(" "),t("p",[t("code",[e._v("gitlab-ci.yml")]),e._v(" 文件是一个申明式文件，用于定义 "),t("code",[e._v("GitLab CI/CD")]),e._v(" 流程分为几个阶段，每个阶段分别干什么。")]),e._v(" "),t("p",[t("code",[e._v("yml")]),e._v("文件基本语法规则")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('image: node\n\n# 定义相关变量\nvariables:\n  COPY_PATH: /frontEnd/$CI_PROJECT_NAME #从docker拷贝到宿主机器的目录，勿动\n  NODE_MODULES_PATH: /frontEnd/$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME/node_modules\n  Mobile: "15767668950" #项目开发者的手机号，在企业微信中使用的，用来流程报错后@开发者\n\n# 定义 stages\nstages:\n  - build\n  - test\n# 定义 job\n build 阶段:\n  stage: build\n  script:\n    - echo "build stage"\n# 定义 job\n发布到测试环境:\n  stage: test\n  script:\n    - echo "test stage"\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br")])]),t("ul",[t("li",[t("code",[e._v("image")]),e._v("是执行"),t("code",[e._v("CI/CD")]),e._v(" 依赖的"),t("code",[e._v("Docker")]),e._v("基础镜像。镜像中有"),t("code",[e._v("Node")]),e._v("、"),t("code",[e._v("Yarn")]),e._v("、"),t("code",[e._v("Dalp")]),e._v("（内部"),t("code",[e._v("rsync")]),e._v("工具）。")]),e._v(" "),t("li",[t("code",[e._v("stages")]),e._v(" 中定义了我们的 "),t("code",[e._v("pipeline")]),e._v(" 分为以下几个过程：")])]),e._v(" "),t("ol",[t("li",[e._v("下载依赖阶段 "),t("code",[e._v("pre_build")])]),e._v(" "),t("li",[e._v("构建阶段"),t("code",[e._v("build")])]),e._v(" "),t("li",[e._v("发布阶段"),t("code",[e._v("deploy")])])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("stage")]),e._v(" 申明当前的阶段，在"),t("code",[e._v("stages")]),e._v("中使用")]),e._v(" "),t("li",[t("code",[e._v("variables")]),e._v(" 用于定义变量")]),e._v(" "),t("li",[t("code",[e._v("before_script")]),e._v(" 执行"),t("code",[e._v("script")]),e._v("前的操作")]),e._v(" "),t("li",[t("code",[e._v("script")]),e._v(" 当前"),t("code",[e._v("stage")]),e._v("需要执行的操作")]),e._v(" "),t("li",[t("code",[e._v("changes")]),e._v("指定"),t("code",[e._v("stage")]),e._v("触发的分支")]),e._v(" "),t("li",[t("code",[e._v("only")]),e._v("指定当前"),t("code",[e._v("job")]),e._v("仅仅只在某些"),t("code",[e._v("tag")]),e._v("或"),t("code",[e._v("branch")]),e._v("上触发")]),e._v(" "),t("li",[t("code",[e._v("cache")]),e._v("定义全局的缓存策略")])]),e._v(" "),t("p",[t("strong",[e._v("GitLab Runner")])]),e._v(" "),t("p",[t("code",[e._v("GitLab Runner")]),e._v(" 是"),t("code",[e._v("CI")]),e._v("的执行环境，负责执行 "),t("code",[e._v("gitlab-ci.yml")]),e._v(" 文件，并将结果返回给 "),t("code",[e._v("GitLab")]),e._v(" 系统。 "),t("code",[e._v("Runner")]),e._v(" 具体可以分为两种"),t("strong",[e._v("Specific Runner")]),e._v("和"),t("strong",[e._v("Shared Runner")]),e._v("形式， "),t("code",[e._v("docker")]),e._v(" 、虚拟机或shell，在注册 "),t("code",[e._v("runner")]),e._v(" 时选定方式。")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Shared Runner")]),e._v("是Gitlab平台提供的免费使用的runner程序，它由Google云平台提供支持，每个开发团队有十几个。对于公共开源项目是免费使用的，如果是私人项目则有每月2000分钟的CI时间上限。")]),e._v(" "),t("li",[t("strong",[e._v("Specific Runner")]),e._v("是我们自定义的，在自己选择的机器上运行的runner程序，gitlab给我们提供了一个叫gitlab-runner的命令行软件，只要在对应机器上下载安装这个软件，并且运行gitlab-runner register命令，然后输入从gitlab-ci交互界面获取的token进行注册, 就可以在自己的机器上远程运行pipeline程序了。")])]),e._v(" "),t("p",[e._v("Shared Runner 和 Specific Runner的区别")]),e._v(" "),t("ol",[t("li",[e._v("Shared Runner是所有项目都可以使用的，而Specific Runner只能针对特定项目运行")]),e._v(" "),t("li",[e._v("Shared Runner默认基于docker运行，没有提前装配的执行pipeline的环境，例如node等。而Specific Runner你可以自由选择平台，可以是各种类型的机器，如Linux/Windows等，并在上面装配必需的运行环境，当然也可以选择Docker/K8s等")]),e._v(" "),t("li",[e._v("私人项目使用Shared Runner受运行时间的限制，而Specific Runner的使用则是完全自由的。")])]),e._v(" "),t("p",[t("strong",[e._v("Executor")])]),e._v(" "),t("p",[e._v("上面说过 Specific Runner是在我们自己选择的平台上执行的，这个平台就是我们现在说到的“Executor”，我们在特定机器上通过gitlab-runner这个命令行软件注册runner的时候，命令行就会提示我们输入相应的平台类型。可供选择的平台一共有如下几种，下面是一张它们各方面特点的比较表格")]),e._v(" "),t("p",[t("img",{attrs:{src:"ci-cd.jpg",alt:"images"}})]),e._v(" "),t("h3",{attrs:{id:"四、jenkins与gitlab-ci的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、jenkins与gitlab-ci的区别","aria-hidden":"true"}},[e._v("#")]),e._v(" 四、jenkins与Gitlab-CI的区别")]),e._v(" "),t("ul",[t("li",[e._v("gitlab-runner配置简单，很容易与gitlab集成。当新建一个项目的时候，不需要配置webhook回调地址，也不需要同时在jenkins新建这个项目的编译配置，只需在工程中配置gitlab-ci.yml文件，就可以让这个工程可以进行编译。")]),e._v(" "),t("li",[e._v("gitlab-runner没有web页面，但编译的过程直接就在gitlab中可以看到，不需要像jenkins进入web控制台查看编译过程。")]),e._v(" "),t("li",[e._v("gitlab-runner仅仅是提供了一个编译的环境而已，全部的编译都通过shell脚本命令进行。当然，jenkins也可以是全部的编译都通过shell脚本命令进行。")]),e._v(" "),t("li",[e._v("jenkins的好处就是编译服务和代码仓库分离，而且编译配置文件不需要在工程中配置，如果团队有开发、测试、配置管理员、运维、实施等完整的人员配置，那就采用jenkins，这样职责分明。不仅仅如此，jenkins依靠它丰富的插件，可以配置很多gitlab-ci不存在的功能，比如说看编译状况统计等。")])]),e._v(" "),t("h3",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://juejin.im/post/5dc4ae67f265da4cfa7bbb9a",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端部署发展史"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/z2f1i2FgrVGofQR6nKTd1A",target:"_blank",rel:"noopener noreferrer"}},[e._v("基于 GitLab CI/CD 的自动化构建、发布实践"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/giscafer/front-end-manual/issues/27",target:"_blank",rel:"noopener noreferrer"}},[e._v("基于 GitLab CI 的前端工程 CI/CD 实践"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/AY1nJA0T7YS2YnW-GNMPFQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab CI/CD 在 Node.js 项目中的实践"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/5NsY5cj0n1AuU0-zT1VrEQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node+GitLab 实现小程序 CI 系统"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/184936276",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gitlab-ci:从零开始的前端自动化部署"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/k16SjTN7__iRB_7q78hldg",target:"_blank",rel:"noopener noreferrer"}},[e._v("微信小程序工程化之持续集成方案"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/MJX5pVwugKsRO__fjhPVmg",target:"_blank",rel:"noopener noreferrer"}},[e._v("让自动化工作流解放你的双手"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/DPPOeWHShkasvKAxwH30JA",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用阿里云 OSS 与 github actions 自动托管个人网站"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/awk6dHaaOxZyglzq55nLcg",target:"_blank",rel:"noopener noreferrer"}},[e._v("持续集成利器，GitHub Actions"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/tugenhua0707/p/11949644.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Jenkins 实现前端自动打包,自动部署代码及邮件提醒功能"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/0hss-qGPjsvYOGkprGjW9g",target:"_blank",rel:"noopener noreferrer"}},[e._v("【第 1139 期】基于 Gitlab CI 搭建持续集成环境"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/E31b-hF9yNWLOt3bNBIXCA",target:"_blank",rel:"noopener noreferrer"}},[e._v("【第 923 期】基于 Git、Svn 的 Commit 实现可增量构建的前端持续集成解决方案"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/91386560",target:"_blank",rel:"noopener noreferrer"}},[e._v("网易云音乐前端模块动态下发系统"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000005804780",target:"_blank",rel:"noopener noreferrer"}},[e._v("用 travis 和 git hook 搞个一键部署"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.im/post/5a9e1a5751882555712bd8e1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Travis-CI 自动化测试并部署至自己的 CentOS 服务器"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.im/post/5c9b3934f265da60d429046d",target:"_blank",rel:"noopener noreferrer"}},[e._v("用 Travis CI 打造大前端持续集成和自动化部署"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/mcuking/blog/issues/61",target:"_blank",rel:"noopener noreferrer"}},[e._v("Github + Jenkins + Docker 实现自动化部署"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/UVcZh0QE8g52Iv5UB_61tQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("抛弃 jenkins，使用 node 从零搭建自动化部署管理平台"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.im/post/5e7a22a8e51d4526d87c99ed",target:"_blank",rel:"noopener noreferrer"}},[e._v("《大前端进阶 Node.js》系列 P6 必备脚手架/CI 构建能力（上）"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.im/post/5e835ef6f265da47a7411b06",target:"_blank",rel:"noopener noreferrer"}},[e._v("《大前端进阶 Node.js》系列 P6 必备脚手架/CI 构建能力（下）"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/c648RasQ6yg4NtOpAE55LA",target:"_blank",rel:"noopener noreferrer"}},[e._v("记录一次 docker+jenkins+gitlab 搭建内网开发环境"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.im/post/6845166890420011021",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker + webhook 从零实现前端自动化部署"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/60627311",target:"_blank",rel:"noopener noreferrer"}},[e._v("知乎部署系统演进"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"联系作者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[e._v("#")]),e._v(" 联系作者")]),e._v(" "),t("div",{attrs:{align:"center"}},[t("p",[e._v("\n        平凡世界，贵在坚持。\n    ")]),e._v(" "),t("img",{attrs:{src:e.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);r.default=a.exports}}]);