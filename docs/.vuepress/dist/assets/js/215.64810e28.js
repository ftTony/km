(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{239:function(e,a,s){"use strict";s.r(a);var n=s(4),t=Object(n.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"babel学习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#babel学习","aria-hidden":"true"}},[e._v("#")]),e._v(" babel学习")]),e._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),s("p",[e._v("Babel是JavaScript编译器，更确切地说是源码到源码的编译器，通常也叫做“转换编译器”。意思是说你为Babel提供一些JavaScript代码，Babel更改这些代码，然后返回给你新生成的代码。")]),e._v(" "),s("h2",{attrs:{id:"内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[e._v("#")]),e._v(" 内容")]),e._v(" "),s("ul",[s("li",[e._v("抽象语法树")]),e._v(" "),s("li",[e._v("Babel 的处理步骤")]),e._v(" "),s("li",[e._v("其他配套工具")]),e._v(" "),s("li",[e._v("Babel插件实践")])]),e._v(" "),s("h3",{attrs:{id:"一、抽象语法树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、抽象语法树","aria-hidden":"true"}},[e._v("#")]),e._v(" 一、抽象语法树")]),e._v(" "),s("p",[e._v("这个处理过程中的每一步都涉及到创建或是操作抽象语法树，亦称 AST。")]),e._v(" "),s("blockquote",[s("p",[e._v("Babel 使用一个基于 ESTree 并修改过的 AST，它的内核说明文档可以在"),s("a",{attrs:{href:"https://github.com/babel/babel/blob/master/doc/ast/spec.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),s("OutboundLink")],1),e._v("找到。")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function square(n) {\n  return n * n;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("blockquote",[s("p",[s("a",{attrs:{href:"http://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("AST Explorer"),s("OutboundLink")],1),e._v("可以让你对 AST 节点有一个更好的感性认识。 "),s("a",{attrs:{href:"http://astexplorer.net/#/Z1exs6BWMq",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),s("OutboundLink")],1),e._v("是上述代码的一个示例链接。")])]),e._v(" "),s("p",[e._v("这个程序可以被表示成如下的一棵树：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("- FunctionDeclaration:\n  - id:\n    - Identifier:\n      - name: square\n  - params [1]\n    - Identifier\n      - name: n\n  - body:\n    - BlockStatement\n      - body [1]\n        - ReturnStatement\n          - argument\n            - BinaryExpression\n              - operator: *\n              - left\n                - Identifier\n                  - name: n\n              - right\n                - Identifier\n                  - name: n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br")])]),s("p",[e._v("或是如下所示的 JavaScript Object（对象）：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  type: "FunctionDeclaration",\n  id: {\n    type: "Identifier",\n    name: "square"\n  },\n  params: [{\n    type: "Identifier",\n    name: "n"\n  }],\n  body: {\n    type: "BlockStatement",\n    body: [{\n      type: "ReturnStatement",\n      argument: {\n        type: "BinaryExpression",\n        operator: "*",\n        left: {\n          type: "Identifier",\n          name: "n"\n        },\n        right: {\n          type: "Identifier",\n          name: "n"\n        }\n      }\n    }]\n  }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br")])]),s("p",[e._v("你会留意到 AST 的每一层都拥有相同的结构：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  type: "FunctionDeclaration",\n  id: {...},\n  params: [...],\n  body: {...}\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  type: "Identifier",\n  name: ...\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  type: "BinaryExpression",\n  operator: ...,\n  left: {...},\n  right: {...}\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("blockquote",[s("p",[e._v("注意：出于简化的目的移除了某些属性")])]),e._v(" "),s("p",[e._v("这样的每一层结构也被叫做"),s("strong",[e._v("节点（Node）")]),e._v("。一个AST可以由单一的节点或是成百上千个节点构成。它们组合在一些可以描述用于静态分析的程序语法。")]),e._v(" "),s("p",[e._v("每一个节点都有如下所示的接口（Interface）：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("interface Node {\n  type: string;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("字符串形式的"),s("code",[e._v("type")]),e._v("字段表示节点的类型（如："),s("code",[e._v('"FunctionDeclaration"')]),e._v("，"),s("code",[e._v('"Identifier"')]),e._v("，"),s("code",[e._v('"BinaryExpression"')]),e._v("）。每一种类型的节点定义了一些附加属性用来进一步描述该节点类型。")]),e._v(" "),s("p",[e._v("Babel还为每个节点额外生成了一些属性，用于描述该节点在原始代码中的位置。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("{\n  type: ...,\n  start: 0,\n  end: 38,\n  loc: {\n    start: {\n      line: 1,\n      column: 0\n    },\n    end: {\n      line: 3,\n      column: 1\n    }\n  },\n  ...\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])]),s("p",[e._v("每一个节点都会有"),s("code",[e._v("start")]),e._v("，"),s("code",[e._v("end")]),e._v("，"),s("code",[e._v("loc")]),e._v("这几个属性。")]),e._v(" "),s("h3",{attrs:{id:"二、babel-的处理步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、babel-的处理步骤","aria-hidden":"true"}},[e._v("#")]),e._v(" 二、Babel 的处理步骤")]),e._v(" "),s("p",[e._v("Babel的三个主要处理步骤分别是："),s("strong",[e._v("解析(parse)")]),e._v("，"),s("strong",[e._v("转换(transform)")]),e._v("，"),s("strong",[e._v("生成(generate)")]),e._v("。")]),e._v(" "),s("h4",{attrs:{id:"_2-1-解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-解析","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.1 解析")]),e._v(" "),s("p",[e._v("将代码解析成抽象语法树(AST)，每个js引擎(比如Chrome浏览器中的V8引擎)都有自己的AST解析器，而Babel是通过"),s("a",{attrs:{href:"https://github.com/babel/babylon",target:"_blank",rel:"noopener noreferrer"}},[e._v("Babylon"),s("OutboundLink")],1),e._v("实现的。在解析过程中有两个阶段："),s("strong",[e._v("词法分析")]),e._v("和"),s("strong",[e._v("语法分析")]),e._v("，词法分析阶段把字符串形式的代码转换为"),s("strong",[e._v("令牌")]),e._v("(tokens)流，令牌类似于AST中节点；而语法分析阶段则会把一个令牌流转换成AST的形式，同时这个阶段会把令牌中的信息转换成AST的表述结构。")]),e._v(" "),s("p",[s("strong",[e._v("词法分析")])]),e._v(" "),s("p",[e._v("词法分析阶段把字符串形式的代码转换为"),s("strong",[e._v("令牌")]),e._v("流。")]),e._v(" "),s("p",[e._v("你可以把令牌看作是一个扁平的语法片段数组：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("n * n;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('[\n  { type: { ... }, value: "n", start: 0, end: 1, loc: { ... } },\n  { type: { ... }, value: "*", start: 2, end: 3, loc: { ... } },\n  { type: { ... }, value: "n", start: 4, end: 5, loc: { ... } },\n  ...\n]\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("每一个"),s("code",[e._v("type")]),e._v("有一组属性来描述该令牌：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("{\n  type: {\n    label: 'name',\n    keyword: undefined,\n    beforeExpr: false,\n    startsExpr: true,\n    rightAssociative: false,\n    isLoop: false,\n    isAssign: false,\n    prefix: false,\n    postfix: false,\n    binop: null,\n    updateContext: null\n  },\n  ...\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])]),s("p",[e._v("和AST节点一样它们也有"),s("code",[e._v("start")]),e._v("、"),s("code",[e._v("end")]),e._v("、"),s("code",[e._v("loc")]),e._v("属性。")]),e._v(" "),s("p",[s("strong",[e._v("语法分析")])]),e._v(" "),s("p",[e._v("语法分析阶段会把一个令牌流转换成AST的形式。这个阶段会使用令牌中的信息把它们转换成一个AST的表述结构，这样更易于后续的操作。")]),e._v(" "),s("h4",{attrs:{id:"_2-2-转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-转换","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.2 转换")]),e._v(" "),s("p",[e._v("转换步骤接收AST并对其进行遍历，在此过程中对节点进行添加、更新及移除等操作。这是Babel或是其他编译器中最复杂的过程同时也是插件将要介入工作的部分。")]),e._v(" "),s("h4",{attrs:{id:"_2-3-生成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-生成","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.3 生成")]),e._v(" "),s("p",[e._v("代码生成步骤把最终（经过一系列转换之后）的AST转换成字符串形式的代码，同时还会创建源码映射。")]),e._v(" "),s("p",[e._v("代码生成其实很简单：深度优先遍历整个 AST，然后构建可以表示转换后代码的字符串。")]),e._v(" "),s("p",[e._v("为了了解Babel在遍历时处理AST的具体过程，我们还需要了解下面几个重要知识点。")]),e._v(" "),s("h4",{attrs:{id:"_2-4-visitor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-visitor","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.4 Visitor")]),e._v(" "),s("p",[e._v("当Babel处理一个节点时，是以访问者的形式获取节点信息，并进行相关操作，这种方式是通过一个visitor对象来完成的，在visitor对象中定义了对于各种节点的访问函数，这样就可以针对不同的节点做出不同的处理。我们编写的Babel插件其实也是通过定义一个实例化visitor对象处理一系列的AST节点来完成我们圣代的修改操作。举个例子：")]),e._v(" "),s("p",[e._v("我们想要处理代码中用来加载模块的import命令语句")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import { Ajax } from '../lib/utils';\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("那么我们的Babel插件就需要定义这样的一个visitor对象：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("visitor: {\n            Program: {\n                enter(path, state) {\n                    console.log('start processing this module...');\n                },\n                exit(path, state) {\n                    console.log('end processing this module!');\n                }\n            },\n    \t    ImportDeclaration (path, state) {\n            \tconsole.log('processing ImportDeclaration...');\n            \t// do something\n            }\n\t}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br")])]),s("p",[e._v("当把这个插件用于遍历中时，每当处理到一个import语句，即ImportDeclaration节点时，都会自动调用ImportDeclaration()方法，这个方法中定义了处理import语句具体操作。")]),e._v(" "),s("h4",{attrs:{id:"_2-5-path"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-path","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.5 Path")]),e._v(" "),s("p",[e._v("从上面的visitor对象中，可以看到每次访问节点方法时，都会传入一个path参数，这个path参数中包含了节点的信息以及节点和所在的位置，以供对特定节点进行操作。具体来说Path 是表示两个节点之间连接的对象。这个对象不仅包含了当前节点的信息，也有当前节点的父节点的信息，同时也包含了添加、更新、移动和删除节点有关的其他很多方法。具体地，Path对象包含的属性和方法主要如下：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("── 属性      \n  - node   当前节点\n  - parent  父节点\n  - parentPath 父path\n  - scope   作用域\n  - context  上下文\n  - ...\n── 方法\n  - get   当前节点\n  - findParent  向父节点搜寻节点\n  - getSibling 获取兄弟节点\n  - replaceWith  用AST节点替换该节点\n  - replaceWithMultiple 用多个AST节点替换该节点\n  - insertBefore  在节点前插入节点\n  - insertAfter 在节点后插入节点\n  - remove   删除节点\n  - ...\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("h4",{attrs:{id:"_2-6-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-state","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.6 State")]),e._v(" "),s("p",[e._v("状态是抽象语法树 AST 转换的敌人，状态管理会不断牵扯我们的精力，而且几乎所有你对状态的假设，总是会有一些未考虑到的语法最终证明你的假设是错误的。")]),e._v(" "),s("h4",{attrs:{id:"_2-7-scopes-作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-scopes-作用域","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.7 Scopes(作用域)")]),e._v(" "),s("p",[e._v("在 JavaScript 中，每当你创建了一个引用，不管是通过变量（variable）、函数（function）、类型（class）、参数（params）、模块导入（import）还是标签（label）等，它都属于当前作用域。")]),e._v(" "),s("h3",{attrs:{id:"三、babel使用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、babel使用方法","aria-hidden":"true"}},[e._v("#")]),e._v(" 三、Babel使用方法")]),e._v(" "),s("ul",[s("li",[e._v("使用方法")]),e._v(" "),s("li",[e._v("插件")]),e._v(" "),s("li",[e._v("配置文件")]),e._v(" "),s("li",[e._v("preset")]),e._v(" "),s("li",[e._v("执行顺序")]),e._v(" "),s("li",[e._v("插件和 preset 的配置项")]),e._v(" "),s("li",[e._v("env (重点)")])]),e._v(" "),s("h4",{attrs:{id:"_3-1-使用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-使用方法","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.1 使用方法")]),e._v(" "),s("p",[e._v("总共存在三种方法：")]),e._v(" "),s("ul",[s("li",[e._v("使用单体文件(standalone script)")]),e._v(" "),s("li",[e._v("命令行(cli)")]),e._v(" "),s("li",[e._v("构建工具的插件(webpack的babel-loader,rollup的rollup-plugin-babel)。")])]),e._v(" "),s("p",[e._v("其中后面两种比较常见。第二种多见于package.json中的"),s("code",[e._v("scripts")]),e._v("段落中的某条命令；第三种就直接集成到构建工具中。")]),e._v(" "),s("p",[e._v("这三种方式只有入口不同而已，调用的 babel 内核，处理方式都是一样的，所以我们先不纠结入口的问题。")]),e._v(" "),s("h4",{attrs:{id:"_3-2-插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-插件","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.2 插件")]),e._v(" "),s("p",[e._v("babel本身不具有任何转化功能，它把转化的功能都分解到一个个plugin里面。因此当我们不配置任何插件时，经过babel的代码和输入是相同的。")]),e._v(" "),s("p",[e._v("插件总共分为两种：")]),e._v(" "),s("ul",[s("li",[e._v("当我们添加"),s("strong",[e._v("语法插件")]),e._v("之后，在解析这一步就使得babel能够解析更多的语法。（顺带一提，babel内部使用的解析类库叫做babylon，并非babel自行开发）")])]),e._v(" "),s("p",[e._v("举个简单的例子，当我们定义或者调用方法时，最后一个参数之后是不允许增加逗号的，如"),s("code",[e._v("callFoo(param1, param2,)")]),e._v("就是非法的。如果源码是这种写法，经过 babel 之后就会提示语法错误。")]),e._v(" "),s("p",[e._v("但最近的 JS 提案中已经允许了这种新的写法(让代码 diff 更加清晰)。为了避免 babel 报错，就需要增加语法插件"),s("code",[e._v("babel-plugin-syntax-trailing-function-commas")])]),e._v(" "),s("ul",[s("li",[e._v("当我们添加"),s("strong",[e._v("转译插件")]),e._v("之后，在转换这一步把源码转换并输出。这也是我们使用babel最本质的需求。")])]),e._v(" "),s("p",[e._v("比起语法插件，转译插件其实更好理解，比如箭头函数"),s("code",[e._v("(a) => a")]),e._v("就会转化为"),s("code",[e._v("function (a) {return a}")]),e._v("。完成这个工作的插件叫做"),s("code",[e._v("babel-plugin-transform-es2015-arrow-functions")]),e._v("。")]),e._v(" "),s("p",[e._v("同一类语法可能同时存在语法插件版本和转译插件版本。如果我们使用了转译插件，就不用再使用语法插件了。")]),e._v(" "),s("h4",{attrs:{id:"_3-3-配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-配置文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.3 配置文件")]),e._v(" "),s("p",[e._v("既然插件是babel的根本，那如何使用呢？总共分为2个步骤：")]),e._v(" "),s("ol",[s("li",[e._v("将插件的名字增加到配置文件中(根目录下创建 .babelrc 或者 package.json 的"),s("code",[e._v("babel")]),e._v("里面，格式相同)")]),e._v(" "),s("li",[e._v("使用"),s("code",[e._v("npm install babel-plugin-xxx")]),e._v("进行安装")])]),e._v(" "),s("h4",{attrs:{id:"_3-4-preset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-preset","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.4 preset")]),e._v(" "),s("p",[e._v("preset 分为以下几种：")]),e._v(" "),s("ol",[s("li",[e._v("官方内容，目前包括env,react, flow, minify 等。这里最重要的是 env，后面会详细介绍。")]),e._v(" "),s("li",[e._v("stage-x，这里面包含的都是当年最新规范的草案，每年更新。\n"),s("ul",[s("li",[e._v("Stage 0 - 稻草人：只是一个想法，经过TC39成员提出即可。")]),e._v(" "),s("li",[e._v("Stage 1 - 提案：初步尝试。")]),e._v(" "),s("li",[e._v("Stage 2 - 初稿：完成初步规范。")]),e._v(" "),s("li",[e._v("Stage 3 - 候选：完成规范和浏览器初步实现。")]),e._v(" "),s("li",[e._v("Stage 4 - 完成：将被添加到下一年度发布。\n例如"),s("code",[e._v("syntax-dynamic-import")]),e._v("就是stage-2的内容，"),s("code",[e._v("transform-object-rest-spread")]),e._v("就是stage-3的内容。")])])])]),e._v(" "),s("p",[e._v("此外，低一级的stage会包含所有高级stage的内容，例如 stage-1 会包含 stage-2, stage-3 的所有内容。")]),e._v(" "),s("p",[e._v("stage-4 在下一年更新会直接放到 env 中，所以没有单独的 stage-4 可供使用。")]),e._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[e._v("es201x,latest")])]),e._v(" "),s("p",[e._v("这些是已经纳入到标准规范的语法。例如 es2015 包含 "),s("code",[e._v("arrow-functions")]),e._v("，es2017 包含 "),s("code",[e._v("syntax-trailing-function-commas")]),e._v("。但因为 env 的出现，使得 es2016 和 es2017 都已经废弃。所以我们经常可以看到 es2015 被单独列出来，但极少看到其他两个。")]),e._v(" "),s("p",[e._v("latest 是 env 的雏形，它是一个每年更新的 preset，目的是包含所有 es201x。但也是因为更加灵活的 env 的出现，已经废弃。")]),e._v(" "),s("h4",{attrs:{id:"_3-5-执行顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-执行顺序","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.5 执行顺序")]),e._v(" "),s("p",[e._v("很简单的几条原则：")]),e._v(" "),s("ul",[s("li",[e._v("Plugin 会运行在 Preset 之前。")]),e._v(" "),s("li",[e._v("Plugin 会从前到后顺序执行。")]),e._v(" "),s("li",[e._v("Preset 的顺序则"),s("strong",[e._v("刚好相反")]),e._v("(从后向前)。")])]),e._v(" "),s("p",[e._v("preset的逆向顺序主要是为了保证向后兼容，因为大多数用户的编写顺序是"),s("code",[e._v("['es2015', 'stage-0']")]),e._v("。这样必须先执行"),s("code",[e._v("stage-0")]),e._v("才能确保babel不报错。因此我们编排preset的时候，也要注意顺序，"),s("strong",[e._v("其实只要按照规范的时间顺序列出即可")]),e._v("。")]),e._v(" "),s("h4",{attrs:{id:"_3-6-插件和-preset-的配置项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-插件和-preset-的配置项","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.6 插件和 preset 的配置项")]),e._v(" "),s("p",[e._v("简略情况下，插件和 preset 只要列出字符串格式的名字即可。但如果某个 preset 或者插件需要一些配置项(或者说参数)，就需要把自己先变成数组。第一个元素依然是字符串，表示自己的名字；第二个元素是一个对象，即配置对象。")]),e._v(" "),s("p",[e._v("最需要配置的当属 env，如下：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('"presets": [\n    // 带了配置项，自己变成数组\n    [\n        // 第一个元素依然是名字\n        "env",\n        // 第二个元素是对象，列出配置项\n        {\n          "module": false\n        }\n    ],\n\n    // 不带配置项，直接列出名字\n    "stage-2"\n]\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("h4",{attrs:{id:"_3-7-env-重点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-env-重点","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.7 env (重点)")]),e._v(" "),s("p",[e._v("因为env最为常用也最重要，所以我们必须重点关注。")]),e._v(" "),s("p",[e._v("env的核心目的是通过配置得知目标环境的特点，然后只做必要的转换。例如目标浏览器支持es2015，那么es2015这个preset其实是不需要的，于是代码就可以小一点(一般转化后的代码总是更长)，构建时间也可以缩短一些。")]),e._v(" "),s("p",[e._v("如果不写任何任何配置项，env等价于latest，也等价于 es2015 + es2016 + es2017 三个相加(不包含 stage-x 中的插件)。env 包含的插件列表维护在"),s("a",{attrs:{href:"https://github.com/babel/babel-preset-env/blob/master/data/plugin-features.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("下面列出几种比较常用的配置方法：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n    "presets":[\n        {\n            "env":{\n                "targets":["last 2 versions", "safari >= 7"]\n            }\n        }\n    ]\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("如上配置将考虑所有浏览器的最新2个版本(safari大于等于7.0的版本)的特性，将必要的代码进行转换。而这些版本已有的功能就不进行转化了。这里的语法可以参考"),s("a",{attrs:{href:"https://github.com/browserslist/browserslist",target:"_blank",rel:"noopener noreferrer"}},[e._v("browserslist"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "presets": [\n    ["env", {\n      "targets": {\n        "node": "6.10"\n      }\n    }]\n  ]\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("如上配置将目标设置为nodejs，并且支持6.10及鸡皮疙瘩版本。也可以使用"),s("code",[e._v("node: 'current'")]),e._v("来支持最新稳定版本。例如箭头函数在nodejs6及以上将不被转化，但如果nodejs 0.12就会被转化了。")]),e._v(" "),s("p",[e._v("另外一个有用的配置项是"),s("code",[e._v("modules")]),e._v("。它的取值可以是"),s("code",[e._v("amd")]),e._v(", "),s("code",[e._v("umd")]),e._v(", "),s("code",[e._v("systemjs")]),e._v(", "),s("code",[e._v("commonjs")]),e._v(" 和 "),s("code",[e._v("false")]),e._v("。这可以让 babel 以特定的模块化格式来输出代码。如果选择"),s("code",[e._v("false")]),e._v(" 就不进行模块化处理。")]),e._v(" "),s("h3",{attrs:{id:"四、其他配套工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、其他配套工具","aria-hidden":"true"}},[e._v("#")]),e._v(" 四、其他配套工具")]),e._v(" "),s("ul",[s("li",[e._v("babel-cli")]),e._v(" "),s("li",[e._v("babel-node")]),e._v(" "),s("li",[e._v("babel-register")]),e._v(" "),s("li",[e._v("babel-polyfill")]),e._v(" "),s("li",[e._v("babel-runtime 和 babel-plugin-transform-runtime")]),e._v(" "),s("li",[e._v("babel-loader")]),e._v(" "),s("li",[e._v("babylon")]),e._v(" "),s("li",[e._v("babel-traverse")]),e._v(" "),s("li",[e._v("babel-types")])]),e._v(" "),s("h4",{attrs:{id:"_4-1-babel-cli"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-babel-cli","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.1 babel-cli")]),e._v(" "),s("p",[e._v("顾名思义，cli就是命令行工具。安装了"),s("code",[e._v("babel-cli")]),e._v("就能够在命令行中使用"),s("code",[e._v("babel")]),e._v("命令来编译文件。")]),e._v(" "),s("p",[e._v("在开发npm package时经常会使用如下模式：")]),e._v(" "),s("ul",[s("li",[e._v("把"),s("code",[e._v("babel-cli")]),e._v("安装为"),s("code",[e._v("devDependencies")])]),e._v(" "),s("li",[e._v("在package.json中添加"),s("code",[e._v("scripts")]),e._v("(比如"),s("code",[e._v("prepublish")]),e._v(")，使用"),s("code",[e._v("babel")]),e._v("命令编译文件")]),e._v(" "),s("li",[s("code",[e._v("npm puhlish")])])]),e._v(" "),s("p",[e._v("这样既可以使用较新规范的JS语法编写源码，同时又能支持旧版环境。因为项目可能不太大，用不到构建工具(webpack或者rollup)，于是在发布之前用"),s("code",[e._v("babel-cli")]),e._v("进行处理。")]),e._v(" "),s("h4",{attrs:{id:"_4-2-babel-node"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-babel-node","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.2 babel-node")]),e._v(" "),s("p",[s("code",[e._v("babel-node")]),e._v("是"),s("code",[e._v("babel-cli")]),e._v("的一部分，它不需要单独安装。")]),e._v(" "),s("p",[e._v("它的作用是在node环境中，直接运行es2015的代码，而不需要额外进行转码。例如我们有一个js文件以es2015的语法进行编写进行编写(如使用了箭头函数)。我们可以直接使用"),s("code",[e._v("babel-node es2015.js")]),e._v("进行执行，而不用再进行转码了。")]),e._v(" "),s("p",[e._v("可以说："),s("code",[e._v("babel-node")]),e._v(" = "),s("code",[e._v("babel-polyfill")]),e._v(" + "),s("code",[e._v("babel-register")]),e._v("。")]),e._v(" "),s("h4",{attrs:{id:"_4-3-babel-register"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-babel-register","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.3 babel-register")]),e._v(" "),s("p",[e._v("babel-register模块必写"),s("code",[e._v("require")]),e._v("命令，为它加上一个钩子。此后，每当使用"),s("code",[e._v("require")]),e._v("加载"),s("code",[e._v(".js")]),e._v("、"),s("code",[e._v(".jsx")]),e._v("、"),s("code",[e._v(".es")]),e._v("和"),s("code",[e._v(".es6")]),e._v("后缀名的文件，就会先用babel进行转码。")]),e._v(" "),s("p",[e._v("使用时，必须首先加载"),s("code",[e._v("require('babel-register')")]),e._v("。")]),e._v(" "),s("p",[e._v("需要注意的是，babel-register只会对"),s("code",[e._v("require")]),e._v("命令加载的文件转码，而"),s("strong",[e._v("不会对当前文件转码")]),e._v("。")]),e._v(" "),s("p",[e._v("另外，由于它是实时转码，所以"),s("strong",[e._v("只适合在开发环境使用")]),e._v("。")]),e._v(" "),s("h4",{attrs:{id:"_4-4-babel-polyfill"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-babel-polyfill","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.4 babel-polyfill")]),e._v(" "),s("p",[e._v("babel 默认只转换 js 语法，而不转换新的 API，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法(比如"),s("code",[e._v("Object.assign")]),e._v(")都不会转码。")]),e._v(" "),s("p",[e._v("举例来说，es2015在Array对象上新增了"),s("code",[e._v("Array.from")]),e._v("方法。babel就不会转码这个方法。如果想让这个方法运行，必须使用"),s("code",[e._v("babel-polyfill")]),e._v("。(内部集成了"),s("code",[e._v("core-js")]),e._v("和"),s("code",[e._v("regenerator")]),e._v(")")]),e._v(" "),s("p",[e._v("使用时，在所有代码运行之前增加"),s("code",[e._v("require('babel-polyfill')")]),e._v("。或者更常规的操作是在"),s("code",[e._v("webpack.config.js")]),e._v("中将"),s("code",[e._v("babel-polyfill")]),e._v("作为第一个entry。因此必须把"),s("code",[e._v("babel-polyfill")]),e._v("作为"),s("code",[e._v("dependencies")]),e._v("而不是"),s("code",[e._v("devDependencies")])]),e._v(" "),s("p",[s("code",[e._v("babel-polyfill")]),e._v("主要有两个缺点：")]),e._v(" "),s("ul",[s("li",[e._v("使用"),s("code",[e._v("babel-polyfill")]),e._v("会导致打出来的包非常大，因为"),s("code",[e._v("babel-polyfill")]),e._v("是一个整体，把所有方法都加到原型链上。比如我们只使用了"),s("code",[e._v("Array.from")]),e._v("，但它把"),s("code",[e._v("Object.defineProperty")]),e._v("也给加上了，这就是一种浪费了。这个问题可以通过单独"),s("code",[e._v("core-js")]),e._v("的某个类库来解决，"),s("code",[e._v("core-js")]),e._v("都是分开的。")]),e._v(" "),s("li",[e._v("``")])]),e._v(" "),s("p",[e._v("因此在实际使用中，如果我们无法忍受这两个缺点(尤其是第二个)，通常我们会倾向于使用"),s("code",[e._v("babel-plugin-transform-runtime")]),e._v("。")]),e._v(" "),s("p",[e._v("但如果代码中包含高版本 js 中类型的实例方法 (例如"),s("code",[e._v("[1,2,3].includes(1)")]),e._v(")，这还是要使用 polyfill。")]),e._v(" "),s("h4",{attrs:{id:"_4-5-babel-runtime-和-babel-plugin-transform-runtime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-babel-runtime-和-babel-plugin-transform-runtime","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.5 babel-runtime 和 babel-plugin-transform-runtime")]),e._v(" "),s("p",[e._v("我们时常在项目中看到.babelrc中使用"),s("code",[e._v("babel-plugin-transform-runtime")]),e._v("，而"),s("code",[e._v("package.json")]),e._v("中的"),s("code",[e._v("dependencies")]),e._v("(注意不是"),s("code",[e._v("devDependencies")]),e._v(")又包含了"),s("code",[e._v("babel-runtime")]),e._v("，那这两个是不是成套使用的呢？他们又起什么作用呢？")]),e._v(" "),s("p",[e._v("先说"),s("code",[e._v("babel-plugin-transform-runtime")]),e._v("。")]),e._v(" "),s("p",[e._v("babel会转换js语法，之前已经提过了。以"),s("code",[e._v("async/await")]),e._v("举例，如果不使用这个plugin(即默认情况)，转换后的代码大概是：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// babel 添加一个方法，把 async 转化为 generator\nfunction _asyncToGenerator(fn) { return function () {....}} // 很长很长一段\n\n// 具体使用处\nvar _ref = _asyncToGenerator(function* (arg1, arg2) {\n  yield (0, something)(arg1, arg2);\n});\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("h4",{attrs:{id:"_4-6-babel-loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-babel-loader","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.6 babel-loader")]),e._v(" "),s("p",[e._v("前面提过 babel 的三种使用方法，并且已经介绍过了 babel-cli。但一些大型的项目都会有构建工具 (如 webpack 或 rollup) 来进行代码构建和压缩 (uglify)。理论上来说，我们也可以对压缩后的代码进行 babel 处理，但那会非常慢。因此如果在 uglify 之前就加入 babel 处理，岂不完美？")]),e._v(" "),s("p",[e._v("所以就有了 babel 插入到构建工具内部这样的需求。以(我还算熟悉的) webpack 为例，webpack 有 loader 的概念，因此就出现了 babel-loader。")]),e._v(" "),s("p",[e._v("和"),s("code",[e._v("babel-cli")]),e._v("一样，"),s("code",[e._v("babel-loader")]),e._v("也会读取 .babelrc 或者 package.json 中的"),s("code",[e._v("babel")]),e._v("段作为自己的配置，之后的内核处理也是相同。唯一比"),s("code",[e._v("babel-cli")]),e._v("复杂的是，它需要和 webpack 交互，因此需要在 webpack 这边进行配置。比较常见的如下：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("module: {\n  rules: [\n    {\n      test: /\\.js$/,\n      exclude: /(node_modules|bower_components)/,\n      loader: 'babel-loader'\n    }\n  ]\n}\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("如果想在这里传入 babel 的配置项，也可以把改成：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// loader: 'babel-loader' 改成如下：\nuse: {\n  loader: 'babel-loader',\n  options: {\n    // 配置项在这里\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("这里的配置项优先级是最高的。但我认为放到单独的配置文件中更加清晰合理，可读性强一些。")]),e._v(" "),s("h4",{attrs:{id:"_4-7-babylon"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-babylon","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.7 Babylon")]),e._v(" "),s("p",[e._v('""可以说Babylon定义了把代码解析成AST的一套规范。')]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('import * as babylon from "babylon";\nconst code = `function square(n) {\n  return n * n;\n}`;\n\nbabylon.parse(code);\n// Node {\n//   type: "File",\n//   start: 0,\n//   end: 38,\n//   loc: SourceLocation {...},\n//   program: Node {...},\n//   comments: [],\n//   tokens: [...]\n// }\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])]),s("h4",{attrs:{id:"_4-8-babel-traverse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-babel-traverse","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.8 babel-traverse")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('import * as babylon from "babylon";\nimport traverse from "babel-traverse";\n\nconst code = `function square(n) {\n  return n * n;\n}`;\n\nconst ast = babylon.parse(code);\n\ntraverse(ast, {\n  enter(path) {\n    if (\n      path.node.type === "Identifier" &&\n      path.node.name === "n"\n    ) {\n      path.node.name = "x";\n    }\n  }\n});\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br")])]),s("h4",{attrs:{id:"_4-9-babel-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-9-babel-types","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.9 babel-types")]),e._v(" "),s("h4",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("名称")]),e._v(" "),s("th",[e._v("作用")]),e._v(" "),s("th",[e._v("备注")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("babel-cli")]),e._v(" "),s("td",[e._v("允许命令行使用babel命令转译文件")]),e._v(" "),s("td")]),e._v(" "),s("tr",[s("td",[e._v("babel-node")]),e._v(" "),s("td",[e._v("允许命令行使用babel-node直接转译+执行node文件")]),e._v(" "),s("td",[e._v("随"),s("code",[e._v("babel-cli")]),e._v("一同安装 "),s("code",[e._v("babel-node")]),e._v("="),s("code",[e._v("babel-polyfill")]),e._v("+"),s("code",[e._v("babel-register")])])]),e._v(" "),s("tr",[s("td",[e._v("babel-register")]),e._v(" "),s("td",[e._v("改写"),s("code",[e._v("require")]),e._v("命令，为其加载的文件进行转码，不对当前文件转码")]),e._v(" "),s("td",[e._v("只适用于开发环境")])]),e._v(" "),s("tr",[s("td",[e._v("babel-polyfill")]),e._v(" "),s("td",[e._v("为所有 API 增加兼容方法")]),e._v(" "),s("td",[e._v("需要在所有代码之前"),s("code",[e._v("require")]),e._v("，且体积比较大")])]),e._v(" "),s("tr",[s("td",[e._v("babel-plugin-transform-runtime & babel-runtime")]),e._v(" "),s("td",[e._v("把帮助类方法从每次使用前定义改为统一 "),s("code",[e._v("require")]),e._v("，精简代码")]),e._v(" "),s("td",[s("code",[e._v("babel-runtime")]),e._v("需要安装为依赖，而不是开发依赖")])]),e._v(" "),s("tr",[s("td",[e._v("babel-loader")]),e._v(" "),s("td",[e._v("使用 webpack 时作为一个 loader 在代码混淆之前进行代码转换")]),e._v(" "),s("td")])])]),e._v(" "),s("h3",{attrs:{id:"五、babel插件实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、babel插件实践","aria-hidden":"true"}},[e._v("#")]),e._v(" 五、Babel插件实践")]),e._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.im/post/5c19c5e0e51d4502a232c1c6",target:"_blank",rel:"noopener noreferrer"}},[e._v("一口(很长的)气了解 babel"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5c21b584e51d4548ac6f6c99",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入Babel，这一篇就够了"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/XSzQ5nkLI369CDhMZtF-MQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端中的编译原理 - 从零打造一个实用的 Babel 插件"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/HdIvS75nJ0JFStoNPIl7Iw",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端工程师需要了解的 Babel 知识"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5d94bfbf5188256db95589be",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入浅出 Babel 上篇：架构和原理 + 实战"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5da12397e51d4578364f6ffa",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入浅出 Babel 下篇：既生 Plugin 何生 Macros"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Babel 插件手册"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/frontend9/fe9-library/issues/154",target:"_blank",rel:"noopener noreferrer"}},[e._v("Babel 插件原理的理解与深入"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"联系作者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[e._v("#")]),e._v(" 联系作者")]),e._v(" "),s("div",{attrs:{align:"center"}},[s("p",[e._v("\n        平凡世界，贵在坚持。\n    ")]),e._v(" "),s("img",{attrs:{src:e.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);a.default=t.exports}}]);