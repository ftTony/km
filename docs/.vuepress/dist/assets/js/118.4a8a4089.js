(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{402:function(s,n,a){"use strict";a.r(n);var e=a(4),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"class继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class继承","aria-hidden":"true"}},[s._v("#")]),s._v(" Class继承")]),s._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("Class 可以通过"),a("code",[s._v("extends")]),s._v("关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ColorPoint extends Point{\n    constructor(x,y,color){\n        super(x,y);     // 调用父类的constructor(x,y)\n        this.color = color;\n    }\n\n    toString(){\n        return this.color + ' '+ super.toString();  //  调用父类的toString()\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("ES5 的继承，实质是先创造子类的实例对象"),a("code",[s._v("this")]),s._v("，然后再将父类的方法添加到"),a("code",[s._v("this")]),s._v("上面（"),a("code",[s._v("Parent.apply(this)")]),s._v("）。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到"),a("code",[s._v("this")]),s._v("上面（所以必须先调用"),a("code",[s._v("super")]),s._v("）方法，然后再用子类的构造函数修改"),a("code",[s._v("this")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[s._v("#")]),s._v(" 内容")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%80%E3%80%81objectgetprototypeof"}},[s._v("Object.getPrototypeOf()")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8C%E3%80%81super-%E5%85%B3%E9%94%AE%E5%AD%97"}},[s._v("super 关键字")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E7%B1%BB%E7%9A%84-prototype-%E5%B1%9E%E6%80%A7%E5%92%8Cproto%E5%B1%9E%E6%80%A7"}},[s._v("类的 prototype 属性和"),a("strong",[s._v("proto")]),s._v("属性")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9B%9B%E3%80%81%E5%8E%9F%E7%94%9F%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%A7%E6%89%BF"}},[s._v("原生构造函数的继承")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%94%E3%80%81mixin-%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0"}},[s._v("Mixin 模式的实现")])])]),s._v(" "),a("h3",{attrs:{id:"一、object-getprototypeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、object-getprototypeof","aria-hidden":"true"}},[s._v("#")]),s._v(" 一、Object.getPrototypeOf()")]),s._v(" "),a("p",[a("code",[s._v("Object.getPrototypeOf")]),s._v("方法可以用来从子类上获取父类。可以使用这个方法判断，一个类是否继承了另一个类。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.getPrototypeOf(ColorPoint) === Point\n// true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"二、super-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、super-关键字","aria-hidden":"true"}},[s._v("#")]),s._v(" 二、super 关键字")]),s._v(" "),a("p",[a("code",[s._v("super")]),s._v("，既可以当作函数使用，也可以当作对象作用。")]),s._v(" "),a("p",[s._v("第一种情况，"),a("code",[s._v("super")]),s._v("作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次"),a("code",[s._v("super")]),s._v("函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class A{\n    constructor(){\n        console.log(new.target.name);\n    }\n}\nclass B extends A{\n    constructor(){\n        super();\n    }\n}\nnew A()     // A\nnew B()     // B\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("注意："),a("code",[s._v("super()")]),s._v("只能用在子类的构造函数之中，用在其他地方就会报错。")]),s._v(" "),a("p",[s._v("第二种情况，"),a("code",[s._v("super")]),s._v("作为对象时，在普通方法中，指向父类的原型对象。在静态方法中，指向父类。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class A{\n    p(){\n        return 2;\n    }\n}\n\nclass B extends A{\n    constructor(){\n        super();\n        console.log(super.p());     //2\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("注意："),a("code",[s._v("super")]),s._v("指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过"),a("code",[s._v("super")]),s._v("调用的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class A{\n    constructor(){\n        this.p = 2;\n    }\n}\n\nclass B extends A{\n    get m(){\n        return super.p;\n    }\n}\n\nlet b = new B();\nb.m     // undefined\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("p")]),s._v("是父类"),a("code",[s._v("A")]),s._v("实例的属性，"),a("code",[s._v("super.p")]),s._v("就引用不到它。")]),s._v(" "),a("p",[s._v("在子类型普通方法中通过"),a("code",[s._v("super")]),s._v("调用父类的方法时，方法内部的"),a("code",[s._v("this")]),s._v("指向当前的子类实例。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class A {\n  constructor() {\n    this.x = 1;\n  }\n  print() {\n    console.log(this.x);\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    this.x = 2;\n  }\n  m() {\n    super.print();\n  }\n}\n\nlet b = new B();\nb.m() // 2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("如果"),a("code",[s._v("super")]),s._v("作为对象，用在静态方法之中，这时"),a("code",[s._v("super")]),s._v("将指向父类，而不是父类的原型对象。")]),s._v(" "),a("h3",{attrs:{id:"三、类的-prototype-属性和proto属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、类的-prototype-属性和proto属性","aria-hidden":"true"}},[s._v("#")]),s._v(" 三、类的 prototype 属性和"),a("strong",[s._v("proto")]),s._v("属性")]),s._v(" "),a("p",[s._v("在 ES5 中，每一个对象都有"),a("code",[s._v("__proto__")]),s._v("属性，指向对应的构造函数的"),a("code",[s._v("prototype")]),s._v("属性。Class 作为构造函数的语法糖，同时有"),a("code",[s._v("prototype")]),s._v("属性和"),a("code",[s._v("__proto__")]),s._v("属性，因此同时存在两条继承链。")]),s._v(" "),a("ul",[a("li",[s._v("子类的"),a("code",[s._v("__proto__")]),s._v("属性，表示构造函数的继承，总是指向父类。")]),s._v(" "),a("li",[s._v("子类的"),a("code",[s._v("prototype")]),s._v("属性的"),a("code",[s._v("__proto__")]),s._v("属性，表示方法的继承，总是指向父类的"),a("code",[s._v("prototype")]),s._v("属性。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class A {\n}\n\nclass B extends A {\n}\n\nB.__proto__ === A // true\nB.prototype.__proto__ === A.prototype // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("模式实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class A{\n\n}\n\nclass B{\n\n}\n\n// B的实例继承A的实例\nObject.setPrototypeOf(B.prototype,A.prototype);\n\n// B 继承 A 的静态属性\nObject.setPrototypeOf(B, A);\n\nconst b = new B();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h3",{attrs:{id:"四、原生构造函数的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、原生构造函数的继承","aria-hidden":"true"}},[s._v("#")]),s._v(" 四、原生构造函数的继承")]),s._v(" "),a("p",[s._v("ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象"),a("code",[s._v("this")]),s._v("，然后再用子类的构造函数修饰"),a("code",[s._v("this")]),s._v("，使得父类的所有行为都可以继承。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class MyArray extends Array {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\nvar arr = new MyArray();\narr[0] = 12;\narr.length // 1\n\narr.length = 0;\narr[0] // undefined\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"五、mixin-模式的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、mixin-模式的实现","aria-hidden":"true"}},[s._v("#")]),s._v(" 五、Mixin 模式的实现")]),s._v(" "),a("p",[s._v("Mixin 指的是多个对象合成一个新的对象，新对象具有各个组成成员的接口。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function mix(...mixins){\n    class Mix{\n        constructor(){\n            for(let mixn of mixins){\n                copyProperties(this,new mixin());   // 拷贝实例属性\n            }\n        }\n    }\n\n    for(let mixin of mixins){\n        copyProperties(Mix,mixin);      // 拷贝静态属性\n        copyProperties(Mix.prototype,mixin.prototype);      // 拷贝原型属性\n    }\n\n    return Mix;\n}\n\nfunction copyProperties(target,source){\n    for(let key of Reflect.ownKeys(source)){\n        if(key !== 'constructor'\n      && key !== 'prototype'\n      && key !== 'name'){\n            let desc = Object.getOwnPropertyDescriptor(source, key);\n            Object.defineProperty(target, key, desc);\n      }\n    }\n}\n\nclass DistributedEdit extends mix(Loggable, Serializable) {\n  // ...\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/class-extends",target:"_blank",rel:"noopener noreferrer"}},[s._v("ECMAScript 6 入门"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://yjhenan.gitbooks.io/-ecmascript-6/content/docs/class-extends.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("《ECMAScript 6 入门》 第三版"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"联系作者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[s._v("#")]),s._v(" 联系作者")]),s._v(" "),a("div",{attrs:{align:"center"}},[a("p",[s._v("\n        平凡世界，贵在坚持。\n    ")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);n.default=t.exports}}]);