(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{415:function(e,t,a){"use strict";a.r(t);var s=a(4),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"vue-中的-computed-watch-methods-理解与分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-中的-computed-watch-methods-理解与分析","aria-hidden":"true"}},[e._v("#")]),e._v(" Vue 中的 computed,watch,methods 理解与分析")]),e._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),a("p",[e._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),e._v(" "),a("h2",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[e._v("#")]),e._v(" 内容")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E7%90%86%E8%A7%A3-vue-%E4%B8%AD%E7%9A%84-computed-%E7%94%A8%E6%B3%95"}},[e._v("理解 Vue 中的 computed 用法")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8C%E3%80%81vue-%E4%B8%AD%E7%9A%84-watch-%E7%9A%84%E7%94%A8%E6%B3%95"}},[e._v("Vue 中的 watch 的用法")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%89%E3%80%81computed-%E5%92%8C-watch-%E7%9A%84%E5%8C%BA%E5%88%AB"}},[e._v("computed 和 watch 的区别")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9B%9B%E3%80%81%E8%BF%90%E7%94%A8%E7%9A%84%E5%9C%BA%E6%99%AF"}},[e._v("运用的场景")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%94%E3%80%81computed-%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0"}},[e._v("computed 的基本原理及源码实现")])])]),e._v(" "),a("h3",{attrs:{id:"一、理解-vue-中的-computed-用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、理解-vue-中的-computed-用法","aria-hidden":"true"}},[e._v("#")]),e._v(" 一、理解 Vue 中的 computed 用法")]),e._v(" "),a("p",[e._v("computed 是计算属性的；它会根据所依赖的数据动态显示新计算结果，该计算结果会被缓存起来。computed 的值在 getter 执行后会被缓存的。如果所依赖的数据发生改变时候，就会重新调用 getter 来计算最新的结果。")]),e._v(" "),a("h4",{attrs:{id:"_1-1-computed-应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-computed-应用场景","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.1 computed 应用场景")]),e._v(" "),a("ul",[a("li",[e._v("适用于一些重复使用数据或复杂及费时的运算。我们可以把它放入 compute 中进行计算，然后会在 computed 中缓存起来，下次就可以直接获取了。")]),e._v(" "),a("li",[e._v("如果我们需要的数据依赖于其他的数据的话，我们可以把数据设计为 computed 中。")])]),e._v(" "),a("h3",{attrs:{id:"二、computed-和-methods-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、computed-和-methods-的区别","aria-hidden":"true"}},[e._v("#")]),e._v(" 二、computed 和 methods 的区别")]),e._v(" "),a("ol",[a("li",[e._v("computed 是基于响应性依赖来进行缓存的。只有在响应式依赖发生改变时它们才会重新求值，也就是说，当 msg 属性值没有发生改变时，多次访问 reversedMsg 计算属性会立即返回之前缓存的计算结果，而不会再次执行 computed 中的函数。但是 methods 方法中是每次调用，都会执行函数的，methods 它不是响应式的。")]),e._v(" "),a("li",[e._v("computed 中的成员可以只定义一个函数作为只读属性，也可以定义成 get/set 变成可以读写属性，但是 methods 中的成员没有这样的。")])]),e._v(" "),a("p",[e._v("示例如下：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<!DOCTYPE html>\n<html lang="en">\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>计算属性</title>\n    <script type="text/javascript" src="https://cn.vuejs.org/js/vue.js"><\/script>\n</head>\n\n<body>\n    <div id="app">\n        <div>第一次调用computed属性：{{reversedMsg}}</div>\n        <div>第二次调用computed属性：{{reversedMsg}}</div>\n        <div>第三次调用computed属性：{{reversedMsg}}</div>\n        \x3c!-- 下面是methods调用 --\x3e\n        <div>第一次调用methods方法：{{reversedMsg1()}}</div>\n        <div>第二次调用methods方法：{{reversedMsg1()}}</div>\n        <div>第三次调用methods方法：{{reversedMsg1()}}</div>\n    </div>\n    <script type="text/javascript">\n        var vm = new Vue({\n            el: \'#app\',\n            data: {\n                msg: \'hello\'\n            },\n            computed: {\n                reversedMsg() {\n                    console.log(1111)\n                    // this 指向 vm实例\n                    return this.msg.split(\'\').reverse().join(\'\');\n                }\n            },\n            methods: {\n                reversedMsg1() {\n                    console.log(2222);\n                    // this 指向vm实例\n                    return this.msg.split(\'\').reverse().join(\'\')\n                }\n            }\n        })\n        console.log(vm);\n    <\/script>\n</body>\n\n</html>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br"),a("span",{staticClass:"line-number"},[e._v("31")]),a("br"),a("span",{staticClass:"line-number"},[e._v("32")]),a("br"),a("span",{staticClass:"line-number"},[e._v("33")]),a("br"),a("span",{staticClass:"line-number"},[e._v("34")]),a("br"),a("span",{staticClass:"line-number"},[e._v("35")]),a("br"),a("span",{staticClass:"line-number"},[e._v("36")]),a("br"),a("span",{staticClass:"line-number"},[e._v("37")]),a("br"),a("span",{staticClass:"line-number"},[e._v("38")]),a("br"),a("span",{staticClass:"line-number"},[e._v("39")]),a("br"),a("span",{staticClass:"line-number"},[e._v("40")]),a("br"),a("span",{staticClass:"line-number"},[e._v("41")]),a("br"),a("span",{staticClass:"line-number"},[e._v("42")]),a("br"),a("span",{staticClass:"line-number"},[e._v("43")]),a("br"),a("span",{staticClass:"line-number"},[e._v("44")]),a("br"),a("span",{staticClass:"line-number"},[e._v("45")]),a("br"),a("span",{staticClass:"line-number"},[e._v("46")]),a("br")])]),a("p",[e._v("执行后的结果如下所示：")]),e._v(" "),a("p",[a("img",{attrs:{src:"vue-watch01.png",alt:"images"}})]),e._v(" "),a("p",[e._v("如上代码我们可以看到，在 computed 中有属性 reversedMsg，然后在该方法中会打印 111；信息出来，在 methods 中的方法 reversedMsg1 也会打印 2222 信息出来，但是在 computed 中，我们除了第一次之后，再次获取 reversedMsg 值后拿得是缓存里面的数据，因此就不会再执行该 reversedMsg 函数了。但是在 methods 中，并没有缓存，每次执行 reversedMsg1()方法后，都会打印信息。")]),e._v(" "),a("p",[e._v("如上面代码, 我们调用了 computed 中的 reversedMsg 方法一共有三次，如果我们也有上百次调用或上千次调用的话, 如果依赖的数据没有改变, 那么每次调用都要去计算一遍, 那么肯定会造成很大的浪费。因此 computed 就是来优化这件事的。")]),e._v(" "),a("h3",{attrs:{id:"三、vue-中的-watch-的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、vue-中的-watch-的用法","aria-hidden":"true"}},[e._v("#")]),e._v(" 三、Vue 中的 watch 的用法")]),e._v(" "),a("p",[e._v("watch 它是一个对 data 的数据监听回调，当依赖的 data 的数据变化时，会执行回调。在回调中会传入 newVal 和 oldVal 两个参数。")]),e._v(" "),a("p",[e._v("Vue 实例将会在实例化时调用"),a("code",[e._v("$watch()")]),e._v("，他会遍历 watch 对象的每一个属性。")]),e._v(" "),a("h4",{attrs:{id:"_2-1-watch-的使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-watch-的使用场景","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.1 watch 的使用场景")]),e._v(" "),a("p",[e._v("当在 data 的某个数据发生变化时，我们需要做一些操作，或者当需要在数据变化时执行异步或开销较大的操作时，我们就可以使用 watch 来进行监听。")]),e._v(" "),a("h4",{attrs:{id:"_2-2-handler-方法及-immediate-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-handler-方法及-immediate-属性","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.2 handler 方法及 immediate 属性")]),e._v(" "),a("p",[e._v("watch 有一个特点是：第一次寝化页面的时候，是不会去执行 age 这个属性监听的，只有当 age 值发生改变的时候才会执行监听计算。因此我们上面第一次初始化页面的时候，'basicMsg'属性默认为空字符串。那么我们现在想要第一次初始化页面的时候也希望它能够执行'age'进行监听，最后能把结果返回给'basicMsg'值来。因此我们需要修改下我们的 watch 的方法，需要引入 handler 方法和 immediate 属性，代码如下所示：")]),e._v(" "),a("h4",{attrs:{id:"_2-3-理解-deep-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-理解-deep-属性","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.3 理解 deep 属性")]),e._v(" "),a("p",[e._v("deep 属性作用是否深度监听某个对象的值，该值默认为 false。")]),e._v(" "),a("h3",{attrs:{id:"三、computed-和-watch-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、computed-和-watch-的区别","aria-hidden":"true"}},[e._v("#")]),e._v(" 三、computed 和 watch 的区别")]),e._v(" "),a("p",[a("code",[e._v("computed")]),e._v("：是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；")]),e._v(" "),a("p",[a("code",[e._v("watch")]),e._v("：更多的是「观察」的作用，类似于某些数据的监听回调，每当监听的数据变化时都会执行回调进行后续操作；")]),e._v(" "),a("h3",{attrs:{id:"四、运用的场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、运用的场景","aria-hidden":"true"}},[e._v("#")]),e._v(" 四、运用的场景")]),e._v(" "),a("ul",[a("li",[e._v("当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；")]),e._v(" "),a("li",[e._v("当我们需要在数据变化时执行异步或开销圈套的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作（访问一个 API），限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算计算属性无法做到的。")])]),e._v(" "),a("h3",{attrs:{id:"五、computed-的基本原理及源码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、computed-的基本原理及源码实现","aria-hidden":"true"}},[e._v("#")]),e._v(" 五、computed 的基本原理及源码实现")]),e._v(" "),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/tugenhua0707/p/11760466.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue 系列---理解 Vue 中的 computed,watch,methods 的区别及源码实现(六)"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/ljianshu/Blog/issues/68",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue 计算属性和侦听属性"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"联系作者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[e._v("#")]),e._v(" 联系作者")]),e._v(" "),a("div",{attrs:{align:"center"}},[a("p",[e._v("\n        平凡世界，贵在坚持。\n    ")]),e._v(" "),a("img",{attrs:{src:e.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);t.default=r.exports}}]);