(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{375:function(e,s,a){"use strict";a.r(s);var n=a(13),t=Object(n.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"generator-函数的语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generator-函数的语法"}},[e._v("#")]),e._v(" Generator 函数的语法")]),e._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),a("p",[e._v("Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。")]),e._v(" "),a("p",[e._v("Generator函数有两个特征：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("function")]),e._v("关键字与函数名之间有一个星号；")]),e._v(" "),a("li",[e._v("函数体内"),a("code",[e._v("yield")]),e._v("表达式，定义不同的内部状态；")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nvar hw = helloWorldGenerator();\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("h2",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[e._v("#")]),e._v(" 内容")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5"}},[e._v("基本概念")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8Cnext%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0"}},[e._v("next 方法的参数")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%89forof%E5%BE%AA%E7%8E%AF"}},[e._v("for...of 循环")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9B%9Bgeneratorprototypethrow"}},[e._v("Generator.prototype.throw()")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%94generatorprototypereturn"}},[e._v("Generator.prototype.return()")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E5%85%ADnextthrowreturn%E7%9A%84%E5%85%B1%E5%90%8C%E7%82%B9"}},[e._v("next()、throw()、return() 的共同点")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%83yield%E8%A1%A8%E8%BE%BE%E5%BC%8F"}},[e._v("yield* 表达式")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E5%85%AB%E4%BD%9C%E4%B8%BA%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84generator%E5%87%BD%E6%95%B0"}},[e._v("作为对象属性的Generator函数")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B9%9Dgenerator%E5%87%BD%E6%95%B0%E7%9A%84this"}},[e._v("Generator 函数的this")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8D%81%E5%90%AB%E4%B9%89"}},[e._v("含义")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8D%81%E4%B8%80%E5%BA%94%E7%94%A8"}},[e._v("应用")])])]),e._v(" "),a("h3",{attrs:{id:"一、基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、基本概念"}},[e._v("#")]),e._v(" 一、基本概念")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#11-yield%E8%A1%A8%E8%BE%BE%E5%BC%8F"}},[e._v("yield表达式")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#12-%E4%B8%8EIterator%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%85%B3%E7%B3%BB"}},[e._v("与Iterator接口的关系")])])]),e._v(" "),a("h4",{attrs:{id:"_1-1-yield表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-yield表达式"}},[e._v("#")]),e._v(" 1.1 yield表达式")]),e._v(" "),a("p",[e._v("由于Generator函数返回的遍历器对象，只有调用"),a("code",[e._v("next")]),e._v("方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。"),a("code",[e._v("yield")]),e._v("表达式就是暂停标志。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function* gen() {\n  yield  123 + 456;\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("遍历器对象的"),a("code",[e._v("next")]),e._v("方法的运行逻辑如下：")]),e._v(" "),a("ol",[a("li",[e._v("遇到"),a("code",[e._v("yield")]),e._v("表达式，就暂停执行后面的操作，并将紧跟在"),a("code",[e._v("yield")]),e._v("后面的那个表达式的值，作为返回的对象的"),a("code",[e._v("value")]),e._v("属性值。")]),e._v(" "),a("li",[e._v("下一次调用"),a("code",[e._v("next")]),e._v("方法时，再继续往下执行，直到遇到下一个"),a("code",[e._v("yield")]),e._v("表达式。")]),e._v(" "),a("li",[e._v("如果没有再遇到新的"),a("code",[e._v("yield")]),e._v("表达式，就一直运行到函数结束，直到"),a("code",[e._v("return")]),e._v("语句为止，并将"),a("code",[e._v("return")]),e._v("语句后面的表达式的值，作为返回的对象的value属性值。")]),e._v(" "),a("li",[e._v("如果该函数没有"),a("code",[e._v("return")]),e._v("语句，则返回的对象的"),a("code",[e._v("value")]),e._v("属性值为"),a("code",[e._v("undefined")]),e._v("。")])]),e._v(" "),a("h4",{attrs:{id:"_1-2-与iterator接口的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-与iterator接口的关系"}},[e._v("#")]),e._v(" 1.2 与Iterator接口的关系")]),e._v(" "),a("p",[e._v("任意一个对象的"),a("code",[e._v("Symbol.iterator")]),e._v("方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myIterable = {};\nmyIterable[Symbol.iterator] = function*(){\n  yield 1;\n  yield 2;\n  yield 3;\n};\n[...myIterable] // [1, 2, 3]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("h3",{attrs:{id:"二、next方法的参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、next方法的参数"}},[e._v("#")]),e._v(" 二、"),a("code",[e._v("next")]),e._v("方法的参数")]),e._v(" "),a("p",[a("code",[e._v("yield")]),e._v("表达式本身没有返回值，或者说总是返回"),a("code",[e._v("undefined")]),e._v("。"),a("code",[e._v("next")]),e._v("方法可以带一个参数，该参数就会被当作上一个"),a("code",[e._v("yield")]),e._v("表达式的返回值。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function * f(){\n  for(var i = 0; true;i++){\n    var reset = yield i;\n    if(reset) { i = -1; }\n  }\n}\n\nvar g = f();\n\ng.next()  // {value:0,done:false}\ng.next()  // {value:1,done:false}\ng.next(true)  // {value:0,done:false}\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("注意，由于"),a("code",[e._v("next")]),e._v("方法的参数表示上一个"),a("code",[e._v("yield")]),e._v("表达式的返回值，所以在第一次使用"),a("code",[e._v("next")]),e._v("方法时，传递参数是无效的。V8引擎直接忽略第一次使用"),a("code",[e._v("next")]),e._v("方法时的参数，只有从第二次使用"),a("code",[e._v("next")]),e._v("方法开始，参数才是有效的。")]),e._v(" "),a("h3",{attrs:{id:"三、for-of循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、for-of循环"}},[e._v("#")]),e._v(" 三、"),a("code",[e._v("for...of")]),e._v("循环")]),e._v(" "),a("p",[a("code",[e._v("for...of")]),e._v("循环可以自动遍历Generator函数运行时生成的"),a("code",[e._v("Iterator")]),e._v("对象，且此时不再需要调用"),a("code",[e._v("next")]),e._v("方法。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function * foo(){\n  yield 1;\n  yield 2;\n  yield 3;\n  yield 4;\n  yield 5;\n  return 6;\n}\n\nfor(let v of foo()){\n  console.log(v);\n}\n// 1 2 3 4 5\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("除了"),a("code",[e._v("for...of")]),e._v("循环以外，扩展运算符("),a("code",[e._v("...")]),e._v(")、解构赋值和"),a("code",[e._v("Array.from")]),e._v("方法内部调用的，都是遍历器接口。这意味着，它们都可以将Generator函数返回的Iterator对象，作为参数。")]),e._v(" "),a("h3",{attrs:{id:"四、generator-prototype-throw"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、generator-prototype-throw"}},[e._v("#")]),e._v(" 四、Generator.prototype.throw()")]),e._v(" "),a("p",[e._v("Generator函数返回的遍历器对象，都有一个"),a("code",[e._v("throw")]),e._v("方法，可以在函数体外抛出错误，然后在Generator函数体内捕获。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var g = function*(){\n  try{\n    yield;\n  }catch(e){\n    console.log('内部捕获',e);\n  }\n}\n\nvar i = g();\ni.next();\n\ntry{\n  i.throw('a');\n  i.throw('b');\n}catch(e){\n  console.log('外部捕获',e);\n}\n\n// 内部捕获e\n// 外部捕获e\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br")])]),a("h3",{attrs:{id:"五、generator-prototype-return"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、generator-prototype-return"}},[e._v("#")]),e._v(" 五、Generator.prototype.return()")]),e._v(" "),a("p",[a("code",[e._v("Generator")]),e._v("函数返回的遍历器对象，还有一个"),a("code",[e._v("return")]),e._v("方法，可以返回给定的值，并且终结遍历Generator函数。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function * gen(){\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()  // {value:1,done:false}\ng.next('foo')  // {value:'foo',done:true}\ng.next()  // {value:undefined,done:true}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br")])]),a("p",[e._v("以面代码中，遍历器对象"),a("code",[e._v("g")]),e._v("调用"),a("code",[e._v("return")]),e._v("方法后，返回值的"),a("code",[e._v("value")]),e._v("属性就是"),a("code",[e._v("return")]),e._v("方法的参数"),a("code",[e._v("foo")]),e._v("。并且，Generator函数的遍历就终止了，返回值的"),a("code",[e._v("done")]),e._v("属性为"),a("code",[e._v("true")]),e._v("，以后再调用"),a("code",[e._v("next")]),e._v("方法，"),a("code",[e._v("done")]),e._v("属性总是返回"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"六、next-、throw-、return-的共同点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、next-、throw-、return-的共同点"}},[e._v("#")]),e._v(" 六、"),a("code",[e._v("next()、throw()、return()")]),e._v("的共同点")]),e._v(" "),a("p",[a("code",[e._v("next()")]),e._v("、"),a("code",[e._v("throw()")]),e._v("、"),a("code",[e._v("return()")]),e._v("这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让Generator函数恢复执行，并且使用不同的语句替换"),a("code",[e._v("yield")]),e._v("表达式。")]),e._v(" "),a("p",[a("code",[e._v("next()")]),e._v("是将"),a("code",[e._v("yield")]),e._v("表达式替换成一个值。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const g = function*(x,y){\n  let result = yield x+y;\n  return result;\n};\n\nconst gen = g(1,2);\ngen.next();   // Object {value:3,done:false}\ngen.next(1);  // Object {value:1,done:true}\n\n// 相当于将 let result = yield x+y;\n// 替换成 let result = 1;\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br")])]),a("p",[a("code",[e._v("throw()")]),e._v("是将"),a("code",[e._v("yield")]),e._v("表达式替换成一个"),a("code",[e._v("throw")]),e._v("语句。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("gen.throw(new Error('出错了'));   // Uncaught Error:出错了\n// 相当于将 let result = yield x+y\n// 替换成 let result = throw(new Error('出错了'));\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[a("code",[e._v("return()")]),e._v("是将"),a("code",[e._v("yield")]),e._v("表达式替换成一个"),a("code",[e._v("return")]),e._v("语句。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("gen.return(2);    // Object {value:2,done:true}\n// 相当于将let result = yield x+y\n// 替换成 let result = return 2;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("h3",{attrs:{id:"七、yield-表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、yield-表达式"}},[e._v("#")]),e._v(" 七、"),a("code",[e._v("yield*")]),e._v("表达式")]),e._v(" "),a("p",[a("code",[e._v("yield*")]),e._v("表达式，用来在一个Generator函数里面执行另一个Generator函数。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function * foo(){\n  yield 'a';\n  yield 'b';\n}\n\nfunction * bar(){\n  yield 'x';\n  yield* foo();\n  yield 'y';\n}\n\n// 等同于\nfunction * bar(){\n  yield 'x';\n  yield 'a';\n  yield 'b';\n  yield 'y';\n}\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br")])]),a("h3",{attrs:{id:"八、作为对象属性的generator函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、作为对象属性的generator函数"}},[e._v("#")]),e._v(" 八、作为对象属性的Generator函数")]),e._v(" "),a("p",[e._v("如果一个对象的属性是Generator函数，可以简写成下面的形式。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let obj = {\n  * myGeneratorMethod(){\n    ...\n  }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("h3",{attrs:{id:"九、generator函数的this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九、generator函数的this"}},[e._v("#")]),e._v(" 九、"),a("code",[e._v("Generator")]),e._v("函数的"),a("code",[e._v("this")])]),e._v(" "),a("p",[e._v("ES6规定这个遍历器是Generator函数的实例，也继承了Generator函数的"),a("code",[e._v("prototype")]),e._v("对象上的方法。")]),e._v(" "),a("p",[e._v("如果把"),a("code",[e._v("Generator")]),e._v("当作普通的构造函数，并不会生效，因为"),a("code",[e._v("Generator")]),e._v("返回的总是遍历器对象，而不是"),a("code",[e._v("this")]),e._v("对象。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function* g(){\n  this.a= 11;\n}\n\nlet obj = g();\nobj.a // undefined\n\nfunction* F() {\n  yield this.x = 2;\n  yield this.y = 3;\n}\n\nnew F()\n// TypeError: F is not a constructor\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br")])]),a("p",[e._v("有一个变通方法，首先，生成一个空对象，使用"),a("code",[e._v("call")]),e._v("方法绑定"),a("code",[e._v("Generator")]),e._v("函数的内部的"),a("code",[e._v("this")]),e._v("。这样，构造函数调用以后，这个空对象就是"),a("code",[e._v("Generator")]),e._v("函数的实例对象了。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function* F(){\n\n}\nvar obj = {};\nvar f = F.call(obj);\n\nf.next();   // Object {value:2,done:false}\nf.next();   // Object {value:3,done:false}\nf.next();   // Object {value:undefined,done:true}\n\nobj.a // 1\nobj.b // 2\nobj.c // 3\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("h3",{attrs:{id:"十、含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十、含义"}},[e._v("#")]),e._v(" 十、含义")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#101-generator%E4%B8%8E%E7%8A%B6%E6%80%81%E6%9C%BA"}},[e._v("Generator与状态机")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#102-generator%E4%B8%8E%E5%8D%8F%E7%A8%8B"}},[e._v("Generator与协程")])])]),e._v(" "),a("h4",{attrs:{id:"_10-1-generator与状态机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-generator与状态机"}},[e._v("#")]),e._v(" 10.1 Generator与状态机")]),e._v(" "),a("p",[e._v("Generator 是实现状态机的最佳结构。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var clock = function *(){\n  while(true){\n    console.log('Tick!');\n    yield;\n    console.log('Tock!');\n    yield;\n  }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("h4",{attrs:{id:"_10-2-generator与协程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-generator与协程"}},[e._v("#")]),e._v(" 10.2 Generator与协程")]),e._v(" "),a("p",[e._v("协程是一种程序运行的方式，可以理解成“协作的线程”或“协作的函数”，协程既可以用单线程实现，也可以用多线程实现。前者是一种特殊的子例程，后者是一种特殊的线程。")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1021-%E5%8D%8F%E7%A8%8B%E4%B8%8E%E5%AD%90%E4%BE%8B%E7%A8%8B%E7%9A%84%E5%B7%AE%E5%BC%82"}},[e._v("协程与子例程的差异")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#1022-%E5%8D%8F%E7%A8%8B%E4%B8%8E%E6%99%AE%E9%80%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%B7%AE%E5%BC%82"}},[e._v("协程与普通线程的差异")])])]),e._v(" "),a("h5",{attrs:{id:"_10-2-1-协程与子例程的差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-1-协程与子例程的差异"}},[e._v("#")]),e._v(" 10.2.1 协程与子例程的差异")]),e._v(" "),a("p",[e._v("传统的“子例程”（subroutine）采用堆栈式“后进先出”的执行方式，只有当调用的子函数完全执行完毕，才会结束执行父函数。协程与其不同，多个线程（单线程情况下，即多个函数）可以并行执行，但是只有一个线程（或函数）处于正在运行的状态，其他线程（或函数）都处于暂停态（suspended），线程（或函数）之间可以交换执行权。也就是说，一个线程（或函数）执行到一半，可以暂停执行，将执行权交给另一个线程（或函数），等到稍后收回执行权的时候，再恢复执行。这种可以并行执行、交换执行权的线程（或函数），就称为协程。")]),e._v(" "),a("p",[e._v("从实现上看，在内存中，子例程只使用一个栈（stack），而协程是同时存在多个栈，但只有一个栈是在运行状态，也就是说，协程是以多占用内存为代价，实现多任务的并行。")]),e._v(" "),a("h5",{attrs:{id:"_10-2-2-协程与普通线程的差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-2-协程与普通线程的差异"}},[e._v("#")]),e._v(" 10.2.2 协程与普通线程的差异")]),e._v(" "),a("p",[e._v("不难看出，协程适合用于多任务运行的环境。在这个意义上，它与普通的线程很相似，都有自己的执行上下文、可以分享全局变量。它们的不同之处在于，同一时间可以有多个线程处于运行状态，但是运行的协程只能有一个，其他协程都处于暂停状态。此外，普通的线程是抢先式的，到底哪个线程优先得到资源，必须由运行环境决定，但是协程是合作式的，执行权由协程自己分配。")]),e._v(" "),a("p",[e._v("由于 JavaScript 是单线程语言，只能保持一个调用栈。引入协程以后，每个任务可以保持自己的调用栈。这样做的最大好处，就是抛出错误的时候，可以找到原始的调用栈。不至于像异步操作的回调函数那样，一旦出错，原始的调用栈早就结束。\nGenerator 函数是 ES6 对协程的实现，但属于不完全实现。Generator 函数被称为“半协程”（semi-coroutine），意思是只有 Generator 函数的调用者，才能将程序的执行权还给 Generator 函数。如果是完全执行的协程，任何函数都可以让暂停的协程继续执行。")]),e._v(" "),a("p",[e._v("如果将 Generator 函数当作协程，完全可以将多个需要互相协作的任务写成 Generator 函数，它们之间使用yield表示式交换控制权。")]),e._v(" "),a("h3",{attrs:{id:"十一、应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十一、应用"}},[e._v("#")]),e._v(" 十一、应用")]),e._v(" "),a("p",[a("code",[e._v("Generator")]),e._v("可以暂停函数执行，返回任意表达式的值。这种特点使得Generator有多种应用场景。")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#111-%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E5%90%8C%E6%AD%A5%E5%8C%96%E8%A1%A8%E8%BE%BE"}},[e._v("异步操作的同步化表达")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#112-%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86"}},[e._v("控制流程管理")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#113-%E9%83%A8%E7%BD%B2iterator%E6%8E%A5%E5%8F%A3"}},[e._v("部署Iterator接口")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#114-%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84"}},[e._v("作为数据结构")])])]),e._v(" "),a("h4",{attrs:{id:"_11-1-异步操作的同步化表达"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-异步操作的同步化表达"}},[e._v("#")]),e._v(" 11.1 异步操作的同步化表达")]),e._v(" "),a("p",[a("code",[e._v("Generator")]),e._v("函数的暂停执行的效果，意味着可以把异步操作的写在"),a("code",[e._v("yield")]),e._v("表达式里面，等到用"),a("code",[e._v("next")]),e._v("方法时再往后执行。这实际上等同于不需要写回调函数了，因为异步操作的后续操作可以放在"),a("code",[e._v("yield")]),e._v("表达式下面，反正要等到调用"),a("code",[e._v("next")]),e._v("方法时再执行。所以，Generator函数的一个重要实际意义就是用来处理异步操作，改写回调函数。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function * main(){\n  var result = yield request('http://some.url');\n  var resp = JSON.parse(result);\n  console.log(resp.value);\n}\n\nfunction request(url){\n  makeAjaxCall(url,function(response){\n    it.next(response);\n  });\n}\n\nvar it = main();\nit.next();\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br")])]),a("h4",{attrs:{id:"_11-2-控制流程管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-控制流程管理"}},[e._v("#")]),e._v(" 11.2 控制流程管理")]),e._v(" "),a("p",[a("code",[e._v("Generator")]),e._v("函数可以改善代码运行流程。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function * longRunningTask(value1){\n  try{\n    var value2 = yield step1(value1);\n    var value3 = yield step1(value2);\n    var value4 = yield step1(value3);\n    var value5 = yield step1(value4);\n  }catch(e){\n    // Handle any error from step1 through step4\n  }\n}\n\nfunction scheduler(task){\n  var taskObj = task.next(task.value);\n  // 如果Generator函数未结束，就继续调用\n  if(!taskObj.done){\n    task.value = taskObj.value;\n    scheduler(task);\n  }\n}\n\nscheduler(longRunningTask(initialValue));\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br")])]),a("h4",{attrs:{id:"_11-3-部署iterator接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-部署iterator接口"}},[e._v("#")]),e._v(" 11.3 部署Iterator接口")]),e._v(" "),a("p",[e._v("利用 Generator 函数，可以在任意对象上部署 Iterator 接口。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function * iterEntries(obj){\n  let keys = Object.keys(obj);\n  for(let i=0;i<keys.length;i++){\n    let key = keys[i];\n    yield [key,obj[key]];\n  }\n}\n\nlet myObj = { foo: 3, bar: 7 };\n\nfor (let [key, value] of iterEntries(myObj)) {\n  console.log(key, value);\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("h4",{attrs:{id:"_11-4-作为数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-4-作为数据结构"}},[e._v("#")]),e._v(" 11.4 作为数据结构")]),e._v(" "),a("p",[e._v("Generator可以看作是数据结构，更确切地说，可以看作是一个数组结构，因为 Generator 函数可以返回一系列的值，这意味着它可以对任意表达式，提供类似数组的接口。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function *doStuff() {\n  yield fs.readFile.bind(null, 'hello.txt');\n  yield fs.readFile.bind(null, 'world.txt');\n  yield fs.readFile.bind(null, 'and-such.txt');\n}\n\nfor (task of doStuff()) {\n  // task是一个函数，可以像回调函数那样使用它\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/generator",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMAScript 6 入门"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://yjhenan.gitbooks.io/-ecmascript-6/content/docs/generator.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("《ECMAScript 6 入门》 第三版"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"联系作者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系作者"}},[e._v("#")]),e._v(" 联系作者")]),e._v(" "),a("div",{attrs:{align:"center"}},[a("p",[e._v("\n        平凡世界，贵在坚持。\n    ")]),e._v(" "),a("img",{attrs:{src:e.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);s.default=t.exports}}]);