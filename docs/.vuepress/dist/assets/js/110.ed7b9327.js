(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{374:function(n,a,s){"use strict";s.r(a);var e=s(2),t=Object(e.a)({},(function(){var n=this,a=n.$createElement,s=n._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域","aria-hidden":"true"}},[n._v("#")]),n._v(" 作用域")]),n._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),s("p",[n._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),n._v(" "),s("h2",{attrs:{id:"内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[n._v("#")]),n._v(" 内容")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E4%B8%80%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%AE%9A%E4%B9%89"}},[n._v("作用域定义")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%8C%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1"}},[n._v("变量对象")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%89%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE"}},[n._v("作用域链")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E5%9B%9B%E9%9D%A2%E8%AF%95%E5%BF%85%E5%88%B7%E9%A2%98"}},[n._v("面试必刷题")])])]),n._v(" "),s("h3",{attrs:{id:"一、作用域定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、作用域定义","aria-hidden":"true"}},[n._v("#")]),n._v(" 一、作用域定义")]),n._v(" "),s("p",[n._v("作用域是指程序源代码定义变量的区域。")]),n._v(" "),s("p",[n._v("作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。")]),n._v(" "),s("p",[n._v("JavaScript 采用词法作用域，也就是静态作用域。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("\nvar value = 1;\n\nfunction foo() {\n    console.log(value);\n}\n\nfunction bar() {\n    var value = 2;\n    foo();\n}\n\nbar();\n\n// 结果是 1\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("h3",{attrs:{id:"二、变量对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、变量对象","aria-hidden":"true"}},[n._v("#")]),n._v(" 二、变量对象")]),n._v(" "),s("p",[n._v("如果变量与执行上下文相关，那变量自己应该知道它的数据存储在哪里，并且知道如何访问。这种机制称为变量对象。")]),n._v(" "),s("p",[n._v("变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。")]),n._v(" "),s("ol",[s("li",[n._v("全局上下文的变量对象初始化是全局对象")]),n._v(" "),s("li",[n._v("函数上下文的变量对象初始化只包括 Arguments 对象")]),n._v(" "),s("li",[n._v("在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值")]),n._v(" "),s("li",[n._v("在代码执行阶段，会再次修改变量对象的属性值")])]),n._v(" "),s("h3",{attrs:{id:"三、作用域链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、作用域链","aria-hidden":"true"}},[n._v("#")]),n._v(" 三、作用域链")]),n._v(" "),s("p",[n._v("**作用域链：**当访问一个变量时，解释器会首先在当前作用域查找标示符，如果没有找到，就去父作用域找，直到该变量的标示符不在父作用域中，这就是作用域链。")]),n._v(" "),s("p",[n._v("作用域链和原型继承查找时的区别：如果去查找一个普通对象的属性，但是在当前对象和其原型中都找不到时，会返回 undefined；但查找的属性在作用域链中不存在的话就会抛出 ReferenceError。")]),n._v(" "),s("h4",{attrs:{id:"_3-1-无嵌套的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-无嵌套的函数","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.1 无嵌套的函数")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('// my_script.js\n"use strict";\n\nvar foo = 1;\nvar bar = 2;\n\nfunction myFunc() {\n\n  var a = 1;\n  var b = 2;\n  var foo = 3;\n  console.log("inside myFunc");\n\n}\n\nconsole.log("outside");\nmyFunc();\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br")])]),s("p",[n._v("**定义时：**当 myFunc 被定义的时候，myFunc 的标识符（identifier）就被加到了全局对象中，这个标识符所引用的是一个函数对象（myFunc function object）。")]),n._v(" "),s("p",[n._v("内部属性[[scope]]指向当前的作用域对象，也就是函数的标识符被创建的时候，我们所能够直接访问的那个作用域对象（即全局对象）。")]),n._v(" "),s("p",[s("img",{attrs:{src:"scope01.png",alt:""}})]),n._v(" "),s("p",[n._v("myFunc 所引用的函数对象，其本身不仅仅含有函数的代码，并且还含有指向其被创建的时候的作用域对象。")]),n._v(" "),s("p",[n._v("**调用时：**当 myFunc 函数被调用的时候，一个新的作用域对象被创建了。新的作用域对象中包含 myFunc 函数所定义的本地变量，以及其参数（arguments）。这个新的作用域对象的父作用域对象就是在运行 myFunc 时能直接访问的那个作用域对象（即全局对象）。")]),n._v(" "),s("p",[s("img",{attrs:{src:"scope02.png",alt:""}})]),n._v(" "),s("h4",{attrs:{id:"_3-2-有嵌套的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-有嵌套的函数","aria-hidden":"true"}},[n._v("#")]),n._v(" 3.2 有嵌套的函数")]),n._v(" "),s("p",[n._v("当函数返回没有被引用的时候，就会被垃圾回收器回收。但是对于闭包，即使外部函数返回了，函数对象仍会引用它被创建时的作用域对象。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('"use strict";\nfunction createCounter(initial) {\n  var counter = initial;\n\n  function increment(value) {\n    counter += value;\n  }\n\n  function get() {\n    return counter;\n  }\n\n  return {\n    increment: increment,\n    get: get\n  };\n}\n\nvar myCounter = createCounter(100);\nconsole.log(myCounter.get());   // 返回 100\n\nmyCounter.increment(5);\nconsole.log(myCounter.get());   // 返回 105\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])]),s("p",[n._v("当调用 createCounter(100) 时，内嵌函数 increment 和 get 都有指向 createCounter(100) scope 的引用。假设 createCounter(100)没有任何返回值，那么 createCounter(100) scope 不再被引用，于是就可以被垃圾回收。")]),n._v(" "),s("p",[s("img",{attrs:{src:"scope03.png",alt:""}})]),n._v(" "),s("p",[n._v("但是 createCounter(100)实际上是有返回值的，并且返回值被存储在了 myCounter 中，所以对象之间的引用关系如下图：")]),n._v(" "),s("p",[s("img",{attrs:{src:"scope04.png",alt:""}})]),n._v(" "),s("p",[n._v("即使 createCounter(100)已经返回，但是其作用域仍在，并且只能被内联函数访问。可以通过调用 myCounter.increment() 或 myCounter.get()来直接访问 createCounter(100)的作用域。")]),n._v(" "),s("p",[n._v("当 myCounter.increment() 或 myCounter.get()被调用时，新的作用域对象会被创建，并且该作用域对象的父作用域对象会是当前可以直接访问的作用域对象。")]),n._v(" "),s("p",[n._v("调用 get()时，当执行到 return counter 时，在 get()所在的作用域并没有找到对应的标示符，就会沿着作用域链往上找，直到找到变量 counter，然后返回该变量。")]),n._v(" "),s("p",[s("img",{attrs:{src:"scope05.png",alt:""}})]),n._v(" "),s("p",[n._v("单独调用 increment(5)时，参数 value 保存在当前的作用域对象。当函数要访问 counter 时，没有找到，于是沿着作用域链向上查找，在 createCounter(100)的作用域找到了对应的标示符，increment()就会修改 counter 的值。除此之外，没有其他方式来修改这个变量。闭包的强大也在于此，能够存贮私有数据。")]),n._v(" "),s("p",[s("img",{attrs:{src:"scope06.png",alt:""}})]),n._v(" "),s("p",[n._v("创建两个函数："),s("code",[n._v("myCounter1")]),n._v("和"),s("code",[n._v("myCounter2")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('//my_script.js\n"use strict";\nfunction createCounter(initial) {\n  /* ... see the code from previous example ... */\n}\n\n//-- create counter objects\nvar myCounter1 = createCounter(100);\nvar myCounter2 = createCounter(200);\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[s("img",{attrs:{src:"scope07.png",alt:""}})]),n._v(" "),s("p",[n._v("myCounter1.increment 和 myCounter2.increment 的函数对象拥有着一样的代码以及一样的属性值（name，length 等等），但是它们的[[scope]]指向的是不一样的作用域对象。")]),n._v(" "),s("h3",{attrs:{id:"四、面试必刷题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、面试必刷题","aria-hidden":"true"}},[n._v("#")]),n._v(" 四、面试必刷题")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("\nvar data = [];\n\nfor (var i = 0; i < 3; i++) {\n  data[i] = function () {\n    console.log(i);\n  };\n}\n\ndata[0]();\ndata[1]();\ndata[2]();\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("p",[n._v("如果知道闭包的，答案就很明显了，都是 3")]),n._v(" "),s("p",[n._v("循环结束后，全局执行上下文的 VO 是")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("globalContext = {\n    VO: {\n        data: [...],\n        i: 3\n    }\n}\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("执行 data[0] 函数的时候，data[0] 函数的作用域链为：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("data[0]Context = {\n    Scope: [AO, globalContext.VO]\n}\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("h4",{attrs:{id:"解决办法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决办法","aria-hidden":"true"}},[n._v("#")]),n._v(" 解决办法")]),n._v(" "),s("p",[n._v("改成闭包，方法就是 data[i]返回一个函数，并访问变量 i")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("var data = [];\n\nfor (var i = 0; i < 3; i++) {\n  data[i] = (function (i) {\n      return function(){\n          console.log(i);\n      }\n  })(i);\n}\n\ndata[0]();\t// 0\ndata[1]();\t// 1\ndata[2]();\t// 2\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("h3",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[n._v("#")]),n._v(" 参考资料")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/6",target:"_blank",rel:"noopener noreferrer"}},[n._v("JavaScript 深入之作用域链"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/3",target:"_blank",rel:"noopener noreferrer"}},[n._v("JavaScript 深入之词法作用域和动态作用域"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://muyiy.vip/blog/2/2.1.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("深入浅出图解作用域链和闭包"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/TomXu/archive/2012/01/18/2312463.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("深入理解 JavaScript 系列（14）：作用域链(Scope Chain)"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5d13a5fce51d455a694f9560",target:"_blank",rel:"noopener noreferrer"}},[n._v("深入理解 JavaScript, 从作用域与作用域链开始"),s("OutboundLink")],1)])]),n._v(" "),s("h2",{attrs:{id:"联系作者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[n._v("#")]),n._v(" 联系作者")]),n._v(" "),s("div",{attrs:{align:"center"}},[s("p",[n._v("\n        平凡世界，贵在坚持。\n    ")]),n._v(" "),s("img",{attrs:{src:n.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);a.default=t.exports}}]);