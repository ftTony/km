(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{339:function(s,e,a){"use strict";a.r(e);var n=a(4),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"正则表达式学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式学习","aria-hidden":"true"}},[s._v("#")]),s._v(" 正则表达式学习")]),s._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),s._v(" "),a("h2",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[s._v("#")]),s._v(" 内容")]),s._v(" "),a("ul",[a("li",[s._v("正则表达式字符匹配攻略")]),s._v(" "),a("li",[s._v("正则表达式位置匹配攻略")]),s._v(" "),a("li",[s._v("正则表达式括号的作用")]),s._v(" "),a("li",[s._v("正则表达式回溯法原理")]),s._v(" "),a("li",[s._v("正则表达式的拆分")]),s._v(" "),a("li",[s._v("正则表达式的构建")]),s._v(" "),a("li",[s._v("正则表达式编程")])]),s._v(" "),a("h3",{attrs:{id:"一、正则表达式字符匹配攻略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、正则表达式字符匹配攻略","aria-hidden":"true"}},[s._v("#")]),s._v(" 一、正则表达式字符匹配攻略")]),s._v(" "),a("p",[s._v("正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。")]),s._v(" "),a("p",[s._v("然而关于正则如何匹配字符的学习，大部分人都觉得这块比较杂乱。")]),s._v(" "),a("p",[s._v("毕竟元字符太多了，看起来没有系统性，不好记。本章就解决这个问题。")]),s._v(" "),a("p",[s._v("内容包括：")]),s._v(" "),a("ul",[a("li",[s._v("两种模糊匹配")]),s._v(" "),a("li",[s._v("字符组")]),s._v(" "),a("li",[s._v("量词")]),s._v(" "),a("li",[s._v("分支结构")]),s._v(" "),a("li",[s._v("案例分析")])]),s._v(" "),a("h4",{attrs:{id:"_1-1-两种模糊匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-两种模糊匹配","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.1 两种模糊匹配")]),s._v(" "),a("p",[s._v("如果与此同时只有精确切尔西是没多大意义的，比如"),a("code",[s._v("/hello/")]),s._v("，也只能切尔西字符串中的“hello”这个子串。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /hello/;\nconsole.log( regex.test("hello") );\n// => true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("正则表达式之所以强大，是因为其能实现模糊匹配。")]),s._v(" "),a("p",[s._v("而模糊切尔西，有两个方向上的“模糊”；横向模糊和纵身模糊。")]),s._v(" "),a("p",[a("strong",[s._v("横向模糊匹配")])]),s._v(" "),a("p",[s._v("横向模糊指的是，一个正则可切匹配的字符串的长度不是固定的，可以是多种情况的。")]),s._v(" "),a("p",[s._v("其实实现的方式是使用量词。譬如"),a("code",[s._v("{m,n}")]),s._v("，表示连续出现最少 m 次，最多 n 次。")]),s._v(" "),a("p",[s._v("比如"),a("code",[s._v("/ab{2,5}c/")]),s._v("表示匹配这样一个字符串：第一个字符是“a”，接下来是 2 到 6 个字符串“b”，最后是字符“c”，测试如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /ab{2,5}c/g;\nvar string = "abc abbc abbbc abbbbc abbbbbc abbbbbbc";\nconsole.log( string.match(regex) );\n// => ["abbc", "abbbc", "abbbbc", "abbbbbc"]\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("注意：案例中用的正则"),a("code",[s._v("/ab{2,5}c/g")]),s._v("，后面多了"),a("code",[s._v("g")]),s._v("，它是正则的一个修饰符。表示全局匹配，即在目标字符串中按顺序找到满足切尔西模式的所有子串，强调的是“所有”，而不只是“第一个”。g 是单词 global 的首字母。")]),s._v(" "),a("p",[a("strong",[s._v("纵向模糊匹配")])]),s._v(" "),a("p",[s._v("纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。")]),s._v(" "),a("p",[s._v("其实的方式是使用字符组。譬如"),a("code",[s._v("[abc]")]),s._v('，表示该字符是可以字符“a”、"b"、"c"中的任何一个。')]),s._v(" "),a("p",[s._v("比如"),a("code",[s._v("/a[123]b/")]),s._v('可以匹配如下三种字符串："a1b"、"a2b"、"a3b"。测试如下：')]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /a[123]b/g;\nvar string = "a0b a1b a2b a3b a4b";\nconsole.log( string.match(regex) );\n// => ["a1b", "a2b", "a3b"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("以上就是本章讲的主体内容，只要掌握横向和纵向模糊匹配，就能解决很大部分正则匹配问题。")]),s._v(" "),a("p",[s._v("接下来的内容就是展开说了，如果对此都比熟悉的话，可以跳过，直接看本章案例那节。")]),s._v(" "),a("h4",{attrs:{id:"_1-2-字符组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-字符组","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.2 字符组")]),s._v(" "),a("p",[s._v("需要强调的是，虽叫字符组（字符类），但只是其中一个字符，例如"),a("code",[s._v("[abc]")]),s._v('，表示匹配一个字符，它可以是"a"、"b"、"c"之一。')]),s._v(" "),a("p",[a("strong",[s._v("范围表示法")])]),s._v(" "),a("p",[s._v("如果字符组里的字符特别多的话，怎么办？可以使用范围表示法。")]),s._v(" "),a("p",[s._v("比如"),a("code",[s._v("[123456abcdefGHIJKLM]")]),s._v("，可以写成"),a("code",[s._v("[1-6a-fG-M]")]),s._v("。用连字符"),a("code",[s._v("-")]),s._v("来省略和简写。")]),s._v(" "),a("p",[s._v('因为连字符有特殊用途，那么要匹配"a"、"-"、"z"这三者中任意一个字符，该怎么做呢？')]),s._v(" "),a("p",[s._v("不能写成"),a("code",[s._v("[a-z]")]),s._v("，因为其表示小写字符中的任何一个字符。")]),s._v(" "),a("p",[s._v("可以写成如下的方式："),a("code",[s._v("[-az]")]),s._v("或"),a("code",[s._v("[az-]")]),s._v("或"),a("code",[s._v("[a\\-z]")]),s._v("。即要么放在开头，要么放在结尾，要么转义。总之不会让引擎认为是范围表示法就行了。")]),s._v(" "),a("p",[a("strong",[s._v("排除字符组")])]),s._v(" "),a("p",[s._v('纵向模糊匹配，还有一种情形就是，某位字符可以是任何东西，但就不能是"a"、"b"、"c"。')]),s._v(" "),a("p",[s._v("此时就是排除字符组（反义字符组）的概念。例如"),a("code",[s._v("[^abc]")]),s._v('，表示是一个除"a"、"b"、"c"之外的任意一个字符。字符组的第一位放'),a("code",[s._v("^")]),s._v("（脱字符），表示求反的概念。")]),s._v(" "),a("p",[s._v("当然，也有相应的范围表示法。")]),s._v(" "),a("p",[a("strong",[s._v("常见的简写形式")])]),s._v(" "),a("p",[s._v("有了字符组的概念后，一些常见的符号我们也就理解了。因为它们都是系统自带的简写形式。")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("\\d")]),s._v(" 就是"),a("code",[s._v("[0-9]")]),s._v("。表示是一位数字。记忆方式：其英文是 digit（数字）。\n"),a("code",[s._v("\\D")]),s._v(" 就是"),a("code",[s._v("[^0-9]")]),s._v("。表示除数字外的任意字符。\n"),a("code",[s._v("\\w")]),s._v(" 就是"),a("code",[s._v("[0-9a-zA-Z_]")]),s._v("。表示数字、大小写字母和下划线。记忆方式：w 是 word 的简写，也称单词字符。\n"),a("code",[s._v("\\W")]),s._v(" 是"),a("code",[s._v("[^0-9a-za-z_]")]),s._v("。非单词字符。\n"),a("code",[s._v("\\s")]),s._v(" 是"),a("code",[s._v("[ \\t\\v\\n\\r\\f]")]),s._v("。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s 是 space character 的首字母。\n"),a("code",[s._v("\\S")]),s._v(" 是"),a("code",[s._v("[^ \\t\\v\\n\\r\\f]")]),s._v("。 非空白符。\n"),a("code",[s._v(".")]),s._v("就是"),a("code",[s._v("[^\\n\\r\\u2028\\u2029]")]),s._v("。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号...中的每个点，都可以理解成占位符，表示任何类似的东西。")])]),s._v(" "),a("p",[s._v("如果要匹配任意字符怎么办？可以使用"),a("code",[s._v("[\\d\\D]")]),s._v("、"),a("code",[s._v("[\\w\\W]")]),s._v("、"),a("code",[s._v("[\\s\\S]")]),s._v("和"),a("code",[s._v("[^]")]),s._v("中任何的一个。")]),s._v(" "),a("h4",{attrs:{id:"_1-3-量词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-量词","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.3 量词")]),s._v(" "),a("p",[s._v("量词也称重复。掌握"),a("code",[s._v("{m,n}")]),s._v("的准确含义后，只需要记住一些简写形式。")]),s._v(" "),a("p",[a("strong",[s._v("简写形式")])]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("{m,}")]),s._v(" 表示至少出现 m 次。\n"),a("code",[s._v("{m}")]),s._v(" 等价于"),a("code",[s._v("{m,m}")]),s._v("，表示出现 m 次。\n"),a("code",[s._v("?")]),s._v(" 等价于"),a("code",[s._v("{0,1}")]),s._v("，表示出现或者不出现。记忆方式：问号的意思表示，有吗？\n"),a("code",[s._v("+")]),s._v("等价于"),a("code",[s._v("{1,}")]),s._v("，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。\n"),a("code",[s._v("*")]),s._v("等价于"),a("code",[s._v("{0,}")]),s._v("，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。")])]),s._v(" "),a("p",[a("strong",[s._v("贪婪匹配和惰性匹配")])]),s._v(" "),a("p",[s._v("看如下的例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /\\d{2,5}/g;\nvar string = "123 1234 12345 123456";\nconsole.log( string.match(regex) );\n// => ["123", "1234", "12345", "12345"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("其中正则"),a("code",[s._v("/\\d{2,5}/")]),s._v("，表示数字连续出现 2 到 5 次。会匹配 2 位、3 位、4 位、5 位连续数字。")]),s._v(" "),a("p",[s._v("但是其是贪婪的，它会尽可能多的匹配。你能给我 6 个，我就要 5 个。你能给我 3 个，我就 3 要个。反正只要在能力范围内，越多越好。")]),s._v(" "),a("p",[s._v("我们知道有时贪婪不是一件好事。而惰性切尔西，就是尽可能少的匹配：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /\\d{2,5}?/g;\nvar string = "123 1234 12345 123456";\nconsole.log( string.match(regex) );\n// => ["12", "12", "34", "12", "34", "12", "34", "56"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("其中"),a("code",[s._v("/\\d{2,5}?/")]),s._v("表示，虽然 2 到 5 次都行，当 2 个就够的时候，就不在往下尝试了。")]),s._v(" "),a("p",[s._v("通过在量词后面加个问号就能实现惰性匹配，因此所有惰性匹配情形如下：")]),s._v(" "),a("blockquote",[a("p",[s._v("{m,n}?\n{m,}?\n??\n+?\n*?")])]),s._v(" "),a("p",[s._v("对惰性匹配的记忆方式是：量词后面加个问号，问一问你知足了吗，你很贪婪吗？")]),s._v(" "),a("h4",{attrs:{id:"_1-4-多选分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-多选分支","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.4 多选分支")]),s._v(" "),a("p",[s._v("一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一。")]),s._v(" "),a("p",[s._v("具体形式如下："),a("code",[s._v("(p1|p2|p3)")]),s._v("，其中 "),a("code",[s._v("p1")]),s._v("、"),a("code",[s._v("p2")]),s._v(" 和 "),a("code",[s._v("p3")]),s._v(" 是子模式，用"),a("code",[s._v("|")]),s._v("（管道符）分隔，表示其中任何之一。")]),s._v(" "),a("p",[s._v('例如要匹配"good"和"nice"可以使用'),a("code",[s._v("/good|nice/")]),s._v("。测试如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /good|nice/g;\nvar string = "good idea, nice try.";\nconsole.log( string.match(regex) );\n// => ["good", "nice"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v('但有个事实我们应该注意，比如我用/good|goodbye/，去匹配"goodbye"字符串时，结果是"good"：')]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /good|goodbye/g;\nvar string = "goodbye";\nconsole.log( string.match(regex) );\n// => ["good"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("但有个事实我们应该注意，比如我用"),a("code",[s._v("/good|goodbye/")]),s._v('，去匹配"goodbye"字符串时，结果是"good"：')]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /goodbye|good/g;\nvar string = "goodbye";\nconsole.log( string.match(regex) );\n// => ["goodbye"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("而把正则改成"),a("code",[s._v("/goodbye|good/")]),s._v("，结果是：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /goodbye|good/g;\nvar string = "goodbye";\nconsole.log( string.match(regex) );\n// => ["goodbye"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("也就是说，分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了。")]),s._v(" "),a("h4",{attrs:{id:"_1-3-案例分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-案例分析","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.3 案例分析")]),s._v(" "),a("p",[s._v("匹配字符，无非就是字符组、量词和分支结构的组合使用罢了。")]),s._v(" "),a("p",[s._v("下面找几个例子演练一下（其中，每个正则并不是只有唯一写法）：")]),s._v(" "),a("p",[a("strong",[s._v("匹配 16 进制颜色值")])]),s._v(" "),a("p",[s._v("要求匹配：")]),s._v(" "),a("blockquote",[a("p",[s._v("#ffbbad\n#Fc01DF\n#FFF\n#ffE")])]),s._v(" "),a("p",[s._v("分析：")]),s._v(" "),a("p",[s._v("表示一个 16 进制字符，可以用字符组"),a("code",[s._v("[0-9a-fA-F]")]),s._v("。")]),s._v(" "),a("p",[s._v("其中字符可以出现 3 或 6 次，需要是用量词和分支结构。")]),s._v(" "),a("p",[s._v("使用分支结构时，需要注意顺序。")]),s._v(" "),a("p",[s._v("正则如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;\nvar string = "#ffbbad #Fc01DF #FFF #ffE";\nconsole.log( string.match(regex) );\n// => ["#ffbbad", "#Fc01DF", "#FFF", "#ffE"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("匹配时间")])]),s._v(" "),a("p",[s._v("以 24 小时制为例。")]),s._v(" "),a("p",[s._v("要求匹配：")]),s._v(" "),a("blockquote",[a("p",[s._v("23:59\n02:07")])]),s._v(" "),a("p",[s._v("分析：")]),s._v(" "),a("p",[s._v("共 4 位数字，第一位数字可以为"),a("code",[s._v("[0-2]")]),s._v("。")]),s._v(" "),a("p",[s._v("当第 1 位为 2 时，第 2 位可以为"),a("code",[s._v("[0-3]")]),s._v("，其他情况时，第 2 位为"),a("code",[s._v("[0-9]")]),s._v("。")]),s._v(" "),a("p",[s._v("第 3 位数字为"),a("code",[s._v("[0-5]")]),s._v("，第 4 位为"),a("code",[s._v("[0-9]")])]),s._v(" "),a("p",[s._v("正则如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /^([01][0-9]|[2][0-3]):[0-5][0-9]$/;\nconsole.log( regex.test("23:59") );\nconsole.log( regex.test("02:07") );\n// => true\n// => true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("如果也要求匹配 7:9，也就是说时分前面的 0 可以省略。")]),s._v(" "),a("p",[s._v("此时正则变成：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$/;\nconsole.log( regex.test("23:59") );\nconsole.log( regex.test("02:07") );\nconsole.log( regex.test("7:9") );\n// => true\n// => true\n// => true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("匹配日期")])]),s._v(" "),a("p",[s._v("比如 yyyy-mm-dd 格式为例。")]),s._v(" "),a("p",[s._v("要求匹配：")]),s._v(" "),a("blockquote",[a("p",[s._v("2017-06-10")])]),s._v(" "),a("p",[s._v("分析：")]),s._v(" "),a("p",[s._v("年，四位数字即可，可用"),a("code",[s._v("[0-9]{4}")]),s._v("。")]),s._v(" "),a("p",[s._v("月，共 12 个月，分两种情况 01、02、……、09 和 10、11、12，可用"),a("code",[s._v("(0[1-9]|1[0-2])")]),s._v("。")]),s._v(" "),a("p",[s._v("日，最大 31 天，可用"),a("code",[s._v("(0[1-9]|[12][0-9]|3[01])")]),s._v("。")]),s._v(" "),a("p",[s._v("正则如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\nconsole.log( regex.test("2017-06-10") );\n// => true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("window 操作系统文件路径")])]),s._v(" "),a("p",[s._v("要求匹配：")]),s._v(" "),a("blockquote",[a("p",[s._v("F:\\study\\javascript\\regex\\regular expression.pdf\nF:\\study\\javascript\\regex"),a("br"),s._v("\nF:\\study\\javascript\nF:\\")])]),s._v(" "),a("p",[s._v("分析：")]),s._v(" "),a("p",[s._v("整体模式是: 盘符:\\文件夹\\文件夹\\文件夹\\")]),s._v(" "),a("p",[s._v("其中匹配 F:\\，需要使用"),a("code",[s._v("[a-zA-Z]:\\\\")]),s._v("，其中盘符不区分大小写，注意"),a("code",[s._v("\\")]),s._v("字符需要转义。")]),s._v(" "),a("p",[s._v("文件名或者文件夹名，不能包含一些特殊字符，此时我们需要排除字符组"),a("code",[s._v('[^\\\\:*<>|"?\\r\\n/]')]),s._v("来表示合法字符。另外不能为空名，至少有一个字符，也就是要使用量词"),a("code",[s._v("+")]),s._v("。因此匹配“文件夹\\”，可用"),a("code",[s._v('[^\\\\:*<>|"?\\r\\n/]+\\\\')]),s._v("。")]),s._v(" "),a("p",[s._v("另外“文件夹\\”，可以出现任意次。也就是"),a("code",[s._v('([^\\\\:*<>|"?\\r\\n/]+\\\\)*')]),s._v("。其中括号提供子表达式。")]),s._v(" "),a("p",[s._v("路径的最后一部分可以是“文件夹”，没有"),a("code",[s._v("\\")]),s._v("，因此需要添加"),a("code",[s._v('([^\\\\:_<>|"?\\r\\n/]+)?')]),s._v("。")]),s._v(" "),a("p",[s._v("最后拼接成了一个看起来比较复杂的正则：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /^[a-zA-Z]:\\\\([^\\\\:*<>|"?\\r\\n/]+\\\\)*([^\\\\:*<>|"?\\r\\n/]+)?$/;\nconsole.log( regex.test("F:\\\\study\\\\javascript\\\\regex\\\\regular expression.pdf") );\nconsole.log( regex.test("F:\\\\study\\\\javascript\\\\regex\\\\") );\nconsole.log( regex.test("F:\\\\study\\\\javascript") );\nconsole.log( regex.test("F:\\\\") );\n// => true\n// => true\n// => true\n// => true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("其中，JS 中字符串表示"),a("code",[s._v("\\")]),s._v("时，也要转义。")]),s._v(" "),a("p",[a("strong",[s._v("匹配 id")])]),s._v(" "),a("p",[s._v("要求从")]),s._v(" "),a("blockquote",[a("div",{staticClass:"main",attrs:{id:"container"}})]),s._v(" "),a("p",[s._v('提取出 id="container"。')]),s._v(" "),a("p",[s._v("可能最开始想到的正则是：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /id=".*"/\nvar string = \'<div id="container" class="main"></div>\';\nconsole.log(string.match(regex)[0]);\n// => id="container" class="main"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("因为"),a("code",[s._v(".")]),s._v("是通配符，本身就匹配双引号的，而量词"),a("code",[s._v("*")]),s._v("又是贪婪的，当遇到 container 后面双引号时，不会停下来，会继续匹配，直到遇到最后一个双引号为止。")]),s._v(" "),a("p",[s._v("解决之道，可以使用惰性匹配：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /id=".*?"/\nvar string = \'<div id="container" class="main"></div>\';\nconsole.log(string.match(regex)[0]);\n// => id="container"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("当然，这样也会有个问题。效率比较低，因为其匹配原理会涉及到“回溯”这个概念（这里也只是顺便提一下，第四章会详细说明）。可以优化如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /id="[^"]*"/\nvar string = \'<div id="container" class="main"></div>\';\nconsole.log(string.match(regex)[0]);\n// => id="container"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"二、正则表达式位置匹配攻略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、正则表达式位置匹配攻略","aria-hidden":"true"}},[s._v("#")]),s._v(" 二、正则表达式位置匹配攻略")]),s._v(" "),a("p",[s._v("正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。")]),s._v(" "),a("p",[s._v("然而大部分人学习正则时，对于匹配位置的重视程度没有那么高。")]),s._v(" "),a("p",[s._v("本章讲讲正则匹配位置的总总。")]),s._v(" "),a("p",[s._v("内容包括：")]),s._v(" "),a("ul",[a("li",[s._v("什么是位置？")]),s._v(" "),a("li",[s._v("如何匹配位置？")]),s._v(" "),a("li",[s._v("位置的特性")]),s._v(" "),a("li",[s._v("几个应用实例分析")])]),s._v(" "),a("h4",{attrs:{id:"_2-1-什么是位置？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是位置？","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.1 什么是位置？")]),s._v(" "),a("p",[s._v("位置是相邻字符之间的位置。比如，下图中箭头所指的地方：")]),s._v(" "),a("p",[a("img",{attrs:{src:"reg01.png",alt:"images"}})]),s._v(" "),a("h4",{attrs:{id:"_2-2-如何匹配位置？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-如何匹配位置？","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.2 如何匹配位置？")]),s._v(" "),a("p",[s._v("在 ES5 中，共有 6 个锚字符：")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("^")]),s._v(" "),a("code",[s._v("$")]),s._v(" "),a("code",[s._v("\\b")]),s._v(" "),a("code",[s._v("\\B")]),s._v(" "),a("code",[s._v("(?=p)")]),s._v(" "),a("code",[s._v("(?!p)")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var result = "hello".replace(/^|$/g, \'#\');\nconsole.log(result);\n// => "#hello#"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("^和$")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("^")]),s._v("(脱字符) 匹配开头，在多行匹配中行开头。")]),s._v(" "),a("li",[a("code",[s._v("$")]),s._v("(美元符号)匹配结尾，在多行匹配中匹配行结尾。")])]),s._v(" "),a("p",[s._v("比如我们把字符串的开头和结尾用“#”替换（位置可以替换成字符的！）：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var result = "hello".replace(/^|$/g, \'#\');\nconsole.log(result);\n// => "#hello#"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("多行匹配模式时，二者是行的概念，这个需要我们的注意：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var result = \"I\\nlove\\njavascript\".replace(/^|$/gm, '#');\nconsole.log(result);\n/*\n#I#\n#love#\n#javascript#\n*/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("\\b 和\\B")])]),s._v(" "),a("p",[a("code",[s._v("\\b")]),s._v(" 是单词边界，具体就是"),a("code",[s._v("\\w")]),s._v(" 和"),a("code",[s._v("\\W")]),s._v(" 之间的位置，也包括"),a("code",[s._v("\\w")]),s._v(" 和"),a("code",[s._v("^")]),s._v("之间的位置，也包括"),a("code",[s._v("\\w")]),s._v("和"),a("code",[s._v("\\$")]),s._v("之间的位置。")]),s._v(" "),a("p",[s._v('比如一个文件名是"[JS] Lesson_01.mp4"中的'),a("code",[s._v("\\b")]),s._v("，如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var result = "[JS] Lesson_01.mp4".replace(/\\b/g, \'#\');\nconsole.log(result);\n// => "[#JS#] #Lesson_01#.#mp4#"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("为什么是这样呢？这需要仔细看看。")]),s._v(" "),a("p",[s._v("首先，我们知道，"),a("code",[s._v("\\w")]),s._v(" 是字符组"),a("code",[s._v("[0-9a-zA-Z_]")]),s._v("的简写形式，即"),a("code",[s._v("\\w")]),s._v("是字母数字或者下划线的中任何一个字符。而"),a("code",[s._v("\\W")]),s._v(" 是排除字符组"),a("code",[s._v("[^0-9a-za-z_]")]),s._v("的简写形式，即"),a("code",[s._v("\\W")]),s._v(" 是"),a("code",[s._v("\\w")]),s._v(" 以外的任何一个字符。")]),s._v(" "),a("p",[s._v('此时我们可以看看"[#JS#] #Lesson_01#.#mp4#"中的每一个"#"，是怎么来的。')]),s._v(" "),a("ul",[a("li",[s._v("第一个“#”，两边是“[”与“J”，是"),a("code",[s._v("\\W")]),s._v("与"),a("code",[s._v("\\w")]),s._v("的位置。")]),s._v(" "),a("li",[s._v('第二个"#"，两边是"S"与"]"，也就是'),a("code",[s._v("\\w")]),s._v(" 和"),a("code",[s._v("\\W")]),s._v(" 之间的位置。")]),s._v(" "),a("li",[s._v('第三个"#"，两边是空格与"L"，也就是'),a("code",[s._v("\\W")]),s._v(" 和"),a("code",[s._v("\\w")]),s._v(" 之间的位置。")]),s._v(" "),a("li",[s._v('第四个"#"，两边是"1"与"."，也就是'),a("code",[s._v("\\w")]),s._v(" 和"),a("code",[s._v("\\W")]),s._v(" 之间的位置。")]),s._v(" "),a("li",[s._v('第五个"#"，两边是"."与"m"，也就是'),a("code",[s._v("\\W")]),s._v(" 和"),a("code",[s._v("\\w")]),s._v(" 之间的位置。")]),s._v(" "),a("li",[s._v('第六个"#"，其对应的位置是结尾，但其前面的字符"4"是'),a("code",[s._v("\\w")]),s._v("，即"),a("code",[s._v("\\w")]),s._v(" 和"),a("code",[s._v("\\$")]),s._v("之间的位置。")])]),s._v(" "),a("p",[s._v("知道了"),a("code",[s._v("\\b")]),s._v(" 的概念后，那么"),a("code",[s._v("\\B")]),s._v(" 也就相对好理解了。")]),s._v(" "),a("p",[a("code",[s._v("\\B")]),s._v(" 就是"),a("code",[s._v("\\b")]),s._v("的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉"),a("code",[s._v("\\b")]),s._v("，剩下的都是"),a("code",[s._v("\\B")]),s._v(" 的。")]),s._v(" "),a("p",[s._v("具体说来就是"),a("code",[s._v("\\w")]),s._v(" 与"),a("code",[s._v("\\w")]),s._v("、"),a("code",[s._v("\\W")]),s._v(" 与"),a("code",[s._v("\\W")]),s._v("、"),a("code",[s._v("^")]),s._v("与"),a("code",[s._v("\\W")]),s._v("，"),a("code",[s._v("\\W")]),s._v(" 与"),a("code",[s._v("\\$")]),s._v("之间的位置。")]),s._v(" "),a("p",[s._v("比如上面的例子，把所有"),a("code",[s._v("\\B")]),s._v(' 替换成"#"：')]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var result = "[JS] Lesson_01.mp4".replace(/\\B/g, \'#\');\nconsole.log(result);\n// => "#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("(?=p)和(?!p)")])]),s._v(" "),a("p",[a("code",[s._v("(?=p)")]),s._v("，其中"),a("code",[s._v("p")]),s._v("是一个子模式，即"),a("code",[s._v("p")]),s._v("前面的位置。")]),s._v(" "),a("p",[s._v("比如"),a("code",[s._v("(?=l)")]),s._v("，表示'l'字符前面的位置，例如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var result = "hello".replace(/(?=l)/g, \'#\');\nconsole.log(result);\n// => "he#l#lo"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("而"),a("code",[s._v("(?!p)")]),s._v("就是"),a("code",[s._v("(?=p)")]),s._v("的反面意思，比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var result = "hello".replace(/(?!l)/g, \'#\');\n\nconsole.log(result);\n// => "#h#ell#o#"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("二者的学名分别是 positive lookahead 和 negative lookahead。")]),s._v(" "),a("p",[s._v("中文翻译分别是正向先行断言和负向先行断言。")]),s._v(" "),a("p",[s._v("ES6 中，还支持 positive lookbehind 和 negative lookbehind。")]),s._v(" "),a("p",[s._v("具体是"),a("code",[s._v("(?<=p)")]),s._v("和"),a("code",[s._v("(?<!p)")]),s._v("。")]),s._v(" "),a("p",[s._v("也有书上把这四个东西，翻译成环视，即看看右边或看看左边。")]),s._v(" "),a("p",[s._v("但一般书上，没有很好强调这四者是个位置。")]),s._v(" "),a("p",[s._v("比如"),a("code",[s._v("(?=p)")]),s._v("，一般都理解成：要求接下来的字符与"),a("code",[s._v("p")]),s._v("匹配，但不能包括"),a("code",[s._v("p")]),s._v("的那些字符。")]),s._v(" "),a("p",[s._v("而在本人看来"),a("code",[s._v("(?=p)")]),s._v("就与"),a("code",[s._v("^")]),s._v("一样好理解，就是"),a("code",[s._v("p")]),s._v("前面的那个位置。")]),s._v(" "),a("h4",{attrs:{id:"_2-3-位置的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-位置的特性","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.3 位置的特性")]),s._v(" "),a("p",[s._v('对于位置的理解，我们可以理解成空字符""。')]),s._v(" "),a("p",[s._v('比如"hello"字符串等价于如下的形式：')]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('"hello" == "" + "h" + "" + "e" + "" + "l" + "" + "l" + "o" + "";\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("也等价于")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('"hello" == "" + "" + "hello"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("因此，把"),a("code",[s._v("/^hello$/")]),s._v("写成"),a("code",[s._v("/^^hello$$$/")]),s._v("，是没有任何问题的：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var result = /^^hello$$$/.test("hello");\nconsole.log(result);\n// => true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("甚至可以写成更复杂的:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var result = /(?=he)^^he(?=\\w)llo$\\b\\b$/.test("hello");\nconsole.log(result);\n// => true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("也就是说字符之间的位置，可以写成多个。")]),s._v(" "),a("p",[s._v("把位置理解空字符，是对位置非常有效的理解方式。")]),s._v(" "),a("h4",{attrs:{id:"_4-4-相关案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-相关案例","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.4 相关案例")]),s._v(" "),a("p",[a("strong",[s._v("不匹配任何东西的正则")])]),s._v(" "),a("p",[a("code",[s._v("/.^/")])]),s._v(" "),a("p",[s._v("此正则要求只有一个字符，但该字符后面是开头。")]),s._v(" "),a("p",[a("strong",[s._v("数字的千位分隔表示法")])]),s._v(" "),a("p",[s._v('比如把"12345678"，变成"12,345,678"。')]),s._v(" "),a("p",[s._v('可见是需要把相应的位置替换成","。')]),s._v(" "),a("p",[s._v("思路是什么呢？")]),s._v(" "),a("ol",[a("li",[s._v("弄出最后一个逗号")])]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("(?=\\d{3}$)")]),s._v("就可以做到：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var result = "12345678".replace(/(?=\\d{3}$)/g, \',\')\nconsole.log(result);\n// => "12345,678"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("弄出所有的逗号")])]),s._v(" "),a("p",[s._v("因为逗号出现的位置，要求后面 3 个数字一组，也就是"),a("code",[s._v("\\d{3}")]),s._v("至少出现一次。")]),s._v(" "),a("p",[s._v("此时可以使用量词"),a("code",[s._v("+")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var result = "12345678".replace(/(?=(\\d{3})+$)/g, \',\')\nconsole.log(result);\n// => "12,345,678"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("匹配其余案例")])]),s._v(" "),a("p",[s._v("写完正则后，要多验证几个案例，此时我们会发现问题：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var result = "123456789".replace(/(?=(\\d{3})+$)/g, \',\')\nconsole.log(result);\n// => ",123,456,789"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("因为上面的正则，仅仅表示把从结尾向前数，一但是 3 的倍数，就把其前面的位置替换成逗号。因此才会出现这个问题。")]),s._v(" "),a("p",[s._v("怎么解决呢？我们要求匹配的到这个位置不能是开头。")]),s._v(" "),a("p",[s._v("我们知道匹配开头可以使用"),a("code",[s._v("^")]),s._v("，但要求这个位置不是开头怎么办？")]),s._v(" "),a("p",[s._v("easy，"),a("code",[s._v("(?!^)")]),s._v("，你想到了吗？测试如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var string1 = "12345678",\nstring2 = "123456789";\nreg = /(?!^)(?=(\\d{3})+$)/g;\n\nvar result = string1.replace(reg, \',\')\nconsole.log(result);\n// => "12,345,678"\n\nresult = string2.replace(reg, \',\');\nconsole.log(result);\n// => "123,456,789"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[s._v("支持其他形式")])]),s._v(" "),a("p",[s._v('如果要把"12345678 123456789"替换成"12,345,678 123,456,789"。')]),s._v(" "),a("p",[s._v("此时我们需要修改正则，把里面的开头"),a("code",[s._v("^")]),s._v("和结尾"),a("code",[s._v("\\$")]),s._v("，替换成"),a("code",[s._v("\\b")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var string = "12345678 123456789",\nreg = /(?!\\b)(?=(\\d{3})+\\b)/g;\n\nvar result = string.replace(reg, \',\')\nconsole.log(result);\n// => "12,345,678 123,456,789"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("其中"),a("code",[s._v("(?!\\b)")]),s._v("怎么理解呢？")]),s._v(" "),a("p",[s._v("要求当前是一个位置，但不是"),a("code",[s._v("\\b")]),s._v("前面的位置，其实"),a("code",[s._v("(?!\\b)")]),s._v("说的就是"),a("code",[s._v("\\B")]),s._v("。")]),s._v(" "),a("p",[s._v("因此最终正则变成了："),a("code",[s._v("/\\B(?=(\\d{3})+\\b)/g")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("验证密码问题")])]),s._v(" "),a("p",[s._v("密码长度 6-12 位，由数字、小写字符和大写字母组成，但必须至少包括 2 种字符。")]),s._v(" "),a("p",[s._v("此题，如果写成多个正则来判断，比较容易。但要写成一个正则就比较困难。")]),s._v(" "),a("p",[s._v("那么，我们就来挑战一下。看看我们对位置的理解是否深刻。")]),s._v(" "),a("ol",[a("li",[s._v("简化")])]),s._v(" "),a("p",[s._v("不考虑“但必须至少包括 2 种字符”这一条件。我们可以容易写出：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var reg = /^[0-9A-Za-z]{6,12}$/;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("判断是否包含有某一种字符")])]),s._v(" "),a("p",[s._v("假设，要求的必须包含数字，怎么办？此时我们可以使用"),a("code",[s._v("(?=.\\*[0-9])")]),s._v("来做。")]),s._v(" "),a("p",[s._v("因此正则变成：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var reg = /(?=.*[0-9])^[0-9A-Za-z]{6,12}$/;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("同时包含具体两种字符")])]),s._v(" "),a("p",[s._v("比如同时包含数字和小写字母，可以用"),a("code",[s._v("(?=._[0-9])(?=._[a-z])")]),s._v("来做。")]),s._v(" "),a("p",[s._v("因此正则变成：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var reg = /(?=.*[0-9])(?=.*[a-z])^[0-9A-Za-z]{6,12}$/;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[s._v("解答")])]),s._v(" "),a("p",[s._v("我们可以把原题变成下列几种情况之一：")]),s._v(" "),a("ol",[a("li",[s._v("同时包含数字和小写字母")]),s._v(" "),a("li",[s._v("同时包含数字和大写字母")]),s._v(" "),a("li",[s._v("同时包含小写字母和大写字母")]),s._v(" "),a("li",[s._v("同时包含数字、小写字母和大写字母")])]),s._v(" "),a("p",[s._v("以上的 4 种情况是或的关系（实际上，可以不用第 4 条）。")]),s._v(" "),a("p",[s._v("最终答案是：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var reg = /((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[A-Z]))^[0-9A-Za-z]{6,12}$/;\nconsole.log( reg.test("1234567") ); // false 全是数字\nconsole.log( reg.test("abcdef") ); // false 全是小写字母\nconsole.log( reg.test("ABCDEFGH") ); // false 全是大写字母\nconsole.log( reg.test("ab23C") ); // false 不足6位\nconsole.log( reg.test("ABCDEF234") ); // true 大写字母和数字\nconsole.log( reg.test("abcdEF234") ); // true 三者都有\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ol",{attrs:{start:"5"}},[a("li",[s._v("解惑")])]),s._v(" "),a("p",[s._v("上面的正则看起来比较复杂，只要理解了第二步，其余就全部理解了。")]),s._v(" "),a("p",[a("code",[s._v("/(?=._[0-9])^[0-9A-Za-z]{6,12}\\$/")])]),s._v(" "),a("p",[s._v("对于这个正则，我们只需要弄明白"),a("code",[s._v("(?=._[0-9])^")]),s._v("即可。")]),s._v(" "),a("p",[s._v("分开来看就是"),a("code",[s._v("(?=.\\_[0-9])")]),s._v("和"),a("code",[s._v("^")]),s._v("。")]),s._v(" "),a("p",[s._v("表示开头前面还有个位置（当然也是开头，即同一个位置，想想之前的空字符类比）。")]),s._v(" "),a("p",[a("code",[s._v("(?=.\\_[0-9])")]),s._v("表示该位置后面的字符匹配"),a("code",[s._v(".\\*[0-9]")]),s._v("，即，有任何多个任意字符，后面再跟个数字。")]),s._v(" "),a("p",[s._v("翻译成大白话，就是接下来的字符，必须包含个数字。")]),s._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[s._v("另外一种解法")])]),s._v(" "),a("p",[s._v("“至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写字母。")]),s._v(" "),a("p",[s._v("那么要求“不能全部都是数字”，怎么做呢"),a("code",[s._v("？(?!p)")]),s._v("出马！")]),s._v(" "),a("p",[s._v("对应的正则是：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var reg = /(?!^[0-9]{6,12}$)^[0-9A-Za-z]{6,12}$/;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("三种“都不能”呢？")]),s._v(" "),a("p",[s._v("最终答案是：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var reg = /(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9A-Za-z]{6,12}$/;\nconsole.log( reg.test("1234567") ); // false 全是数字\nconsole.log( reg.test("abcdef") ); // false 全是小写字母\nconsole.log( reg.test("ABCDEFGH") ); // false 全是大写字母\nconsole.log( reg.test("ab23C") ); // false 不足6位\nconsole.log( reg.test("ABCDEF234") ); // true 大写字母和数字\nconsole.log( reg.test("abcdEF234") ); // true 三者都有\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"三、正则表达式括号的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、正则表达式括号的作用","aria-hidden":"true"}},[s._v("#")]),s._v(" 三、正则表达式括号的作用")]),s._v(" "),a("p",[s._v("不管哪门语言中都有括号。正则表达式也是一门语言，而括号的存在使这门语言更为强大。")]),s._v(" "),a("p",[s._v("对括号的使用是否得心应手，是衡量对正则的掌握水平的一个侧面标准。")]),s._v(" "),a("p",[s._v("括号的作用，其实三言两语就能说明白，括号提供了分组，便于我们引用它。")]),s._v(" "),a("p",[s._v("引用某个分组，会有两种情形：在 JavaScript 里引用它，在正则表达式里引用它。")]),s._v(" "),a("p",[s._v("本章内容虽相对简单，但我也要写长点。")]),s._v(" "),a("p",[s._v("内容包括：")]),s._v(" "),a("ul",[a("li",[s._v("分组和分支结构")]),s._v(" "),a("li",[s._v("捕获分组")]),s._v(" "),a("li",[s._v("反向引用")]),s._v(" "),a("li",[s._v("非捕获分组")]),s._v(" "),a("li",[s._v("相关案例")])]),s._v(" "),a("h4",{attrs:{id:"_3-1-分组和分支结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-分组和分支结构","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.1 分组和分支结构")]),s._v(" "),a("p",[s._v("这二者是括号最直觉的作用，也是最原始的功能。")]),s._v(" "),a("p",[a("strong",[s._v("分组")])]),s._v(" "),a("p",[s._v("我们知道"),a("code",[s._v("/a+/")]),s._v('匹配连续出现的"a"，而要匹配连续出现的"ab"时，需要使用'),a("code",[s._v("/(ab)+/")]),s._v("。")]),s._v(" "),a("p",[s._v("其中括号是提供分组功能，使量词"),a("code",[s._v("+")]),s._v('作用于"ab"这个整体，测试如下：')]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /(ab)+/g;\nvar string = "ababa abbb ababab";\nconsole.log( string.match(regex) ); \n// => ["abab", "ab", "ababab"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("分支结构")])]),s._v(" "),a("p",[s._v("而在多选分支结构"),a("code",[s._v("(p1|p2)")]),s._v("中，此处括号的作用也是不言而喻的，提供了子表达式的所有可能。")]),s._v(" "),a("p",[s._v("比如，要匹配如下的字符串：")]),s._v(" "),a("blockquote",[a("p",[s._v("I love JavaScript\nI love Regular Expression")])]),s._v(" "),a("p",[s._v("可以使用正则：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /^I love (JavaScript|Regular Expression)$/;\nconsole.log( regex.test("I love JavaScript") );\nconsole.log( regex.test("I love Regular Expression") );\n// => true\n// => true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("如果去掉正则中的括号，即"),a("code",[s._v("/^I love JavaScript|Regular Expression$/")]),s._v('，匹配字符串是"I love JavaScript"和"Regular Expression"，当然这不是我们想要的。')]),s._v(" "),a("h4",{attrs:{id:"_3-2-引用分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-引用分组","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.2 引用分组")]),s._v(" "),a("p",[s._v("这是括号一个重要的作用，有了它，我们就可以进行数据提取，以及更强大的替换操作。")]),s._v(" "),a("p",[s._v("而要使用它带来的好处，必须配合使用实现环境的API。")]),s._v(" "),a("p",[s._v("以日期为例。假设格式是yyyy-mm-dd的，我们可以先写一个简单的正则：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var regex = /\\d{4}-\\d{2}-\\d{2}/;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后再修改成括号版的：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("为什么要使用这个正则呢？")]),s._v(" "),a("p",[a("strong",[s._v("提取数据")])]),s._v(" "),a("p",[s._v("比如提取出年、月、日，可以这么做：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nvar string = "2017-06-12";\nconsole.log( string.match(regex) );\n// => ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("match")]),s._v("返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的内容，然后是匹配下标，最后是输入的文本。（注意：如果正则是否有修饰符"),a("code",[s._v("g")]),s._v("，"),a("code",[s._v("match")]),s._v("返回的数组格式是不一样的）。")]),s._v(" "),a("p",[s._v("另外也可以使用正则对象的"),a("code",[s._v("exec")]),s._v("方法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nvar string = "2017-06-12";\nconsole.log( regex.exec(string) );\n// => ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("同时，也可以使用构造函数的全局属性"),a("code",[s._v("$1")]),s._v("至"),a("code",[s._v("$9")]),s._v("来获取：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nvar string = "2017-06-12";\n\nregex.test(string); // 正则操作即可，例如\n//regex.exec(string);\n//string.match(regex);\n\nconsole.log(RegExp.$1); // "2017"\nconsole.log(RegExp.$2); // "06"\nconsole.log(RegExp.$3); // "12"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("strong",[s._v("替换")])]),s._v(" "),a("p",[s._v("比如，想把yyyy-mm-dd格式，替换成mm/dd/yyyy怎么做？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nvar string = "2017-06-12";\nvar result = string.replace(regex, "$2/$3/$1");\nconsole.log(result);\n// => "06/12/2017"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("其中"),a("code",[s._v("replace")]),s._v("中的，第二个参数里用"),a("code",[s._v("$1")]),s._v("、"),a("code",[s._v("$2")]),s._v("、"),a("code",[s._v("$3")]),s._v("指代相应的分组。等价于如下的形式：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nvar string = "2017-06-12";\nvar result = string.replace(regex, function() {\n\treturn RegExp.$2 + "/" + RegExp.$3 + "/" + RegExp.$1;\n});\nconsole.log(result);\n// => "06/12/2017"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("也等价于：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nvar string = "2017-06-12";\nvar result = string.replace(regex, function(match, year, month, day) {\n\treturn month + "/" + day + "/" + year;\n});\nconsole.log(result);\n// => "06/12/2017"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h4",{attrs:{id:"_3-3-反向引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-反向引用","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.3 反向引用")]),s._v(" "),a("p",[s._v("除了使用相应API来引用分组，也可以在正则本身里引用分组。但只能引用之前出现的分组，即反向引用。")]),s._v(" "),a("p",[s._v("还是以日期为例。")]),s._v(" "),a("p",[s._v("比如要写一个正则支持匹配如下三种格式：")]),s._v(" "),a("blockquote",[a("p",[s._v("2016-06-12")]),s._v(" "),a("p",[s._v("2016/06/12")]),s._v(" "),a("p",[s._v("2016.06.12")])]),s._v(" "),a("p",[s._v("最先可能想到的正则是:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /\\d{4}(-|\\/|\\.)\\d{2}(-|\\/|\\.)\\d{2}/;\nvar string1 = "2017-06-12";\nvar string2 = "2017/06/12";\nvar string3 = "2017.06.12";\nvar string4 = "2016-06/12";\nconsole.log( regex.test(string1) ); // true\nconsole.log( regex.test(string2) ); // true\nconsole.log( regex.test(string3) ); // true\nconsole.log( regex.test(string4) ); // true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("其中"),a("code",[s._v("/")]),s._v("和"),a("code",[s._v(".")]),s._v('需要转义。虽然匹配了要求的情况，但也匹配"2016-06/12"这样的数据。')]),s._v(" "),a("p",[s._v("假设我们想要求分割符前后一致怎么办？此时需要使用反向引用：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /\\d{4}(-|\\/|\\.)\\d{2}\\1\\d{2}/;\nvar string1 = "2017-06-12";\nvar string2 = "2017/06/12";\nvar string3 = "2017.06.12";\nvar string4 = "2016-06/12";\nconsole.log( regex.test(string1) ); // true\nconsole.log( regex.test(string2) ); // true\nconsole.log( regex.test(string3) ); // true\nconsole.log( regex.test(string4) ); // false\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("注意里面的"),a("code",[s._v("\\1")]),s._v("，表示的引用之前的那个分组"),a("code",[s._v("(-|\\/|\\.)")]),s._v("。不管它匹配到什么（比如-），"),a("code",[s._v("\\1")]),s._v("都匹配那个同样的具体某个字符。")]),s._v(" "),a("p",[s._v("我们知道了"),a("code",[s._v("\\1")]),s._v("的含义后，那么"),a("code",[s._v("\\2")]),s._v("和"),a("code",[s._v("\\3")]),s._v("的概念也就理解了，即分别指代第二个和第三个分组。")]),s._v(" "),a("p",[s._v("看到这里，此时，恐怕你会有三个问题。")]),s._v(" "),a("p",[a("strong",[s._v("括号嵌套怎么办？")])]),s._v(" "),a("p",[s._v("以左括号（开括号）为准。比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /^((\\d)(\\d(\\d)))\\1\\2\\3\\4$/;\nvar string = "1231231233";\nconsole.log( regex.test(string) ); // true\nconsole.log( RegExp.$1 ); // 123\nconsole.log( RegExp.$2 ); // 1\nconsole.log( RegExp.$3 ); // 23\nconsole.log( RegExp.$4 ); // 3\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("我们可以看看这个正则匹配模式：")]),s._v(" "),a("ul",[a("li",[s._v("第一个字符是数字，比如说1，")]),s._v(" "),a("li",[s._v("第二个字符是数字，比如说2，")]),s._v(" "),a("li",[s._v("第三个字符是数字，比如说3，")]),s._v(" "),a("li",[s._v("接下来的是"),a("code",[s._v("\\1")]),s._v("，是第一个分组内容，那么看第一个开括号对应的分组是什么，是123，")]),s._v(" "),a("li",[s._v("接下来的是"),a("code",[s._v("\\2")]),s._v("，找到第2个开括号，对应的分组，匹配的内容是1，")]),s._v(" "),a("li",[s._v("接下来的是"),a("code",[s._v("\\3")]),s._v("，找到第3个开括号，对应的分组，匹配的内容是23，")]),s._v(" "),a("li",[s._v("最后的是"),a("code",[s._v("\\4")]),s._v("，找到第3个开括号，对应的分组，匹配的内容是3。")])]),s._v(" "),a("p",[s._v("这个问题，估计仔细看一下，就该明白了。")]),s._v(" "),a("p",[a("strong",[s._v("\\10表示什么呢？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /(1)(2)(3)(4)(5)(6)(7)(8)(9)(#) \\10+/;\nvar string = "123456789# ######"\nconsole.log( regex.test(string) );\n// => true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("引用不存在的分组会怎样？")])]),s._v(" "),a("p",[s._v('因为反向引用，是引用前面的分组，但我们在正则里引用了不存在的分组时，此时正则不会报错，只是匹配反向引用的字符本身。例如\\2，就匹配"\\2"。注意"\\2"表示对"2"进行了转意。')]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /\\1\\2\\3\\4\\5\\6\\7\\8\\9/;\nconsole.log( regex.test("\\1\\2\\3\\4\\5\\6\\7\\8\\9") );\nconsole.log( "\\1\\2\\3\\4\\5\\6\\7\\8\\9".split("") );\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("chrome浏览器打印的结果：")]),s._v(" "),a("p",[a("img",{attrs:{src:"reg02.png",alt:"images"}})]),s._v(" "),a("h4",{attrs:{id:"_3-4-非捕获分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-非捕获分组","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.4 非捕获分组")]),s._v(" "),a("p",[s._v("之前文中出现的分组，都会捕获它们匹配到的数据，以便后续引用，因此也称他们是捕获型分组。")]),s._v(" "),a("p",[s._v("如果只想要括号最原始的功能，但不会引用它，即，既不在API里引用，也不在正则里反向引用。此时可以使用非捕获分组(?:p)，例如本文第一个例子可以修改为：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /(?:ab)+/g;\nvar string = "ababa abbb ababab";\nconsole.log( string.match(regex) );\n// => ["abab", "ab", "ababab"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"_3-5-相关案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-相关案例","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.5 相关案例")]),s._v(" "),a("ul",[a("li",[s._v("字符串trim方法模拟")]),s._v(" "),a("li",[s._v("将每个单词的首字母转换为大写")]),s._v(" "),a("li",[s._v("驼峰化")]),s._v(" "),a("li",[s._v("中划线化")]),s._v(" "),a("li",[s._v("html转义和反转义")]),s._v(" "),a("li",[s._v("匹配成对标签")])]),s._v(" "),a("p",[a("strong",[s._v("字符串trim方法模拟")])]),s._v(" "),a("p",[a("code",[s._v("trim")]),s._v("方法是去掉字符串的开头和结尾的空白符。有两种思路去做。")]),s._v(" "),a("p",[s._v("第一种，匹配到开头和结尾的空白符，然后替换成空字符。如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function trim(str) {\n\treturn str.replace(/^\\s+|\\s+$/g, \'\');\n}\nconsole.log( trim("  foobar   ") );\n// => "foobar"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("第二种，匹配整个字符串，然后用引用来提取出相应的数据：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function trim(str) {\n\treturn str.replace(/^\\s*(.*?)\\s*$/g, "$1");\n}\nconsole.log( trim("  foobar   ") );\n// => "foobar"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这里使用了惰性匹配"),a("code",[s._v("*?")]),s._v("，不然也会匹配最后一个空格之前的所有空格的。")]),s._v(" "),a("p",[s._v("当然，前者效率高。")]),s._v(" "),a("p",[a("strong",[s._v("将每个单词的首字母转换为大写")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function titleize(str) {\n\treturn str.toLowerCase().replace(/(?:^|\\s)\\w/g, function(c) {\n\t\treturn c.toUpperCase();\n\t});\n}\nconsole.log( titleize('my name is epeli') );\n// => \"My Name Is Epeli\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("思路是找到每个单词的首字母，当然这里不使用非捕获匹配也是可以的。")]),s._v(" "),a("p",[a("strong",[s._v("驼峰化")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function camelize(str) {\n\treturn str.replace(/[-_\\s]+(.)?/g, function(match, c) {\n\t\treturn c ? c.toUpperCase() : '';\n\t});\n}\nconsole.log( camelize('-moz-transform') );\n// => \"MozTransform\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("其中分组"),a("code",[s._v("(.)")]),s._v("表示首字母。单词的界定是，前面的字符可以是多个连字符、下划线以及空白符。正则后面的?的目的，是为了应对"),a("code",[s._v("str")]),s._v("尾部的字符可能不是单词字符，比如"),a("code",[s._v("str")]),s._v("是'-moz-transform    '。")]),s._v(" "),a("p",[a("strong",[s._v("中划线化")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function dasherize(str) {\n\treturn str.replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase();\n}\nconsole.log( dasherize('MozTransform') ); \n// => \"-moz-transform\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("驼峰化的逆过程。")]),s._v(" "),a("p",[a("strong",[s._v("html转义和反转义")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 将HTML特殊字符转换成等值的实体\nfunction escapeHTML(str) {\n\tvar escapeChars = {\n\t  '¢' : 'cent',\n\t  '£' : 'pound',\n\t  '¥' : 'yen',\n\t  '€': 'euro',\n\t  '©' :'copy',\n\t  '®' : 'reg',\n\t  '<' : 'lt',\n\t  '>' : 'gt',\n\t  '\"' : 'quot',\n\t  '&' : 'amp',\n\t  '\\'' : '#39'\n\t};\n\treturn str.replace(new RegExp('[' + Object.keys(escapeChars).join('') +']', 'g'), function(match) {\n\t\treturn '&' + escapeChars[match] + ';';\n\t});\n}\nconsole.log( escapeHTML('<div>Blah blah blah</div>') );\n// => \"&lt;div&gt;Blah blah blah&lt;/div&gt\";\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("其中使用了用构造函数生成的正则，然后替换相应的格式就行了，这个跟本章没多大关系。")]),s._v(" "),a("p",[s._v("倒是它的逆过程，使用了括号，以便提供引用，也很简单，如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 实体字符转换为等值的HTML。\nfunction unescapeHTML(str) {\n\tvar htmlEntities = {\n\t  nbsp: ' ',\n\t  cent: '¢',\n\t  pound: '£',\n\t  yen: '¥',\n\t  euro: '€',\n\t  copy: '©',\n\t  reg: '®',\n\t  lt: '<',\n\t  gt: '>',\n\t  quot: '\"',\n\t  amp: '&',\n\t  apos: '\\''\n\t};\n\treturn str.replace(/\\&([^;]+);/g, function(match, key) {\n\t\tif (key in htmlEntities) {\n\t\t\treturn htmlEntities[key];\n\t\t}\n\t\treturn match;\n\t});\n}\nconsole.log( unescapeHTML('&lt;div&gt;Blah blah blah&lt;/div&gt;') );\n// => \"<div>Blah blah blah</div>\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("通过"),a("code",[s._v("key")]),s._v("获取相应的分组引用，然后作为对象的键。")]),s._v(" "),a("p",[a("strong",[s._v("匹配成对标签")])]),s._v(" "),a("blockquote",[a("title",[s._v("regular expression")]),s._v(" "),a("p",[s._v("laoyao bye bye")])]),s._v(" "),a("p",[s._v("不匹配：")]),s._v(" "),a("blockquote",[a("title",[s._v("wrong!"),a("p")])]),s._v(" "),a("p",[s._v("匹配一个开标签，可以使用正则"),a("code",[s._v("<[^>]+>")]),s._v("，")]),s._v(" "),a("p",[s._v("匹配一个闭标签，可以使用"),a("code",[s._v("<\\/[^>]+>")]),s._v("，")]),s._v(" "),a("p",[s._v("但是要求匹配成对标签，那就需要使用反向引用，如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var regex = /<([^>]+)>[\\d\\D]*<\\/\\1>/;\nvar string1 = "<title>regular expression</title>";\nvar string2 = "<p>laoyao bye bye</p>";\nvar string3 = "<title>wrong!</p>";\nconsole.log( regex.test(string1) ); // true\nconsole.log( regex.test(string2) ); // true\nconsole.log( regex.test(string3) ); // false\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("其中开标签"),a("code",[s._v("<[^>]+>")]),s._v("改成"),a("code",[s._v("<([^>]+)>")]),s._v("，使用括号的目的是为了后面使用反向引用，而提供分组。闭标签使用了反向引用，"),a("code",[s._v("<\\/\\1>")]),s._v("。")]),s._v(" "),a("p",[s._v("另外"),a("code",[s._v("[\\d\\D]")]),s._v("的意思是，这个字符是数字或者不是数字，因此，也就是匹配任意字符的意思。")]),s._v(" "),a("h3",{attrs:{id:"四、正则表达式回溯法原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、正则表达式回溯法原理","aria-hidden":"true"}},[s._v("#")]),s._v(" 四、正则表达式回溯法原理")]),s._v(" "),a("p",[s._v("学习正则表达式，是需要懂点儿匹配原理的。")]),s._v(" "),a("p",[s._v("而研究匹配原理时，有两个字出现的频率比较高：“回溯”。")]),s._v(" "),a("p",[s._v("听起来挺高大上，确实还有很多人对此不明不白的。")]),s._v(" "),a("p",[s._v("因此，本章就简单扼要地说清楚回溯到底是什么东西。")]),s._v(" "),a("p",[s._v("内容包括：")]),s._v(" "),a("ul",[a("li",[s._v("没有回溯的匹配")]),s._v(" "),a("li",[s._v("有回溯的匹配")]),s._v(" "),a("li",[s._v("常见的回溯形式")])]),s._v(" "),a("h4",{attrs:{id:"_4-1-没有回溯的匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-没有回溯的匹配","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.1 没有回溯的匹配")]),s._v(" "),a("p",[s._v("假设我们的正则是"),a("code",[s._v("/ab{1,3}c/")]),s._v("，其可视化形式是：")]),s._v(" "),a("p",[a("img",{attrs:{src:"reg03.png",alt:"images"}})]),s._v(" "),a("p",[s._v('而当目标字符串是"abbbc"时，就没有所谓的“回溯”。其匹配过程是：')]),s._v(" "),a("h4",{attrs:{id:"_4-2-有回溯的匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-有回溯的匹配","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.2 有回溯的匹配")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code")]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"})]),a("h4",{attrs:{id:"_4-3-常见的回溯形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-常见的回溯形式","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.3 常见的回溯形式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code")]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"})]),a("h3",{attrs:{id:"五、正则表达式的拆分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、正则表达式的拆分","aria-hidden":"true"}},[s._v("#")]),s._v(" 五、正则表达式的拆分")]),s._v(" "),a("p",[s._v("对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。")]),s._v(" "),a("p",[s._v("不仅要求自己能解决问题，还要看懂别人的解决方案。代码是这样，正则表达式也是这样。")]),s._v(" "),a("p",[s._v("正则这门语言跟其他语言有一点不同，它通常就是一大堆字符，而没有所谓“语句”的概念。")]),s._v(" "),a("p",[s._v("如何能正确地把一大串正则拆分成一块一块的，成为了破解“天书”的关键。")]),s._v(" "),a("p",[s._v("本章就解决这一问题，内容包括：")]),s._v(" "),a("ol",[a("li",[s._v("结构和操作符")]),s._v(" "),a("li",[s._v("注意要点")]),s._v(" "),a("li",[s._v("案例分析")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"六、正则表达式的构建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、正则表达式的构建","aria-hidden":"true"}},[s._v("#")]),s._v(" 六、正则表达式的构建")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"七、正则表达式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、正则表达式编程","aria-hidden":"true"}},[s._v("#")]),s._v(" 七、正则表达式编程")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/5965943ff265da6c30653879",target:"_blank",rel:"noopener noreferrer"}},[s._v("JS 正则表达式完整教程（略长）"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://deerchao.net/tutorials/regex/regex.htm",target:"_blank",rel:"noopener noreferrer"}},[s._v("正则表达式 30 分钟入门教程"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"联系作者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[s._v("#")]),s._v(" 联系作者")]),s._v(" "),a("div",{attrs:{align:"center"}},[a("p",[s._v("\n        平凡世界，贵在坚持。\n    ")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);e.default=t.exports}}]);