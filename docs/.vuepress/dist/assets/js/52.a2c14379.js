(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{272:function(t,r,a){"use strict";a.r(r);var v=a(13),_=Object(v.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"平衡树-avl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平衡树-avl"}},[t._v("#")]),t._v(" 平衡树(AVL)")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),t._v(" "),a("h2",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91"}},[t._v("为什么要有平衡二叉树")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8C%E3%80%81%E5%AE%9A%E4%B9%89"}},[t._v("定义")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E5%B9%B3%E8%A1%A1%E5%9B%A0%E5%AD%90"}},[t._v("平衡因子")])])]),t._v(" "),a("h3",{attrs:{id:"一、为什么要有平衡二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、为什么要有平衡二叉树"}},[t._v("#")]),t._v(" 一、为什么要有平衡二叉树")]),t._v(" "),a("p",[t._v("二叉搜索树一定程度上可以提高搜索效率，但是当原序列有序时，例如序列"),a("code",[t._v("A={1,2,3,4,5,6}")]),t._v(",构造二叉搜索树如图。依据此序列构造的二叉搜索树为右斜树，同时二叉树退化成单链表，搜索效率降低为 O(n)。")]),t._v(" "),a("p",[a("img",{attrs:{src:"tree12.jpg",alt:"images"}})]),t._v(" "),a("p",[t._v("在此二叉搜索树中查找元素 6 需要查找 6 次。")]),t._v(" "),a("p",[t._v("二叉搜索树的查找效率取决于树的高度，因此保持树的高度最小，即可保证树的查找效率。同样的序列 A，将其改为下图的方式存储，查找元素 6 时只需比较 3 次，查找效率提升一倍。")]),t._v(" "),a("p",[a("img",{attrs:{src:"tree13.jpg",alt:"images"}})]),t._v(" "),a("p",[t._v("可以看出当节点数目一定，保持树的左右两端保持平衡，树的查找效率最高。")]),t._v(" "),a("p",[a("strong",[t._v("这种左右子树的高度相差不超过 1 的树为平衡二叉树。")])]),t._v(" "),a("h3",{attrs:{id:"二、定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、定义"}},[t._v("#")]),t._v(" 二、定义")]),t._v(" "),a("p",[a("strong",[t._v("平衡二叉查找树：")]),t._v(" 是基于二分法的策略提高数据的查找速度的二叉树的数据结构。由前苏联的数学家 Adelse-Velskil 和 Landis 在 1962 年提出的高度平衡的二叉树，根据科学家的英文名也称为 AVL 树。它具有如下几个性质：")]),t._v(" "),a("ul",[a("li",[t._v("可以是空树。")]),t._v(" "),a("li",[t._v("假如不是空树，任何一个节点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1。")])]),t._v(" "),a("h3",{attrs:{id:"三、平衡因子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、平衡因子"}},[t._v("#")]),t._v(" 三、平衡因子")]),t._v(" "),a("p",[t._v("定义：某节点的左子树与右子树的高度(深度)差即为该节点的平衡因子，平衡二叉树中不存在平衡因子大于 1 的节点。在一棵平衡二叉树中，节点的平衡因子只能取 0、1 或者-1，分别对应着左右子树等高，左子树比较高，右子树比较高。")]),t._v(" "),a("h3",{attrs:{id:"四、avl-树插入时的失衡与调整"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、avl-树插入时的失衡与调整"}},[t._v("#")]),t._v(" 四、AVL 树插入时的失衡与调整")]),t._v(" "),a("p",[t._v("在对 AVL 树添加或移除节点后，我们要计算节点的高度并验证树是否需要进行平衡。向 AVL 树插入节点时，可以执行单旋转或双旋转两种平衡操作，分别对应四种场景。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("左-左（LL）：")]),t._v(" 向右的单旋转")]),t._v(" "),a("li",[a("strong",[t._v("右-右（RR）：")]),t._v(" 向左的单旋转")]),t._v(" "),a("li",[a("strong",[t._v("左-右（LR）：")]),t._v(" 向右的双旋转（先 LL 旋转，再 RR 旋转）")]),t._v(" "),a("li",[a("strong",[t._v("右-左（RL）：")]),t._v(" 向左的双旋转（先 RR 旋转，再 LL 旋转）")])]),t._v(" "),a("h4",{attrs:{id:"_4-1-左-左：向右的单旋转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-左-左：向右的单旋转"}},[t._v("#")]),t._v(" 4.1 左-左：向右的单旋转")]),t._v(" "),a("p",[t._v("这种情况出现于节点的左侧子节点的高度大于右侧子节点的高度时，并且左侧子节点也是平衡或左侧较重的。")]),t._v(" "),a("p",[t._v("执行的操作过程：")]),t._v(" "),a("ul",[a("li",[t._v("与平衡操作想着的节点有三个（X、Y、Z），将节点 X 置于节点 Y（平衡因子为+2）所在的位置")])]),t._v(" "),a("p",[t._v("相关代码：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("rotationLL(node){\n    const tmp = node.left;\n    node.left = tmp.right\n    tmp.right = node;\n    return tmp;\n}\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h4",{attrs:{id:"_4-2-右-右（rr）-向左的单旋转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-右-右（rr）-向左的单旋转"}},[t._v("#")]),t._v(" 4.2 右-右（RR）:向左的单旋转")]),t._v(" "),a("p",[t._v("右-右的情况和左左的情况相反。它出现于右侧子节点的高度大于左侧子节点的高度，并且右侧子节点也是平衡或右侧较重的。")]),t._v(" "),a("p",[t._v("操作步骤：")]),t._v(" "),a("ul",[a("li",[t._v("与平衡操作相关的节点有三个（X、Y、Z），将节点 X 置于节点 Y（平衡因子为-2）所在的位置；")]),t._v(" "),a("li",[t._v("节点 X 的右子树操持不变；")]),t._v(" "),a("li",[t._v("将节点 Y 的右子节点置为节点 X 的左节点 Z；")]),t._v(" "),a("li",[t._v("将节点 X 的左子节点置为节点 Y；")])]),t._v(" "),a("p",[t._v("相关代码：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("rotationRR(node){\n    const tmp = node.right;\n    node.right = tmp.left;\n    tmp.left = node;\n    return tmp;\n}\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h3",{attrs:{id:"五、avl-树的四种插入节点方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、avl-树的四种插入节点方式"}},[t._v("#")]),t._v(" 五、AVL 树的四种插入节点方式")]),t._v(" "),a("p",[t._v("假设一颗 AVL 树的某个节点为 A，有四种操作会使 A 的左右子树高度差大于 1，从而破坏了原有 AVL 树的平衡性。平衡二叉树插入节点的情况分为以下四种：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("插入方式")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("旋转方式")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("LL")]),t._v(" "),a("td",[t._v("在 A 的"),a("strong",[t._v("左子树")]),t._v("根节点的"),a("strong",[t._v("左子树")]),t._v("上插入节点而破坏平衡")]),t._v(" "),a("td",[t._v("右旋转")])]),t._v(" "),a("tr",[a("td",[t._v("RR")]),t._v(" "),a("td",[t._v("在 A 的"),a("strong",[t._v("右子树")]),t._v("根节点的"),a("strong",[t._v("右子树")]),t._v("上插入节点而破坏平衡")]),t._v(" "),a("td",[t._v("左旋转")])]),t._v(" "),a("tr",[a("td",[t._v("LR")]),t._v(" "),a("td",[t._v("在 A 的"),a("strong",[t._v("左子树")]),t._v("根节点的"),a("strong",[t._v("右子树")]),t._v("上插入节点而破坏平衡")]),t._v(" "),a("td",[t._v("先左旋后右旋转")])]),t._v(" "),a("tr",[a("td",[t._v("RL")]),t._v(" "),a("td",[t._v("在 A 的"),a("strong",[t._v("右子树")]),t._v("根节点的"),a("strong",[t._v("左子树")]),t._v("上插入节点而破坏平衡")]),t._v(" "),a("td",[t._v("先右旋后左旋转")])])])]),t._v(" "),a("h3",{attrs:{id:"六、红黑树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、红黑树"}},[t._v("#")]),t._v(" 六、红黑树")]),t._v(" "),a("p",[t._v("红黑树是一种常见的自平衡二叉查找树，常用于关联数组、字典，在各种语言的底层实现中被广泛应用，Java 的 TreeMap 和 TreeSet 就是基于红黑树实现的。")]),t._v(" "),a("p",[t._v("在红黑树中，每个节点都遵循以下规则：")]),t._v(" "),a("ul",[a("li",[t._v("顾名思义，每个节点不是红的就是黑的；")]),t._v(" "),a("li",[t._v("树的根节点是黑的；")]),t._v(" "),a("li",[t._v("所有叶节点都是黑的（用 NULL 引用表示的节点）；")]),t._v(" "),a("li",[t._v("如果一个节点是红色的，那么它的两个子节点都是黑的；")]),t._v(" "),a("li",[t._v("不能有两个相邻的红节点，一个红节点不能有红的父节点或子节点；")]),t._v(" "),a("li",[t._v("从给定的节点到它的后代节点的所有路径包含相同数量的黑色节点")])]),t._v(" "),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[t._v("《学习 JavaScript 数据结构与算法》")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/zav3hOoj6eszlOM7YfgYeA",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是平衡二叉树（AVL）"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/Un1LuUo4LDQC8Sl-mfg4og",target:"_blank",rel:"noopener noreferrer"}},[t._v("我画了 20 张图，给女朋友讲清楚红黑树"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5dff59cb6fb9a0163c53ce1d",target:"_blank",rel:"noopener noreferrer"}},[t._v("通俗易懂的红黑树图解(上)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/dSGIHvgth7IqEZxG11rKOA",target:"_blank",rel:"noopener noreferrer"}},[t._v("动画 | 什么是红黑树"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/tFJqwKa-adXW0kXGxldisg",target:"_blank",rel:"noopener noreferrer"}},[t._v("动画：二叉树在实际中的应用(下）"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/0nubI8XPcUJYAaEk-Eomrg",target:"_blank",rel:"noopener noreferrer"}},[t._v("动画 | 什么是二分搜索树（附伪代码）"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"联系作者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系作者"}},[t._v("#")]),t._v(" 联系作者")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("p",[t._v("\n        平凡世界，贵在坚持。\n    ")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);r.default=_.exports}}]);