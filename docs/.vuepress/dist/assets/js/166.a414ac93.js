(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{248:function(s,n,a){"use strict";a.r(n);var e=a(4),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"vue-组件通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-组件通信","aria-hidden":"true"}},[s._v("#")]),s._v(" vue 组件通信")]),s._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("组件是 vue.js 最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。一般来说，组件可以有以下几种关系：")]),s._v(" "),a("p",[a("img",{attrs:{src:"vue03.png",alt:"images"}})]),s._v(" "),a("p",[s._v("如上图所示，A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C 是隔代关系（可能隔多代）。")]),s._v(" "),a("p",[s._v("针对不同的使用场景，如何选择行之有效的通信方式？这是我们所要探讨的主题。本文总结了 vue 组件间通信的几种方式，如"),a("code",[s._v("props")]),s._v("、"),a("code",[s._v("$emit")]),s._v("/"),a("code",[s._v("$on")]),s._v("、"),a("code",[s._v("vuex")]),s._v("、"),a("code",[s._v("$parent")]),s._v(" / "),a("code",[s._v("$children")]),s._v("、"),a("code",[s._v("$attrs")]),s._v("/"),a("code",[s._v("$listeners")]),s._v("和"),a("code",[s._v("provide")]),s._v("/"),a("code",[s._v("inject")]),s._v("，以通俗易懂的实例讲述这其中的差别及使用场景，希望对小伙伴有些许帮助。")]),s._v(" "),a("h2",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[s._v("#")]),s._v(" 内容")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%80%E3%80%81props-emit"}},[s._v("props/$emit")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8C%E3%80%81-emit-on"}},[s._v("$emit/$on")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%89%E3%80%81vuex"}},[s._v("vuex")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9B%9B%E3%80%81-attrs-listeners"}},[s._v("$attrs/$listeners")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%94%E3%80%81provide-inject"}},[s._v("provide/inject")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%85%AD%E3%80%81-parent-chilren%E4%B8%8Eref"}},[s._v("$parent/$chilren 与 ref")])])]),s._v(" "),a("h3",{attrs:{id:"一、props-emit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、props-emit","aria-hidden":"true"}},[s._v("#")]),s._v(" 一、"),a("code",[s._v("props")]),s._v("/"),a("code",[s._v("$emit")])]),s._v(" "),a("p",[s._v("父组件 A 通过 props 的方式向子组件 B 传递，B to A 通过在 B 组件中 v-on 的方式实现。")]),s._v(" "),a("h4",{attrs:{id:"_1-1-父组件向子组件传值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-父组件向子组件传值","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.1 父组件向子组件传值")]),s._v(" "),a("p",[s._v("接下来我们通过一个例子，说明父组件如何向子组件传递值：在子组件 User.vue 中如何获取父组件 App.vue 中的数据"),a("code",[s._v('users:["Henry","Bucky","Emily"]')])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// App.vue组件\n<template>\n    <div id=\"app\">\n        <users v-bind:users=\"users\"></users>    // 前者自定义名称便于子组件调用，后者要传递数据名\n    </div>\n</template>\n<script>\nimport Users from './components/Users'\nexport default{\n    name:'App',\n    data(){\n        return {\n            users:['Henry','Bucky','Emily']\n        }\n    },\n    components:{\n        'users':Users\n    }\n}\n<\/script>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// users子组件\n<template>\n    <div class="hello">\n        <ul>\n            <li v-for="user in users">{{user}}</li> // 遍历传递过来的值，然后呈现到页面\n        </ul>\n    </div>\n</template>\n<script>\nexport default{\n    name:\'HelloWorld\',\n    props:{\n        users:{     // 这个就是父组件中子标签自定义名字\n            type:Array,\n            required:true\n        }\n    }\n}\n<\/script>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[a("strong",[s._v("总结：父组件通过 props 向下传递数据给子组件。注：组件中的数据共有三种形式：data、props、computed")])]),s._v(" "),a("h4",{attrs:{id:"_1-2-子组件向父组件传值（通过事件形式）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-子组件向父组件传值（通过事件形式）","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.2 子组件向父组件传值（通过事件形式）")]),s._v(" "),a("p",[s._v("接下来我们通过一个例子，说明子组件如何向父组件传递值：当我们点击“Vue.js Demo”后，子组件向父组件传递值，文字由原来的“传递的是一个值”变成“子向父组件传值”，实现子组件向父组件值的传递。")]),s._v(" "),a("p",[a("img",{attrs:{src:"vue04.png",alt:"images"}})]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 子组件\n<template>\n    <header>\n        <h1 @click=\"changeTitle\">{{title}}</h1>   //绑定一个点击事件\n    </header>\n</template>\n<script>\nexport default{\n    name:'app-header',\n    data(){\n        return{\n            title:'Vue.js Demo'\n        }\n    },\n    methods:{\n        changeTitle(){\n            this.$emit('titleChanged','子向父组件传值');    // 自定义事件  传递值“子向父组件传值”\n        }\n    }\n}\n<\/script>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 父组件\n<template>\n    <div id=\"app\">\n        <app-header v-on:titleChanged=\"updateTitle\">   // 与子组件titleChanged自定义事件保持一致，updateTitle($event)接受传递过来的文字\n        </app-header>\n        <h2>{{title}}</h2>\n    </div>\n</template>\n<script>\nimport Header from './components/Header'\nexport default{\n    name:'App',\n    data(){\n        return {\n            title:\"传递的是一个值\"\n        }\n    },\n    methods:{\n        updateTitle(e){ //声明这个函数\n            this.title = e;\n        }\n    },\n    components:{\n        'app-header':Header\n    }\n}\n<\/script>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[a("strong",[s._v("总结：子组件通过 events 给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。")])]),s._v(" "),a("h3",{attrs:{id:"二、-emit-on"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、-emit-on","aria-hidden":"true"}},[s._v("#")]),s._v(" 二、"),a("code",[s._v("$emit")]),s._v("/"),a("code",[s._v("$on")])]),s._v(" "),a("p",[s._v("**这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听，巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级。**当我们的项目比较大的时，可以选择更好的状态管理解决方案 vuex。")]),s._v(" "),a("h4",{attrs:{id:"_2-1-具体实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-具体实现方式","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.1 具体实现方式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var Event = new Vue();\nEvent.$emit(事件名，数据);\nEvent.$on(事件名，data=>{});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"_2-2-举个例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-举个例子","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.2 举个例子")]),s._v(" "),a("p",[s._v("假设兄弟组件有三个，分别是 A、B、C 组件，C 组件如何获取 A 或者 B 组件的数据")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<div id=\"itany\">\n    <my-a></my-a>\n    <my-b></my-b>\n    <my-c></my-c>\n</div>\n<template id=\"a\">\n\n</template>\n<template id=\"b\">\n\n</template>\n<template id=\"c\">\n\n</template>\n<script>\nvar Event = new Vue();  //定义一个空的Vue实例\nvar A = {\n    template:'#a',\n    data(){\n        return{\n            name:'tom'\n        }\n    },\n    methods:{\n        send(){\n            Event.$emit('data-a',this.name);\n        }\n    }\n};\nvar B = {\n    template:'#b',\n    data(){\n        return {\n            age:20\n        }\n    },\n    methods:{\n        send(){\n            Event.$emit('data-b',this.age);\n        }\n    }\n};\nvar C = {\n    template:'#c',\n    data(){\n        return {\n            name:'',\n            age:''\n        }\n    },\n    mounted(){  //在模板编译完成执行\n        Event.$on('data-a',name=>{\n            this.name = name;     //箭头函数内部不会产生新this，这边如果不用=>，this指代Event\n        })\n        Event.$on('data-b',age=>{\n            this.age = age;\n        })\n    }\n};\nvar vm = new Vue({\n    el:'#itany',\n    components:{\n        'my-a':A,\n        'my-b':B,\n        'my-c':C\n    }\n});\n<\/script>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br")])]),a("p",[a("img",{attrs:{src:"vue05.gif",alt:"images"}})]),s._v(" "),a("p",[a("code",[s._v("$on")]),s._v("监听了自定义事件 data-a 和 data-b，因为有时不确定何时会触发事件，一般会在 mounted 或 created 钩子中来监听。")]),s._v(" "),a("h3",{attrs:{id:"三、vuex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、vuex","aria-hidden":"true"}},[s._v("#")]),s._v(" 三、vuex")]),s._v(" "),a("p",[a("img",{attrs:{src:"vue06.png",alt:"images"}})]),s._v(" "),a("h4",{attrs:{id:"_3-1-介绍-vuex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-介绍-vuex","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.1 介绍 Vuex")]),s._v(" "),a("p",[s._v("Vuex 实现了一个单向数据流，在全局拥有一个 State 存放数据，当组件要更改 State 中的数据时，必须通过")]),s._v(" "),a("h4",{attrs:{id:"_3-2-功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-功能","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.2 功能")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("Vue Components")]),s._v("：Vue 组件。HTML 页面上，负责接收用户操作等交互行为，执行 dispatch 方法触发对应 action 进行回应。")]),s._v(" "),a("li",[a("code",[s._v("dispatch")]),s._v("：操作行为触发方法，是唯一能执行 action 的方法。")]),s._v(" "),a("li",[a("code",[s._v("actions")]),s._v("：**操作行为处理模块由组件中的"),a("code",[s._v("$store.dispatch('action 名称',data1)")]),s._v("来触发。然后由 commit()来触发 mutation 的调用，间接更新 state。**负责处理 Vue Components 接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台 API 请求的操作就在这个模块中进行，包括触发其他 action 以及提交 mutation 的操作。该模块提供了 Promise 的封装，以支持 action 的链式触发。")]),s._v(" "),a("li",[a("code",[s._v("commit")]),s._v("：状态改变提交操作方法。对 mutation 进行提交，是唯一能执行 mutation 的方法。")]),s._v(" "),a("li",[a("code",[s._v("mutations")]),s._v("：**状态改变操作方法，由 actions 中的"),a("code",[s._v("commit('mutation 名称')")]),s._v("来触发。**是 Vuex 修改 state 的唯一推荐方法。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些 hook 暴露出来，以进行 state 的监控等。")]),s._v(" "),a("li",[a("code",[s._v("state")]),s._v("：页面状态管理容器对象。集中存储 Vue.components 中 data 对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用 Vue 的细粒度数据响应机制来进行高效的状态更新。")]),s._v(" "),a("li",[a("code",[s._v("getters")]),s._v("：state 对象读取方法。图中没有单独列出该模块，应该被包含在了 render 中，Vue Components 通过方法读取全局 state 对象。")])]),s._v(" "),a("h4",{attrs:{id:"_3-3-vuex-与-localstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-vuex-与-localstorage","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.3 Vuex 与 localStorage")]),s._v(" "),a("p",[s._v("vuex 是 vue 的状态管理器，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，"),a("strong",[s._v("具体做应该在 vuex 里数据改变的时候把数据拷贝一份保存到 localStorage 里面，刷新之后，如果 localStorage 里有保存的数据，取出来再替换 store 里的 state。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let defaultCity = \"上海\"\ntry{    // 用户关闭了本地存储功能，此时在外层加个try...catch\n    if(!defaultCity){\n        defaultCity = JSON.parse(window.localStorage.getItem('defaultCity'))\n    }\n}catch(e){}\nexport default new Vuex.Store({\n    state:{\n        city: defaultCity\n    },\n    mutations:{\n        changeCity(state,city){\n            state.city = city\n            try{\n                window.localStorage.setItem('defaultCity',JSON.stringify(state.city));\n                // 数据改变的时候把数据拷贝一份保存到localStorage里面\n            }catch(e){}\n        }\n    }\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("这里需要注意的是：由于 vuex 里，我们保存的状态，都是数组，而 localStorage 只支持字符串，所以需要用 JSON 转换：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('JSON.stringify(state.subscribeList);    //  array -> string\nJSON.parse(window.localStorage.getItem("subscribeList"))    // string -> array\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"四、-attrs-listeners"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、-attrs-listeners","aria-hidden":"true"}},[s._v("#")]),s._v(" 四、"),a("code",[s._v("$attrs")]),s._v("/"),a("code",[s._v("$listeners")])]),s._v(" "),a("h4",{attrs:{id:"_4-1-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-简介","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.1 简介")]),s._v(" "),a("p",[s._v("多级组件嵌套需要传递数据时，通常使用的方法是通过 vuex。但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点大材小用。为此 Vue2.4 版本提供了另一种方法----"),a("code",[s._v("$attrs")]),s._v("/"),a("code",[s._v("$listeners")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("$attrs")]),s._v('：包含了父作用域中不被 prop 所识别(且获取)的除绑定(class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定(class 和 style 除外)，并且可以通过 v-bind="$attrs"传入内部组件。通常配合 inheritAttrs 选项一起使用。')]),s._v(" "),a("li",[a("code",[s._v("$listeners")]),s._v('：包含了父作用域中的(不含.native 修饰器的)v-on 事件听器。它可以通过 v-on="$listeners"传入内部组件')])]),s._v(" "),a("h4",{attrs:{id:"_4-2-例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-例子","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.2 例子")]),s._v(" "),a("p",[s._v("接下来我们看个跨级通信的例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// index.vue\n<template>\n  <div>\n    <h2>小武子</h2>\n    <child-com1\n      :foo=\"foo\"\n      :boo=\"boo\"\n      :coo=\"coo\"\n      title=\"fttony\"\n    ></child-com1>\n  </div>\n</template>\n<script>\nconst childCom1 = () => import('./attrsChild.vue')\nexport default {\n  components: { childCom1 },\n  data () {\n    return {\n      foo: 'JavaScript',\n      boo: 'Html',\n      coo: 'CSS',\n      doo: 'Vue'\n    }\n  }\n}\n<\/script>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// childCom1.vue\n\n<template>\n  <div>\n    <p>foo:{{foo}}</p>\n    <p>childCom1的$attrs:{{$attrs}}</p>\n    <child-com2 v-bind=\"$attrs\"></child-com2>\n  </div>\n</template>\n<script>\nconst childCom2 = () => import('./attrsChild2.vue');\nexport default {\n  components: {\n    childCom2\n  },\n  inheritAttrs: false, // 可以关闭自动挂载到组件根元素上的没有在props声明的属性\n  props: {\n    foo: String // foo作为props属性绑定\n  },\n  created () {\n    console.log(this.$attrs);\n  }\n}\n<\/script>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<template>\n  <div>\n    <p>boo:{{boo}}</p>\n    <p>childCom2:{{$attrs}}</p>\n    <child-com3 v-bind=\"$attrs\"></child-com3>\n  </div>\n</template>\n<script>\nconst childCom3 = () => import('./attrsChild3.vue');\nexport default {\n  components: {\n    childCom3\n  },\n  inheritAttrs: false,\n  props: {\n    boo: String\n  },\n  created () {\n    console.log(this.$attrs)\n  }\n}\n<\/script>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<template>\n  <div>\n    <p>childCom3{{$attrs}}</p>\n  </div>\n</template>\n<script>\nexport default {\n  props: {\n    coo: String,\n    title: String\n  }\n}\n<\/script>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[a("img",{attrs:{src:"vue07.png",alt:"images"}})]),s._v(" "),a("p",[s._v("如上图所示"),a("code",[s._v("$attrs")]),s._v("表示没有继承数据的对象，格式的{属性名：属性值}。Vue2.4 提供了"),a("code",[s._v("$attrs")]),s._v("、"),a("code",[s._v("$listeners")]),s._v("来传递数据与事件，跨级组件之间的通讯变得更简单。")]),s._v(" "),a("p",[s._v("简单来说："),a("code",[s._v("$attrs")]),s._v("与"),a("code",[s._v("$listeners")]),s._v("是两个对象，"),a("code",[s._v("$attrs")]),s._v("里存放的是父组件中绑定的非 Props 属性，"),a("code",[s._v("$listeners")]),s._v("里存放的是父组件中绑定的非原生事件。")]),s._v(" "),a("h3",{attrs:{id:"五、provide-inject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、provide-inject","aria-hidden":"true"}},[s._v("#")]),s._v(" 五、"),a("code",[s._v("provide")]),s._v("/"),a("code",[s._v("inject")])]),s._v(" "),a("h4",{attrs:{id:"_5-1-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-简介","aria-hidden":"true"}},[s._v("#")]),s._v(" 5.1 简介")]),s._v(" "),a("p",[s._v("Vue2.2.0 新增 API,这对选项需要一起使用，"),a("strong",[s._v("以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起一下游关系成立的时间里始终生效。")]),s._v(" 一言而蔽之：祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。")]),s._v(" "),a("p",[s._v("provide/iject API "),a("strong",[s._v("主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。")])]),s._v(" "),a("h4",{attrs:{id:"_5-2-例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-例子","aria-hidden":"true"}},[s._v("#")]),s._v(" 5.2 例子")]),s._v(" "),a("p",[s._v("假设有两个组件：A.vue 和 B.vue，B 是 A 的子组件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// A.vue\nexport default{\n    provide:{\n        name:'小武子'\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// B.vue\nexport default{\n    inject:['name'],\n    mounted(){\n        console.log(this.name); // 小武子\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("可以看到，在 A.vue 里，我们设置了一个 provide:name，值为小武子，它的作用就是将 name 这个变量提供给它的所有子组件。而在 B.vue 中，通过"),a("code",[s._v("inject")]),s._v("注入了从 A 组件中提供的 name 变量，那么在组件 B 中，")]),s._v(" "),a("p",[s._v("需要注意的是："),a("strong",[s._v("provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的")]),s._v("——vue 官方访文档")]),s._v(" "),a("p",[s._v("所以，上面 A.vue 的 name 如果改变了，B.vue 的 this.name 是不会改变的，仍然是小武子。")]),s._v(" "),a("h4",{attrs:{id:"_5-3-provide-与-inject-怎么实现数据响应式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-provide-与-inject-怎么实现数据响应式","aria-hidden":"true"}},[s._v("#")]),s._v(" 5.3 provide 与 inject 怎么实现数据响应式")]),s._v(" "),a("p",[s._v("一般来说，有两种方法：")]),s._v(" "),a("ul",[a("li",[s._v("provide 祖先组件的实例")]),s._v(" "),a("li",[s._v("使用 2.6 最新 API Vue.observable 优化响应式 provide(推荐)")])]),s._v(" "),a("p",[s._v("我们来看个例子：孙组件 D、E 和 F 获取 A 组件传递过来的 color 值，并能实现数据响应变化，即 A 组件的 color 变化后，组件 D、E、F 会跟着变（核心代码如下：）")]),s._v(" "),a("p",[a("img",{attrs:{src:"vue08.png",alt:"images"}})]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//父组件:\nprovide: { //provide 是一个对象,提供一个属性或方法\n  foo: '这是 foo',\n  fooMethod:()=>{\n    console.log('父组件 fooMethod 被调用')\n  }\n},\n\n// 子或者孙子组件\ninject: ['foo','fooMethod'], //数组或者对象,注入到子组件\nmounted() {\n  this.fooMethod()\n  console.log(this.foo)\n}\n//在父组件下面所有的子组件都可以利用inject\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("虽说 provide 和 inject 主要为高阶插件/组件库提供用例，但如果你能在业务中熟练运用，可以达到事半功倍的效果！")]),s._v(" "),a("h3",{attrs:{id:"六、-parent-chilren与-ref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、-parent-chilren与-ref","aria-hidden":"true"}},[s._v("#")]),s._v(" 六、"),a("code",[s._v("$parent")]),s._v("/"),a("code",[s._v("$chilren")]),s._v("与 ref")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("ref")]),s._v("：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例")]),s._v(" "),a("li",[a("code",[s._v("$parent")]),s._v("/"),a("code",[s._v("$children")]),s._v("：访问父/子实例")])]),s._v(" "),a("p",[s._v("需要注意的是：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。我们先来看个用"),a("code",[s._v("ref")]),s._v("来访问组件的例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// component-a 子组件\nexport default{\n    data(){\n        return {\n            title:'Vue.js'\n        }\n    },\n    methods:{\n        sayHello(){\n            console.log('Hello');\n        }\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 父组件\n<template>\n    <component-a ref="comA"></component-a>\n</template>\n<script>\n    export default{\n        mounted(){\n            const comA = this.$refs.comA;\n            console.log(comA.title);    // Vue.js\n            comA.sayHello();    // 弹窗\n        }\n    }\n<\/script>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("不过，"),a("strong",[s._v("这两种方法的弊端是，无法在跨级或兄弟间通信。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// parent.vue\n<component-a></component-a>\n<component-b></component-b>\n<component-b></component-b>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("我们想在 component-a 中，访问到引用它的页面中（这里就是 parent.vue）的两个 component-b 组件，那这种情况下，就得配置额外的插件或工具了，比如 Vuex 和 Bus 的解决方案。")]),s._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[s._v("常用使用场景可以分为三类：")]),s._v(" "),a("ul",[a("li",[s._v("父子通信：父向子传递数据是通过 props，子向父是通过 events("),a("code",[s._v("$emit")]),s._v(")；通过父链/子链也可以通信（"),a("code",[s._v("$parent")]),s._v("/"),a("code",[s._v("$children")]),s._v("）；ref 也可以访问组件实例；provide/inject API;"),a("code",[s._v("$attrs/$listeners")]),s._v("；")]),s._v(" "),a("li",[s._v("兄弟通信：Bus、Vuex；")]),s._v(" "),a("li",[s._v("跨级通信：Bus、Vuex、provide / inject API、"),a("code",[s._v("$attrs/$listeners")])])]),s._v(" "),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/5bd97e7c6fb9a022852a71cf",target:"_blank",rel:"noopener noreferrer"}},[s._v("vue 组件通信全揭秘(共 7 章)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5cde0b43f265da03867e78d3",target:"_blank",rel:"noopener noreferrer"}},[s._v("vue 组件间通信六种方式（完整版）"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/tugenhua0707/p/11761280.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("vue 系列---Vue 组件化的实现原理（八）"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5d267dcdf265da1b957081a3",target:"_blank",rel:"noopener noreferrer"}},[s._v("vue 中 8 种组件通信方式, 值得收藏!"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"联系作者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[s._v("#")]),s._v(" 联系作者")]),s._v(" "),a("div",{attrs:{align:"center"}},[a("p",[s._v("\n        平凡世界，贵在坚持。\n    ")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);n.default=t.exports}}]);