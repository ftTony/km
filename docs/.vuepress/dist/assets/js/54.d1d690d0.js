(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{277:function(t,a,r){"use strict";r.r(a);var e=r(13),_=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"b-树与-b-树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#b-树与-b-树"}},[t._v("#")]),t._v(" B 树与 B+树")]),t._v(" "),r("h2",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),r("p",[t._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),t._v(" "),r("h2",{attrs:{id:"内容"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E4%B8%80%E3%80%81B%E6%A0%91%E5%AE%9A%E4%B9%89"}},[t._v("定义")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%BA%8C%E3%80%81B%E6%A0%91%E6%9F%A5%E6%89%BE"}},[t._v("查找")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B8%89%E3%80%81B%E6%A0%91%E6%8F%92%E5%85%A5"}},[t._v("插入")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%9B%9B%E3%80%81B%E6%A0%91%E5%88%A0%E9%99%A4"}},[t._v("B 树删除")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%BA%94%E3%80%81B+%E6%A0%91%E5%AE%9A%E4%B9%89"}},[t._v("B+树定义")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%85%AD%E3%80%81B+%E6%A0%91%E6%8F%92%E5%85%A5"}},[t._v("B+树插入")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B8%83%E3%80%81B+%E6%A0%91%E5%88%A0%E9%99%A4"}},[t._v("B+树删除")])])]),t._v(" "),r("h3",{attrs:{id:"一、b-树定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、b-树定义"}},[t._v("#")]),t._v(" 一、B 树定义")]),t._v(" "),r("p",[r("strong",[t._v("B 树")]),t._v("也称 B-树，B-树直接读作 B 树，不能因为有“-”号就读作 B 减树，它是一颗多路平衡查找树。我们描述一颗 B 树时需要指定它的除数，除数表示了一个结点最多有多少个孩子结点，一般用字母 m 表示除数。当 m 取 2 时，就是我们常见的二叉搜索树，m 为 3 时是 2-3 树。")]),t._v(" "),r("p",[t._v("一颗 m 阶的 B 树定义如下：")]),t._v(" "),r("ol",[r("li",[t._v("每个结点最多有 m-1 个关键字。")]),t._v(" "),r("li",[t._v("根结点最少可以只有 1 个关键字。")]),t._v(" "),r("li",[t._v("非根结点至少有 Math.ceil(m/2)-1 个关键字。Math.ceil(m/2)含义是向上取整。例如 Math.ceil(4.5)=5。")]),t._v(" "),r("li",[t._v("每个结点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。")]),t._v(" "),r("li",[t._v("所有叶子结点都位于同一层，或者说根结点到每个叶子结点的长度相同。")])]),t._v(" "),r("h3",{attrs:{id:"二、b-树查找"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、b-树查找"}},[t._v("#")]),t._v(" 二、B 树查找")]),t._v(" "),r("p",[t._v("B-树的查找其实是对二叉搜索树查找的扩展，与二叉搜索树不同的地方是，B-树中每个节点有不止一棵子树。在 B-树中查找某个结点时，需要先判断要查找的结点在哪棵子树上，然后在结点中逐个查找目标结点。B 树的查找过程相对简单，与二叉搜索树类似。")]),t._v(" "),r("h3",{attrs:{id:"三、b-树插入"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、b-树插入"}},[t._v("#")]),t._v(" 三、B 树插入")]),t._v(" "),r("h4",{attrs:{id:"_3-1-b-树的插入流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-b-树的插入流程"}},[t._v("#")]),t._v(" 3.1 B 树的插入流程")]),t._v(" "),r("ol",[r("li",[t._v("根据要插入的 key 的值，对 B 树执行查找操作，查找到待插入数据的当前节点位置。")]),t._v(" "),r("li",[t._v("判断当前结点 key 的个数是否小于等于 m-1，若满足，则结束直接插入数据，否则，进行下一步。")]),t._v(" "),r("li",[t._v("以结点中间的 key 为中心分裂成左右两部分，然后将这个中间的 key 插入到父结点中，这个 key 的左子树指向分裂后的左半部分，这个 key 的右子支指向分裂后的右半部分，然后将当前结点指向父结点，继续进行第三步。")])]),t._v(" "),r("h4",{attrs:{id:"_3-2-实例图解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-实例图解"}},[t._v("#")]),t._v(" 3.2 实例图解")]),t._v(" "),r("h4",{attrs:{id:"_3-3-性能分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-性能分析"}},[t._v("#")]),t._v(" 3.3 性能分析")]),t._v(" "),r("p",[t._v("B 树插入过程首先需要执行一次查找操作，B 树的查找操作的时间复杂度为 O(mlogmn)。其中 m 为 B 树的阶数，n 为 B 树中 key 的数目。")]),t._v(" "),r("h3",{attrs:{id:"四、b-树删除"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、b-树删除"}},[t._v("#")]),t._v(" 四、B 树删除")]),t._v(" "),r("h4",{attrs:{id:"_4-1-删除流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-删除流程"}},[t._v("#")]),t._v(" 4.1 删除流程")]),t._v(" "),r("ol",[r("li",[t._v("如果当前需要删除的 key 位于非叶子结点上，则用后继 key（这里的后继 key 均指后继记录的意思）覆盖要删除的 key，然后在后继 key 所在的子支中删除该后继 key。此时后继 key 一定位于叶子结点上，这个过程和二叉搜索树删除结点的方式类似。删除这个记录执行下一步")]),t._v(" "),r("li",[t._v("该结点 key 个数大于等于 Math.ceil(m/2)-1，结束删除操作，否则执行第三步。")]),t._v(" "),r("li",[t._v("如果兄弟结点 key 个数大于 Math.ceil(m/2)-1，则父结点中的 key 下移到该结点，兄弟结点中的一个 key 上移，删除操作结束。否则，将父结点中的 key 下移与当前结点及它的兄弟结点中的 key 合并，形成一个新的结点。原父结点中的 key 的两个孩子指针就变成了一个孩子指针，指向这个新结点。然后当前结点的指针指向父结点，重复第二步。")])]),t._v(" "),r("h4",{attrs:{id:"_4-2-实例图解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-实例图解"}},[t._v("#")]),t._v(" 4.2 实例图解")]),t._v(" "),r("h4",{attrs:{id:"_4-3-性能分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-性能分析"}},[t._v("#")]),t._v(" 4.3 性能分析")]),t._v(" "),r("p",[t._v("B 树的删除操作同样需要执行查找过程，时间复杂度为 O(mlogmn)。删除数据过程与插入过程类似，最坏情况需要回溯 O(h)。因此 B 树的删除操作的时间复杂度近似为 O(mlogmn)。")]),t._v(" "),r("h3",{attrs:{id:"五、b-树定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#五、b-树定义"}},[t._v("#")]),t._v(" 五、B+树定义")]),t._v(" "),r("p",[t._v("B+树是 B 树的一个升级版，相对于 B 树来说 B+树更充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找。为什么说 B+树查找的效率要比 B 树更高、更稳定；")]),t._v(" "),r("h4",{attrs:{id:"_5-1-b-树的特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-b-树的特点"}},[t._v("#")]),t._v(" 5.1 B+树的特点")]),t._v(" "),r("ol",[r("li",[r("strong",[t._v("B+树的层级更少")]),t._v("： 相较于 B 树 B+每个非叶子节点存储的关键字数更多，树的层级更少所以查询数据更快；")]),t._v(" "),r("li",[r("strong",[t._v("B+树查询")]),t._v("：B+所有关键字数据地址都存在叶子节点上，所以每次查找的次数都相同所以查询速度要比 B 树更稳定；")]),t._v(" "),r("li",[r("strong",[t._v("B+树天然具备排序功能")]),t._v("：B+树所有的叶子")]),t._v(" "),r("li",[r("strong",[t._v("B+树全节点遍历更快")]),t._v("：B+树")])]),t._v(" "),r("h3",{attrs:{id:"六、b-树插入"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#六、b-树插入"}},[t._v("#")]),t._v(" 六、B+树插入")]),t._v(" "),r("h3",{attrs:{id:"七、b-树删除"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#七、b-树删除"}},[t._v("#")]),t._v(" 七、B+树删除")]),t._v(" "),r("h3",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.cnblogs.com/nullzx/p/8729425.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("B 树和 B+树的插入、删除图文详解"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/27700617",target:"_blank",rel:"noopener noreferrer"}},[t._v("平衡二叉树、B 树、B+树、"),r("code",[t._v("B*")]),t._v("树 理解其中一种你就都明白了"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://mp.weixin.qq.com/s/5ERFlmeUGXnfQPAZBLn6RA",target:"_blank",rel:"noopener noreferrer"}},[t._v("心里没点 B 树。。。"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://mp.weixin.qq.com/s/yxS4tpX_6fz9LBsh0UoHpw",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是 MySQL 索引?"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://mp.weixin.qq.com/s/Fu70CC8FoeVlHDfCYyZ-rg",target:"_blank",rel:"noopener noreferrer"}},[t._v("拜托，别再问我什么是 B+ 树了"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://mp.weixin.qq.com/s/xVoMmBjFVJaUSadF1nEfeg",target:"_blank",rel:"noopener noreferrer"}},[t._v("为啥 SQL 加了索引会使数据查找更快？"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"联系作者"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#联系作者"}},[t._v("#")]),t._v(" 联系作者")]),t._v(" "),r("div",{attrs:{align:"center"}},[r("p",[t._v("\n        平凡世界，贵在坚持。\n    ")]),t._v(" "),r("img",{attrs:{src:t.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);a.default=_.exports}}]);