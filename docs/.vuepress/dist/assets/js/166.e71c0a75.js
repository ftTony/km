(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{392:function(s,n,a){"use strict";a.r(n);var e=a(4),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"js的浅拷贝与深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js的浅拷贝与深拷贝","aria-hidden":"true"}},[s._v("#")]),s._v(" JS的浅拷贝与深拷贝")]),s._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),s._v(" "),a("h2",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[s._v("#")]),s._v(" 内容")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E7%90%86%E8%A7%A3%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0%E6%89%80%E5%9C%A8"}},[s._v("理解问题原因所在")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8C%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB"}},[s._v("深拷贝和浅拷贝的区别")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%95%B0%E7%BB%84%E6%B5%85%E6%8B%B7%E8%B4%9D"}},[s._v("实现对象和数组浅拷贝")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9B%9B%E3%80%81%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%95%B0%E7%BB%84%E6%B7%B1%E6%8B%B7%E8%B4%9D"}},[s._v("实现对象和数组深拷贝")])])]),s._v(" "),a("h3",{attrs:{id:"一、理解问题原因所在"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、理解问题原因所在","aria-hidden":"true"}},[s._v("#")]),s._v(" 一、理解问题原因所在")]),s._v(" "),a("p",[s._v("JavaScript 中的数据类型可以分为两种：基本类型值（Number,Boolean,String,NULL,Undefined）和引用类型值（Array,Object,Date,RegExp,Function）。基本类型指的是简单的数据段，而引用类型值指那些可能由多个值构成的对象。")]),s._v(" "),a("p",[a("strong",[s._v("基本数据类型是按值访问的")]),s._v("，因为可以直接操作保存在变量中的实际的值。引用类型的值是保存在内存中的对象，与其他语言不同，JavaScript 不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在"),a("strong",[s._v("操作对象的引用")]),s._v("而不是实际的对象。 为此，引用类型的值是按引用访问的。")]),s._v(" "),a("p",[s._v("除了保存的方式不同之外，在从一个变量向另一个变量复制基本类型值和引用类型值时，也存在不同：")]),s._v(" "),a("ul",[a("li",[s._v("如果从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上。")]),s._v(" "),a("li",[s._v("当从一个变量向另一个变量复制引用类型的值时，同样也会将存储在变量对象中的值复制一份放到为新变量分配的空间中。不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上将引用同一个对象。因此，改变其中一个变量，就会影响另一个变量。")])]),s._v(" "),a("p",[s._v("看下面的代码：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 基本类型值复制\nvar string1 = 'base type';\nvar string2 = string1;\n\n// 引用类型值复制\nvar object1 = {a: 1};\nvar object2 = object1;\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("下图可以表示两种类型的变量的复制结果：")]),s._v(" "),a("p",[a("img",{attrs:{src:"clone.png",alt:"images"}})]),s._v(" "),a("p",[s._v("至此，我们应该理解：在 JavaScript 中直接复制对象实际上是对引用的复制\n，会导致两个亦是引用同一个对象，对任一亦是的个性都会反映到另一个变量上，这是一节总是原因所在。")]),s._v(" "),a("h3",{attrs:{id:"二、深拷贝和浅拷贝的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、深拷贝和浅拷贝的区别","aria-hidden":"true"}},[s._v("#")]),s._v(" 二、深拷贝和浅拷贝的区别")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#21-%E6%B5%85%E6%8B%B7%E8%B4%9D"}},[s._v("浅拷贝")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#22-%E6%B7%B1%E6%8B%B7%E8%B4%9D"}},[s._v("深拷贝")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#23-%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%8C%BA%E5%88%AB"}},[s._v("浅拷贝与深拷贝区别")])])]),s._v(" "),a("h4",{attrs:{id:"_2-1-浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-浅拷贝","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.1 浅拷贝")]),s._v(" "),a("p",[s._v("创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，\n拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。")]),s._v(" "),a("p",[a("img",{attrs:{src:"clone01.png",alt:"images"}})]),s._v(" "),a("p",[s._v("上图中，"),a("code",[s._v("SourceObject")]),s._v("是原对象，其中包含基本类型属性"),a("code",[s._v("filed1")]),s._v("和引用类型属性"),a("code",[s._v("refObj")]),s._v("。浅贝之后基本类型数据"),a("code",[s._v("field2")]),s._v("和"),a("code",[s._v("filed1")]),s._v("是不同属性，互不影响。但引用类型"),a("code",[s._v("refObj")]),s._v("仍然是同一个，改变之后会对另一个对象产生影响。")]),s._v(" "),a("p",[s._v("简单来说可以理解为浅拷贝只解决了第一层的问题，拷贝第一层的"),a("strong",[s._v("基本类型值")]),s._v("，以及第一层的"),a("strong",[s._v("引用类型地址")]),s._v("。")]),s._v(" "),a("h4",{attrs:{id:"_2-2-深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-深拷贝","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.2 深拷贝")]),s._v(" "),a("p",[s._v("深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大。拷贝前后两个对象互不影响。")]),s._v(" "),a("p",[a("img",{attrs:{src:"clone02.png",alt:"images"}})]),s._v(" "),a("h4",{attrs:{id:"_2-3-浅拷贝与深拷贝区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-浅拷贝与深拷贝区别","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.3 浅拷贝与深拷贝区别")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("--")]),s._v(" "),a("th",[s._v("和原数据是否指向同一对象")]),s._v(" "),a("th",[s._v("第一层数据为基本数据类型")]),s._v(" "),a("th",[s._v("原数据中包含子对象")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("赋值")]),s._v(" "),a("td",[s._v("是")]),s._v(" "),a("td",[s._v("改变会使原数据一同改变")]),s._v(" "),a("td",[s._v("改变会使原数据一同改变")])]),s._v(" "),a("tr",[a("td",[s._v("浅拷贝")]),s._v(" "),a("td",[s._v("否")]),s._v(" "),a("td",[s._v("改变不会使原数据一同改变")]),s._v(" "),a("td",[s._v("改变会使原数据一同改变")])]),s._v(" "),a("tr",[a("td",[s._v("深拷贝")]),s._v(" "),a("td",[s._v("否")]),s._v(" "),a("td",[s._v("改变不会使原数据一同改变")]),s._v(" "),a("td",[s._v("改变不会使原数据一同改变")])])])]),s._v(" "),a("h3",{attrs:{id:"三、实现对象和数组浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、实现对象和数组浅拷贝","aria-hidden":"true"}},[s._v("#")]),s._v(" 三、实现对象和数组浅拷贝")]),s._v(" "),a("ul",[a("li",[s._v("使用 Object.assign 方法")]),s._v(" "),a("li",[s._v("展开语法 Spread")]),s._v(" "),a("li",[s._v("使用 Object.getOwnPropertyNames 拷贝不可枚举的属性")]),s._v(" "),a("li",[s._v("使用 Object.getPrototypeOf 和 Object.getOwnPropertyDescriptor 拷贝原型与描述符")]),s._v(" "),a("li",[s._v("使用 slice 和 concat 方法")])]),s._v(" "),a("h4",{attrs:{id:"_3-1-使用-object-assign-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-使用-object-assign-方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.1 使用 Object.assign 方法")]),s._v(" "),a("p",[a("code",[s._v("Object.assing()")]),s._v("用于将一个或多个源对象中的所有"),a("code",[s._v("可枚举的属性")]),s._v("值复制到目标对象")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var object1 ={\n    a:1,\n    obj:{\n        b:'string'\n    }\n};\n\n// 浅拷贝\nvar copy = Object.assign({},object1);\n// 改变原对象属性\nobject1.a =2;\nobject1.obj.b = 'newString';\n\nconsole.log(copy.a); // 1\nconsole.log(copy.obj.a);    // newString\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("上面代码改变对象 object1 之后，对象 copy 的基本属性保持不变。但是当改变对象 object1 中的对象"),a("code",[s._v("obj")]),s._v("时，对象 copy 相应的位置也发生了变化。")]),s._v(" "),a("h4",{attrs:{id:"_3-2-展开语法-spread"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-展开语法-spread","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.2 展开语法 Spread")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// tony\nlet a = {\n    name: "tony",\n    book: {\n        title: \'You don`t Know JS\',\n        price: \'45\'\n    }\n}\nlet b = {...a};\nconsole.log(b);\n\n// {\n// \tname: "tony",\n// \tbook: {title: "You Don\'t Know JS", price: "45"}\n// }\n\na.name = \'change\';\na.book.price = \'55\';\nconsole.log(a);\n// {\n// \tname: "change",\n// \tbook: {title: "You Don\'t Know JS", price: "55"}\n// }\n\nconsole.log(b);\n// {\n// \tname: "tony",\n// \tbook: {title: "You Don\'t Know JS", price: "55"}\n// }\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("p",[s._v("通过代码可以看出实际效果和"),a("code",[s._v("Object.assign()")]),s._v("是一样的。")]),s._v(" "),a("h4",{attrs:{id:"_3-3-使用-object-getownpropertynames-拷贝不可枚举的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-使用-object-getownpropertynames-拷贝不可枚举的属性","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.3 使用 Object.getOwnPropertyNames 拷贝不可枚举的属性")]),s._v(" "),a("p",[a("code",[s._v("Object.getOwnPropertyNames()")]),s._v("返回由对象属性组成的一个数组，包括不可枚举的属性(除了使用 Symbol 的属性)。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function shallowCopyOwnProperties(source){\n    var target = {};\n    var keys = Object.getOwnPropertyNames(original);\n    for ( var i=0;i<keys.length;i++){\n        target[keys[i]] = source[keys[i]];\n    }\n    return target;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h4",{attrs:{id:"_3-4-使用-object-getprototypeof-和-object-getownpropertydescriptor-拷贝原型与描述符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-使用-object-getprototypeof-和-object-getownpropertydescriptor-拷贝原型与描述符","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.4 使用 Object.getPrototypeOf 和 Object.getOwnPropertyDescriptor 拷贝原型与描述符")]),s._v(" "),a("p",[s._v("如果我们需要拷贝原对象的原型和描述符，我们可以使用"),a("code",[s._v("Object.getPrototypeOf")]),s._v("和"),a("code",[s._v("Object.getOwnPropertyDescriptor")]),s._v("方法分别获取原对象的原型和描述符，然后使用"),a("code",[s._v("Object.create")]),s._v("和"),a("code",[s._v("Object.defineProperty")]),s._v("方法，根据原型和属性的描述符创建新的对象和对象的属性。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function shallowCopy(source){\n    // 用source的原型创建一个对象\n    var target = Object.create(Object.getPrototypeOf(source));\n    // 获取对象的所有属性\n    var keys = Object.getOwnPropertyNames(source);\n    // 循环拷贝对象的所有属性\n    for( var i=0;i<keys.length;i++){\n        // 用原属性的描述符创建新的属性\n        Object.defineProperty(target,keys[i],Object.getOwnPropertyDescriptor(source,keys[i]));\n    }\n    return target;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h4",{attrs:{id:"_3-5-使用-slice-和-concat-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-使用-slice-和-concat-方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.5 使用 slice 和 concat 方法")]),s._v(" "),a("p",[s._v("concat 使用如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var arr = ['old',1,true,null,undefined];\n\nvar new_arr = arr.concat();\n\nnew_arr[0] = 'new';\n\nconsole.log(arr);   // [\"old\", 1, true, null, undefined]\n\nconsole.log(new_arr); // [\"new\", 1, true, null, undefined]\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("用 slice 可以这样做")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var arr = [{old: 'old'}, ['old']];\n\nvar new_arr = arr.concat();\n\narr[0].old = 'new';\narr[1][0] = 'new';\n\nconsole.log(arr) // [{old: 'new'}, ['new']]\nconsole.log(new_arr) // [{old: 'new'}, ['new']]\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"四、实现对象和数组深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、实现对象和数组深拷贝","aria-hidden":"true"}},[s._v("#")]),s._v(" 四、实现对象和数组深拷贝")]),s._v(" "),a("ul",[a("li",[s._v("使用 JSON.stringify 和 JSON.parse 方法")]),s._v(" "),a("li",[s._v("使用递归")]),s._v(" "),a("li",[s._v("使用队列")]),s._v(" "),a("li",[s._v("使用哈希表")]),s._v(" "),a("li",[s._v("破解递归爆栈")])]),s._v(" "),a("h4",{attrs:{id:"_4-1-使用-json-stringify-和-json-parse-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-使用-json-stringify-和-json-parse-方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.1 使用 JSON.stringify 和 JSON.parse 方法")]),s._v(" "),a("p",[s._v("JSON.stringify 和 JSON.parse 是 JavaScript 内置对象 JSON 的两个方法，主要是用来将 JavaScript 对象序列化为 JSON 字符串和把 JSON 字符串解析为原生 JavaScript 值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj = {a:1,b:{c:2}};\n\n// 深拷贝\nvar newObj = JSON.parse(JSON.stringify(obj));\n// 改变原对象的属性\nobj.b.c = 20;\n\nconsole.log(obj);   // {a:1,b:{c:20}}\nconsole.log(newObj);    // {a:1,b:{c:2}}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("该方法有以下几个问题")]),s._v(" "),a("ul",[a("li",[s._v("会忽略"),a("code",[s._v("undefined")])]),s._v(" "),a("li",[s._v("会忽略"),a("code",[s._v("symbol")])]),s._v(" "),a("li",[s._v("不能序列化函数")]),s._v(" "),a("li",[s._v("不解决循环引用的对象")]),s._v(" "),a("li",[s._v("不能正确处理"),a("code",[s._v("new Date()")])]),s._v(" "),a("li",[s._v("不能处理正则")])]),s._v(" "),a("h4",{attrs:{id:"_4-2-使用递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-使用递归","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.2 使用递归")]),s._v(" "),a("p",[s._v("递归是一种常见的解决这种问题的方法：我们可以定义一个函数，遍历对象的属性，当对象的属性是基本类型值得时候，直接拷贝；当属性是引用类型值的时候，再次调用这个函数进行递归拷贝。这是基本的思想，下面看具体的实现（不考虑原型，描述符，不可枚举属性等，便于理解）：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function deepClone(source){\n    // 递归终止条件\n    if (!source || typeof source !== 'object'){\n        return source;\n    }\n    var targetObj = Array.isArray(source) ? [] :{};\n    for (var key in source){\n        if (Object.prototype.hasOwnProperty.call(source,key)){\n            if(source[key] && typeof source[key] === 'object'){\n                targetObj[key] = deepClone(source[key]);\n            }else{\n                targetObj[key] = source[key];\n            }\n        }\n    }\n    return targetObj;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("上面的深拷贝只是比较简单的实现，没有考虑很复杂的情况，比如：")]),s._v(" "),a("ul",[a("li",[s._v("其他引用类型：Function，Date，RegExp 的拷贝")]),s._v(" "),a("li",[s._v("对象中存在循环引用会导致调用栈溢出")]),s._v(" "),a("li",[s._v("通过闭包作用域来实现私有成员的这类对象不能真正的被拷贝")])]),s._v(" "),a("p",[a("strong",[s._v("什么是闭包作用域")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function myConstructor(){\n    var myPrivateVar = 'secret';\n    return {\n        myPublicVar : 'public',\n        getMyprivateVar:function(){\n            return myPrivateVar;\n        },\n        setMyPrivateVar(value){\n            myPrivateVar = value.toString();\n        }\n    }\n}\n\nvar o= myContructor();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("上面的代码中，对象 o 有三个属性，一个是字符串，另外两个是方法。方法中用到一个变量"),a("code",[s._v("myPrivateVar")]),s._v("，存在于"),a("code",[s._v("myConstructor()")]),s._v("的函数作用域中，当"),a("code",[s._v("myConstructor")]),s._v("构造函数调用时，就创建了这个变量"),a("code",[s._v("myPrivateVar")]),s._v("，然而这个变量并不是通过构造函数的对象"),a("code",[s._v("o")]),s._v("的属性，但是它任然可以被这两个方法使用。")]),s._v(" "),a("p",[s._v("因此，如果尝试深拷贝对象"),a("code",[s._v("o")]),s._v("，那么拷贝对象"),a("code",[s._v("clone")]),s._v("和被拷贝对象"),a("code",[s._v("original")]),s._v("中的方法都是引用相同的"),a("code",[s._v("myPrivateVar")]),s._v("变量。")]),s._v(" "),a("h4",{attrs:{id:"_4-3-使用队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-使用队列","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.3 使用队列")]),s._v(" "),a("p",[s._v("递归的做法虽然简单，容易理解，但是存在一定的性能问题，对拷贝比较大的对象来说不是很好的选择。")]),s._v(" "),a("p",[s._v("理论上来说，递归是可以转化成循环的，我们可以尝试着将深拷贝中的递归转化成循环。我们需要遍历对象的属性，如果属性是基本类型，直接复制，如果属性是引用类型（对象或数组），需要再遍历这个对象，对他的属性进行相同的操作。那么我们需要一个容器来存放需要进行遍历的对象，每次从容器中拿出一个对象进行拷贝处理，如果处理过程中遇到新的对象，那么再把它放到这个容器中准备进行下一轮的处理，当把容器中所有的对象都处理完成后，也就完成了对象的拷贝。")]),s._v(" "),a("p",[s._v("思想大致是这样的，下面看具体的实现：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n// 利用队列的思想优化递归\nfunction deepClone(source){\n    if(!source || typeof source !=='object'){\n        return source;\n    }\n    var current;\n    var target = source.constructor === Array ? [] : {};\n    // 用数组作为容器\n    // 记录被拷贝的原对象和目标\n    var cloneQueue = [{\n        source,\n        target\n    }];\n\n    while (current = cloneQueue.shift()){\n        for (var key in current.source){\n            if(Object.prototype.hasOwnProperty.call(current.source,key)){\n                if(current.source[key] && typeof current.source[key] === 'object'){\n                    current.target[key] == current.source[key].constructor === Array ? []:{};\n                    cloneQueue.push({\n                        source: current.source[key],\n                        target:current.target[key]\n                    });\n                }else{\n                    current.target[key] = current.source[key];\n                }\n            }\n        }\n    }\n    return target;\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("h4",{attrs:{id:"_4-4-使用哈希表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-使用哈希表","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.4 使用哈希表")]),s._v(" "),a("p",[s._v("解决方案很简单，其实就是循环检测，我们设置一个数组或者哈希表存储已拷贝过的对象，当检测到当前对象已存在于哈希表中时，取出该值并返回即可。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\nfunction cloneDeep3(source,hash = new WeakMap()){\n    if(!isObject(source)) return source;\n    if(hash.has(source)) return hash.get(source);   // 新增代码查哈希表\n\n    var target = Array.isArray(source) ? [] : {};\n    hash.set(source,target);    // 新增代码，哈希表设值\n\n    for(var key in source){\n        if(Object.prototype.hasOwnProperty.call(source,key)){\n            if(typeof source[key] === 'object' && source[key] != null){\n                target[key] = cloneDeep2(source[key]); // 注意这里\n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h4",{attrs:{id:"_4-5-破解递归爆栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-破解递归爆栈","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.5 破解递归爆栈")]),s._v(" "),a("p",[s._v("上面四种方法使用的都是递归方法，但是有一个问题在于会爆栈，错误提示如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// RangeError: Maximum call stack size exceeded\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("那应该如何解决呢？其实我们使用循环就可以了，代码如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function cloneDeep5(x){\n    const root = {};\n\n    // 栈\n    const loopList = [\n        parent: root,\n        key: undefined,\n        data: x\n    ];\n\n    while(loopList.length){\n        // 广度优先\n        const node = loopList.pop();\n        const parent = node.parent;\n        const key = node.key;\n        const data = node.data;\n\n        // 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素\n        let res = parent;\n        if (typeof key !== 'undefined') {\n            res = parent[key] = {};\n        }\n\n        fot(let k in data){\n            if(data.hasOwnProperty(k)){\n                // 下一次循环\n                loopList.push({\n                    parent:res,\n                    key: k,\n                    data: data[k]\n                });\n            }else{\n                res[k]= data[k];\n            }\n        }\n    }\n    return root;\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br")])]),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/5a00226b5188255695390a74",target:"_blank",rel:"noopener noreferrer"}},[s._v("深入理解 JavaScript 对象和数组拷贝"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://muyiy.cn/blog/4/4.1.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("详细解析赋值、浅拷贝和深拷贝的区别"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/32",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavaScript 专题之深浅拷贝"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://jerryzou.com/posts/dive-into-deep-clone-in-javascript/",target:"_blank",rel:"noopener noreferrer"}},[s._v("深入剖析 JavaScript 的深复制"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000016672263",target:"_blank",rel:"noopener noreferrer"}},[s._v("深拷贝的终极探索（99%的人都不知道）"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1",target:"_blank",rel:"noopener noreferrer"}},[s._v("如何写出一个惊艳面试官的深拷贝?"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"联系作者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[s._v("#")]),s._v(" 联系作者")]),s._v(" "),a("div",{attrs:{align:"center"}},[a("p",[s._v("\n        平凡世界，贵在坚持。\n    ")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);n.default=t.exports}}]);