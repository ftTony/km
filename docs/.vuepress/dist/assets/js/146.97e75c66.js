(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{364:function(e,s,n){"use strict";n.r(s);var a=n(13),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"原型与原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型与原型链"}},[e._v("#")]),e._v(" 原型与原型链")]),e._v(" "),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),e._v(" "),n("h2",{attrs:{id:"主要内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主要内容"}},[e._v("#")]),e._v(" 主要内容")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E5%8E%9F%E5%9E%8B"}},[e._v("原型")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E4%BA%8C%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE"}},[e._v("原型链")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E5%AE%8C%E6%95%B4%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE"}},[e._v("完整的原型链")])])]),e._v(" "),n("h2",{attrs:{id:"一、原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、原型"}},[e._v("#")]),e._v(" 一、原型")]),e._v(" "),n("h3",{attrs:{id:"_1-1-原型是什么？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-原型是什么？"}},[e._v("#")]),e._v(" 1.1 原型是什么？")]),e._v(" "),n("p",[e._v("在我们深入探索之前，当然要先了解原型是什么了，不然一切都无从谈起。谈起原型，那得先从对象说起，且让我们慢慢说起。")]),e._v(" "),n("p",[e._v("我们都知道，JavaScript 是一门基于对象的脚本语言，但是它却没有类的概念，所以 JavaScript 中的对象和基于类的语言（如 Java）中的对象有所不同。JavaScript 中的对象是无序属性的集合，其属性可以包含基本值，对象或者函数，听起来更像是键值对的集合，事实上也比较类似。有了对象，按理说得有继承，不然对象之间没有任何联系，也就真沦为键值对的集合了。那没有类的 JavaScript 是怎么实现继承的呢？")]),e._v(" "),n("p",[e._v("我们知道，在 JavaScript 中可以使用构造函数语法（通过 new 调用的函数通常被称为构造函数）来创建一个新的对象，像下面这样：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\n// 构造函数，无返回值\nfunction Person(name) {\n  this.name = name;\n}\n// 通过 new 新建一个对象\nvar person = new Person('Mike');\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("这和一般面向对象编程语言中创建对象（Java 或 C++）的语法很类似，只不过是一种简化的设计，"),n("code",[e._v("new")]),e._v(" 后面跟的不是类，而是构造函数。这里的构造函数可以看做是一种类型，就像面向对象编程语言中的类，但是这样创建的对象除了属性一样外，并没有其他的任何联系，对象之间无法共享属性和方法。每当我们新建一个对象时，都会方法和属性分配一块新的内存，这是极大的资源浪费。考虑到这一点，JavaScript 的设计者 Brendan Eich 决定为构造函数设置一个属性。这个属性指向一个对象，所有实例对象需要共享的属性和方法，都放在这个对象里面，那些不需要共享的属性和方法，就放在构造函数里面。实例对象一旦创建，将自动引用这个对象的属性和方法。也就是说，实例对象的属性和方法，分成两种，一种是本地的，不共享的，另一种是引用的，共享的。这个对象就是原型（prototype）对象，简称为原型。")]),e._v(" "),n("p",[e._v("我们创建的每个函数都有一个 prototype（原型）属性，这个属性是一个指针，指向一个对象，这个对象就是调用构造函数而创建的对象实例的原型。原型可以包含所有实例共享的属性和方法，也就是说只要是原型有的属性和方法，通过调用构造函数而生成的对象实例都会拥有这些属性和方法。看下面的代码：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\nfunction Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.age = '20';\nPerson.prototype.sayName = function() {\n  console.log(this.name);\n}\n\nvar person1 = new Person('Jack');\nvar person2 = new Person('Mike');\n\nperson1.sayName(); // Jack\nperson2.sayName(); // Mike\nconsole.log(person1.age); // 20\nconsole.log(person2.age); // 20\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br")])]),n("p",[e._v("这段代码中我们声明了一个 "),n("code",[e._v("Person")]),e._v(" 函数，并在这个函数的原型上添加了 "),n("code",[e._v("age")]),e._v(" 属性和 "),n("code",[e._v("sayName")]),e._v(" 方法，然后生成了两个对象实例 "),n("code",[e._v("person1")]),e._v(" 和 "),n("code",[e._v("person2")]),e._v("，这两个实例分别拥有自己的属性 "),n("code",[e._v("name")]),e._v(" 和原型的属性 "),n("code",[e._v("age")]),e._v(" 以及方法 "),n("code",[e._v("sayName")]),e._v("。所有的实例对象共享原型对象的属性和方法，那么看起来，原型对象就像是类，我们就可以用原型来实现继承了。")]),e._v(" "),n("h3",{attrs:{id:"_1-2-constructor-与-prototype"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-constructor-与-prototype"}},[e._v("#")]),e._v(" 1.2 constructor 与 [[Prototype]]")]),e._v(" "),n("p",[e._v("我们知道每个函数都有一个 prototype 属性，指向函数的原型，因此当我们拿到一个函数的时候，就可以确定函数的原型。反之，如果给我们一个函数的原型，我们怎么知道这个原型是属于哪个函数的呢？这就要说说原型的 constructor 属性了：")]),e._v(" "),n("blockquote",[n("p",[e._v("在默认情况下，所有原型对象都会自动获得一个 constructor （构造函数）属性，这个属性包含一个指向 prototype 属性所在函数的指针。")])]),e._v(" "),n("p",[e._v("也就是说每个原型都有都有一个 constructor 属性，指向了原型所在的函数，拿前面的例子来说 Person.prototype.constructor 指向 Person。下面是构造函数和原型的关系说明图：")]),e._v(" "),n("p",[n("img",{attrs:{src:"proto02.png",alt:""}})]),e._v(" "),n("p",[e._v("继续，让我们说说 "),n("code",[e._v("[[prototype]]")]),e._v("。")]),e._v(" "),n("p",[e._v("当我们调用构造函数创建一个新的实例（新的对象）之后，比如上面例子中的 "),n("code",[e._v("person1")]),e._v("，实例的内部会包含一个指针（内部属性），指向构造函数的原型。ECMA-262 第 5 版中管这个指针叫[[Prototype]]。我们可与更新函数和原型的关系图：")]),e._v(" "),n("p",[n("img",{attrs:{src:"proto03.png",alt:""}})]),e._v(" "),n("p",[e._v("不过在脚本中没有标准的方式访问 [[Prototype]] ， 但在 Firefox、Safari 和 Chrome 中可以通过 "),n("code",[e._v("__proto__")]),e._v("属性访问。而在其他实现中，这个属性对脚本则是完全不可见的。不过，要明确的真正重要的一点就是，这个连接存在于实例与构造函数的原型对象之间，而不是存在于实例与构造函数之间。")]),e._v(" "),n("p",[e._v("在 VSCode 中开启调试模式，我们可以看到这些关系：")]),e._v(" "),n("p",[n("img",{attrs:{src:"proto04.png",alt:""}})]),e._v(" "),n("p",[e._v("从上图中我们可以看到 "),n("code",[e._v("Person")]),e._v(" 的 "),n("code",[e._v("prototype")]),e._v(" 属性和 "),n("code",[e._v("person1")]),e._v(" 的 "),n("code",[e._v("__proto__")]),e._v(" 属性是完全一致的，"),n("code",[e._v("Person.prototype")]),e._v(" 包含了一个 "),n("code",[e._v("constructor")]),e._v(" 属性，指向了 "),n("code",[e._v("Person")]),e._v(" 函数。这些可以很好的印证我们上面所说的构造函数、原型、"),n("code",[e._v("constructor")]),e._v(" 以及 "),n("code",[e._v("__proto__")]),e._v(" 之间的关系。")]),e._v(" "),n("h3",{attrs:{id:"_1-3-对象实例与原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-对象实例与原型"}},[e._v("#")]),e._v(" 1.3 对象实例与原型")]),e._v(" "),n("p",[e._v("了解完构造函数，原型，对象实例之间的关系后，下面我们来深入探讨一下对象和原型之间的关系。")]),e._v(" "),n("h3",{attrs:{id:"_1-4-判断对象实例和原型之间的关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-判断对象实例和原型之间的关系"}},[e._v("#")]),e._v(" 1.4 判断对象实例和原型之间的关系")]),e._v(" "),n("p",[e._v("因为我们无法直接访问实例对象的 "),n("code",[e._v("__proto__")]),e._v(" 属性，所以当我们想要确定一个对象实例和某个原型之间是否存在关系时，可能会有些困难，好在我们有一些方法可以判断。")]),e._v(" "),n("p",[e._v("我们可以通过 "),n("code",[e._v("isPrototypeOf()")]),e._v(" 方法判断某个原型和对象实例是否存在关系，或者，我们也可以使用 ES5 新增的方法 "),n("code",[e._v("Object.getPrototypeOf()")]),e._v(" 获取一个对象实例 "),n("code",[e._v("__proto__")]),e._v(" 属性的值。看下面的例子：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    console.log(Person.prototype.isPrototypeOf(person1)); // true\n    console.log(Object.getPrototypeOf(person1) == Person.prototype); // true\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("h3",{attrs:{id:"_1-5-对象实例属性和方法的获取"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-对象实例属性和方法的获取"}},[e._v("#")]),e._v(" 1.5 对象实例属性和方法的获取")]),e._v(" "),n("p",[e._v("每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从对象实例本身开始。如果在实例对象中找到了具有给定名字的属性，则返回该属性的值。如果没有找到，则继续搜索 "),n("code",[e._v("__proto__")]),e._v(" 指针指向的原型对象，在原型对象中查找具有给定名字的属性，如果在原型对象中找到了这个属性，则返回该属性的值。如果还找不到，就会接着查找原型的原型，直到最顶层为止。这正是多个对象实例共享原型所保存的属性和方法的基本原理。")]),e._v(" "),n("p",[e._v("虽然可以通过对象实例访问保存在原型中的值，但却不能通过对象实例重写原型中的值。我们在实例中添加的一个属性，会屏蔽原型中的同名属性。另外，通过 "),n("code",[e._v("hasOwnProperty")]),e._v(" 方法能判断对象实例中是否存在某个属性（不能判断对象原型中是否存在该属性）。来看下面的例子：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    JavaScript\n    function Person(){ }\n\n    Person.prototype.name = 'Nicholas';\n    Person.prototype.age = 29;\n    Person.prototype.job = 'Software Engineer';\n    Person.prototype.sayName = function(){ console.log(this.name); };\n\n    var person1 = new Person();\n    var person2 = new Person();\n\n    // 注意，此处不能用 name，因为函数本身存在 name 属性\n    console.log(person1.hasOwnProperty('age')); // false\n    console.log(Person.hasOwnProperty('age')); // false\n    person1.name = 'Greg';\n    console.log(person1.hasOwnProperty('name')); // true\n    console.log(person1.name); //\"Greg\"——来自实例\n    console.log(person2.name); //\"Nicholas\"——来自原型\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br")])]),n("h3",{attrs:{id:"_1-6-in-操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-in-操作符"}},[e._v("#")]),e._v(" 1.6 in 操作符")]),e._v(" "),n("p",[e._v("有两种方式使用 in 操作符：")]),e._v(" "),n("ul",[n("li",[e._v("单独使用")])]),e._v(" "),n("blockquote",[n("p",[e._v("在单独使用时，in 操作符会在通过对象能够访问给定属性时返回 true，无论该属性存在于实例中还是原型中。")])]),e._v(" "),n("ul",[n("li",[e._v("for-in 循环中使用")])]),e._v(" "),n("blockquote",[n("p",[e._v("在使用 for-in 循环时，返回的是所有能够通过对象访问的、可枚举的（enumerated）属性，其中既包括存在于实例中的属性， 也包括存在于原型中的属性。如果需要获取所有的属性（包括不可枚举的属性），可以使用 Object.getOwnPropertyNames() 方法。")])]),e._v(" "),n("p",[e._v("看下面的例子：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    JavaScript\n    function Person(){\n    this.name = 'Mike';\n    }\n\n    Person.prototype.age = 29;\n    Person.prototype.job = 'Software Engineer';\n    Person.prototype.sayName = function(){ console.log(this.name); };\n\n    var person = new Person();\n\n    for(var item in person) {\n    console.log(item); // name age job sayName\n    }\n\n    console.log('name' in person); // true - 来自实例\n    console.log('age' in person); //  true - 来自原型\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br")])]),n("h3",{attrs:{id:"_1-7-原型的动态性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-原型的动态性"}},[e._v("#")]),e._v(" 1.7 原型的动态性")]),e._v(" "),n("p",[e._v("由于在对象中查找属性的过程是一次搜索，而实例与原型之间的连接只不过是一个指针，而非一个副本，因此我们对原型对象所做的任何修改都能够立即从实例上反映出来——即使是先创建了实例后修改原型也照样如此：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\n    JavaScript\n    var person = new Person();\n\n    Person.prototype.sayHi = function(){ console.log("hi"); };\n    person.sayHi(); // "hi"\n\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("上面的代码中，先创建了 "),n("code",[e._v("Person")]),e._v(" 的一个实例，并将其保存在 "),n("code",[e._v("person")]),e._v(" 中。然后，下一条语句在 "),n("code",[e._v("Person.prototype")]),e._v(" 中添加了一个方法 "),n("code",[e._v("sayHi()")]),e._v("。即使 "),n("code",[e._v("person")]),e._v(" 实例是在添加新方法之前创建的，但它仍然可以访问这个新方法。在调用这个方法时，首先会查找 "),n("code",[e._v("person")]),e._v(" 实例中是否有这个方法，发现没有，然后到 "),n("code",[e._v("person")]),e._v(" 的原型对象中查找，原型中存在这个方法，查找结束。；")]),e._v(" "),n("p",[e._v("但是下面这种代码所得到的结果就完全不一样了：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('    JavaScript\n    function Person() {}\n\n    var person = new Person();\n\n    Person.prototype = {\n    constructor: Person,\n    name: "Nicholas",\n    age: 29,\n    job: "Software Engineer",\n    sayName: function () {\n        console.log(this.name);\n    }\n    };\n\n    person.sayName(); // error\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("p",[e._v("仔细观察上面的代码，我们直接用对象字面量语法给 "),n("code",[e._v("Person.prototype")]),e._v(" 赋值，这似乎没有什么问题。但是我们要知道字面量语法会生成一个新的对象，也就是说这里的 "),n("code",[e._v("Person.prototype")]),e._v(" 是一个新的对象，和 "),n("code",[e._v("person")]),e._v(" 的 "),n("code",[e._v("__proto__")]),e._v(" 属性不再有任何关系了。此时，我们再尝试调用 "),n("code",[e._v("sayName")]),e._v(" 方法就会报错，因为 "),n("code",[e._v("person")]),e._v(" 的 "),n("code",[e._v("__proto__")]),e._v(" 属性指向的还是原来的原型对象，而原来的原型对象上并没有 "),n("code",[e._v("sayName")]),e._v(" 方法，所以就会报错。")]),e._v(" "),n("h2",{attrs:{id:"二、原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、原型链"}},[e._v("#")]),e._v(" 二、原型链")]),e._v(" "),n("h3",{attrs:{id:"_2-1-原型的原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-原型的原型"}},[e._v("#")]),e._v(" 2.1 原型的原型")]),e._v(" "),n("p",[e._v("在前面的例子，我们是直接在原型上添加属性和方法，或者用一个新的对象赋值给原型，那么如果我们让原型对象等于另一个类型的实例，结果会怎样呢？")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("JavaScript\nfunction Person() {\n  this.age = '20';\n}\n\nPerson.prototype.weight = '120';\n\nfunction Engineer() {\n  this.work = 'Front-End';\n}\n\nEngineer.prototype = new Person();\n\nEngineer.prototype.getAge = function() {\n  console.log(this.age);\n}\n\nvar person = new Person();\nvar engineer = new Engineer();\n\nconsole.log(person.age); // 20\nengineer.getAge(); // 20\nconsole.log(engineer.weight); // 120\nconsole.log(Engineer.prototype.__proto__ == Person.prototype); // true\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br")])]),n("p",[e._v("在上面代码中，有两个构造函数 "),n("code",[e._v("Person")]),e._v(" 和 "),n("code",[e._v("Engineer")]),e._v("，可以看做是两个类型，"),n("code",[e._v("Engineer")]),e._v(" 的原型是 "),n("code",[e._v("Person")]),e._v(" 的一个实例，"),n("strong",[e._v("也就是说 "),n("code",[e._v("Engineer")]),e._v(" 的原型指向了 "),n("code",[e._v("Person")]),e._v(" 的原型")]),e._v("（注意上面的最后一行代码）。然后我们分别新建一个 "),n("code",[e._v("Person")]),e._v(" 和 "),n("code",[e._v("Engineer")]),e._v(" 的实例对象，可以看到 "),n("code",[e._v("engineer")]),e._v(" 实例对象能够访问到 "),n("code",[e._v("Person")]),e._v(" 的 "),n("code",[e._v("age")]),e._v(" 和 "),n("code",[e._v("weight")]),e._v(" 属性，这很好理解："),n("code",[e._v("Engineer")]),e._v(" 的原型是 "),n("code",[e._v("Person")]),e._v(" 的实例对象，"),n("code",[e._v("Person")]),e._v(" 的实例对象包含了 "),n("code",[e._v("age")]),e._v(" 属性，而 "),n("code",[e._v("weight")]),e._v(" 属性是 "),n("code",[e._v("Person")]),e._v(" 原型对象的属性，"),n("code",[e._v("Person")]),e._v(" 的实例对象自然可以访问原型中的属性，同理，"),n("code",[e._v("Engineer")]),e._v(" 的实例对象 "),n("code",[e._v("engineer")]),e._v(" 也能访问 "),n("code",[e._v("Engineer")]),e._v(" 原型上的属性，间接的也能访问 "),n("code",[e._v("Person")]),e._v(" 原型的属性。")]),e._v(" "),n("p",[e._v("看起来关系有些复杂，不要紧，我们用一张图片来解释这些关系：")]),e._v(" "),n("p",[n("img",{attrs:{src:"proto05.png",alt:""}})]),e._v(" "),n("p",[e._v("是不是一下就很清楚了，顺着图中红色的线，"),n("code",[e._v("engineer")]),e._v(" 实例对象可以顺利的获取 "),n("code",[e._v("Person")]),e._v(" 实例的属性以及 "),n("code",[e._v("Person")]),e._v(" 原型的属性。至此，已经铺垫的差不多了，我们理解了原型的原型之后，也就很容易理解原型链了。")]),e._v(" "),n("h3",{attrs:{id:"_2-2-原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-原型链"}},[e._v("#")]),e._v(" 2.2 原型链")]),e._v(" "),n("p",[e._v("原型链其实不难理解，上图中的红色线组成的链就可以称之为原型链，只不过这是一个不完整的原型链。我们可以这样定义原型链：")]),e._v(" "),n("blockquote",[n("p",[e._v("原型对象可以包含一个指向另一个原型（原型 2）的指针，相应地，另一个原型（原型 2）中也可以包含着一个指向对应构造函数（原型 2 的构造函数）的指针。假如另一个原型（原型 2）又是另一个类型（原型 3 的构造函数）的实例，那么上述关系依然成立，如此层层递进，就构成了实例与原型的链条。这就是所谓原型链的基本概念。")])]),e._v(" "),n("p",[e._v("结合上面的图，这个概念不难理解。上面的图中只有两个原型，那么当有更多的原型之后，这个红色的线理论上可以无限延伸，也就构成了原型链。")]),e._v(" "),n("p",[e._v("通过实现原型链，本质上扩展了前面提到过的原型搜索机制：当以读取模式访问一个实例的属性时，首先会在实例中搜索该属性。如果没有找到该属性，则会继续搜索实例的原型。在通过原型链实现继承的情况下，搜索过程就得以沿着原型链继续向上。在找不到属性或方法的情况下，搜索过程总是要一环一环地前行到原型链末端才会停下来。")]),e._v(" "),n("p",[e._v("那么原型链的末端又是什么呢？我们要知道，所有函数的 "),n("code",[e._v("默认原型")]),e._v(" 都是 Object 的实例，因此默认原型都会包含一个内部指针，指向 "),n("code",[e._v("Object.prototype")]),e._v("。我们可以在上面代码的尾部加上一行代码进行验证：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("JavaScript\nconsole.log(Person.prototype.__proto__ == Object.prototype); // true\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("那 "),n("code",[e._v("Object.prototype")]),e._v(" 的原型又是什么呢，不可能没有终点啊？聪明的小伙伴可能已经猜到了，没错，就是 "),n("code",[e._v("null")]),e._v("，null 表示此处不应该有值，也就是终点了。我们可以在 Chrome 的控制台或 Node 中验证一下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("JavaScript\nconsole.log(Object.prototype.__proto__); // null\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("h3",{attrs:{id:"_2-3-实例方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-实例方法"}},[e._v("#")]),e._v(" 2.3 实例方法")]),e._v(" "),n("p",[e._v("Constructor：保存着用于创建当前对象的函数。")]),e._v(" "),n("p",[e._v("hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名（propertyName）必须以字符串形式指定(例如：o.hasOwnProperty(“name”))")]),e._v(" "),n("p",[e._v("isPrototypeOf(object)：用于检查传入的对象是否是另一个对象的原型。")]),e._v(" "),n("p",[e._v("toLocaleString() ：返回对象的字符串表示，该字符串与执行环境的地区对应。")]),e._v(" "),n("p",[e._v("toString() ：返回对象的字符串表示。")]),e._v(" "),n("p",[e._v("valueOf() ：返回对象的字符串、数值或布尔值表示。通常与 toString() 方法的返回值相同。")]),e._v(" "),n("p",[e._v("instanceof 用来判断一个构造函数的 prototype 属性所指向的对象是否存在另外一个要检测对象的原型链上")]),e._v(" "),n("h2",{attrs:{id:"三、完整的原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、完整的原型链"}},[e._v("#")]),e._v(" 三、完整的原型链")]),e._v(" "),n("p",[n("img",{attrs:{src:"proto01.jpg",alt:"images"}})]),e._v(" "),n("h2",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),n("ul",[n("li",[e._v("《JavaScript 高级程序设计》")]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/2",target:"_blank",rel:"noopener noreferrer"}},[e._v("Javascript 深入之从原型到原型链"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/5a0a5dc4f265da430b7abffb?utm_source=gold_browser_extension",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入理解 JavaScript 之从原型到原型链"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://segmentfault.com/a/1190000011880268",target:"_blank",rel:"noopener noreferrer"}},[e._v("原型图解"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/1UDILezroK5wrcK-Z5bHOg",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入理解 JavaScript 原型"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/1F0cJus31Pjq0YXo-rCkwQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("【THE LAST TIME】一文吃透所有 JS 原型相关知识点"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://muyiy.cn/blog/5/5.1.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("重新认识构造函数、原型和原型链"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"联系作者"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#联系作者"}},[e._v("#")]),e._v(" 联系作者")]),e._v(" "),n("div",{attrs:{align:"center"}},[n("p",[e._v("\n        平凡世界，贵在坚持。\n    ")]),e._v(" "),n("img",{attrs:{src:e.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);s.default=r.exports}}]);