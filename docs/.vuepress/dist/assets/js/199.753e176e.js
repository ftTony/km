(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{421:function(_,a,t){"use strict";t.r(a);var v=t(13),r=Object(v.a)({},(function(){var _=this,a=_.$createElement,t=_._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"node-js-中的消息队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-js-中的消息队列"}},[_._v("#")]),_._v(" node.js 中的消息队列")]),_._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[_._v("#")]),_._v(" 前言")]),_._v(" "),t("p",[_._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),_._v(" "),t("h2",{attrs:{id:"内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[_._v("#")]),_._v(" 内容")]),_._v(" "),t("ul",[t("li",[_._v("什么是消息队列")]),_._v(" "),t("li",[_._v("为什么要使用消息队列")]),_._v(" "),t("li",[_._v("消息队列应用场景")]),_._v(" "),t("li",[_._v("主流消息中间件")]),_._v(" "),t("li",[_._v("安装 RabbitMQ")])]),_._v(" "),t("h3",{attrs:{id:"一、什么是消息队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是消息队列"}},[_._v("#")]),_._v(" 一、什么是消息队列")]),_._v(" "),t("p",[_._v("可以把它分成两个词"),t("code",[_._v("消息")]),_._v("和"),t("code",[_._v("队列")]),_._v("。当一大批客户端同时产生大量的网络请求（"),t("code",[_._v("消息")]),_._v("）时候，服务器承受能力肯定是有一个限制的。这时候要是有一个容器，先让这些消息排队就好了，通过"),t("code",[_._v("有队列属性的容器")]),_._v("排队(先进先出)，把消息再传到我们服务器，压力减小了好多，这个很棒的"),t("code",[_._v("容器")]),_._v("就是消息队列")]),_._v(" "),t("p",[_._v("这段理解中包含两个概念：客户端->"),t("code",[_._v("生产者")]),_._v("服务器->"),t("code",[_._v("消费者")]),_._v("当有"),t("code",[_._v("消息队列")]),_._v("出现，"),t("code",[_._v("生产者")]),_._v("和"),t("code",[_._v("消费者")]),_._v("是不可少的两个概念，上面的理解是"),t("code",[_._v("多个生产者")]),_._v("对象"),t("code",[_._v("一个消费者")]),_._v("，当然现实开发中还有"),t("code",[_._v("许多消费者")]),_._v("的情况。")]),_._v(" "),t("h3",{attrs:{id:"二、为什么要使用消息队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、为什么要使用消息队列"}},[_._v("#")]),_._v(" 二、为什么要使用消息队列")]),_._v(" "),t("p",[_._v("近两年谈的很多一个概念"),t("strong",[_._v("微服务")]),_._v("，在一个大型业务系统架构中，会被拆分成很多小的业务系统，这些业务系统之间如何建立通信呢？大家熟悉的 HTTP、RPC 可以实现不同系统、不同语言之间的通信，除了这些往往还会使用消息队列（RabbitMQ、ActiveMQ、Kafafa 等）将这些系统链接起来，达到各系统间的解耦。")]),_._v(" "),t("p",[_._v("消息队列有如下优势：")]),_._v(" "),t("ol",[t("li",[t("strong",[_._v("应用解耦")]),_._v("：消息队列可以使用消费者和生产者直接互不干涉，互不影响，只需要把消息发送到队列即可，而且可独立的扩展或修改两边的处理过程，只要能确保它们遵守同样的接口约定，可以生产者用 Node.js 实现，消费者用 python 实现。")]),_._v(" "),t("li",[t("strong",[_._v("灵活性和峰值处理能力")]),_._v("：当客户端访问量突然剧增，对服务器的访问已经超过服务所能处理的最大峰值，甚至导致服务器超时负载崩溃，使用消息队列可以解决这个问题，可以通过"),t("code",[_._v("控制消息者的处理速度")]),_._v("和"),t("code",[_._v("生产者可进入消息队列的数量")]),_._v("等来避免峰值问题")]),_._v(" "),t("li",[t("strong",[_._v("排序保证")]),_._v("：消息队列可以控制数据处理的顺序，因为消息队列本身使用的是队列这个数据结构，"),t("code",[_._v("FIFO")]),_._v("(先进先出)，在一些场景数据处理顺序很重要，比如商品下单顺序等。")]),_._v(" "),t("li",[t("strong",[_._v("异步通信")]),_._v("：消息队列中的有些消息，并不需要立即处理，消息队列提供了异步处理机制，可以把消息放在队列中并不立即处理，需要的时候处理，或者异步慢慢处理，一些不重要的发送短信和邮箱功能可以使用。")]),_._v(" "),t("li",[t("strong",[_._v("可扩展性")]),_._v("：消息队列可以做到"),t("code",[_._v("解耦")]),_._v("，如果我们想增强消息入队和出队的处理频率，很简单，并不需要改变代码中任何内容，可以直接对消息队列修改一些配置即可，比如我们想限制每次发送给消费者的消息条数等。")])]),_._v(" "),t("h3",{attrs:{id:"三、消息队列应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、消息队列应用场景"}},[_._v("#")]),_._v(" 三、消息队列应用场景")]),_._v(" "),t("ul",[t("li",[_._v("双十一商品秒杀/抢票功能实现")]),_._v(" "),t("li",[_._v("积分兑换(积分可用于多平台)")]),_._v(" "),t("li",[_._v("发送邮件，用户大数据分析等 同步变异步功能实现")])]),_._v(" "),t("h4",{attrs:{id:"_3-1-双十一商品秒杀-抢票功能实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-双十一商品秒杀-抢票功能实现"}},[_._v("#")]),_._v(" 3.1 双十一商品秒杀/抢票功能实现")]),_._v(" "),t("h4",{attrs:{id:"_3-2-积分兑换-积分可用于多平台"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-积分兑换-积分可用于多平台"}},[_._v("#")]),_._v(" 3.2 积分兑换(积分可用于多平台)")]),_._v(" "),t("h4",{attrs:{id:"_3-3-发送邮件，用户大数据分析等-同步变异步功能实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-发送邮件，用户大数据分析等-同步变异步功能实现"}},[_._v("#")]),_._v(" 3.3 发送邮件，用户大数据分析等 同步变异步功能实现")]),_._v(" "),t("ul",[t("li",[_._v("用户注册")]),_._v(" "),t("li",[_._v("用户注册选择几个兴趣标签，这时候需要根据用户的属性，用户分析，计算出推荐内容")]),_._v(" "),t("li",[_._v("注册后可能需要发送邮件给用户")]),_._v(" "),t("li",[_._v("发送给用户一个包含操作指南的系统通知")])]),_._v(" "),t("h3",{attrs:{id:"四、主流消息中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、主流消息中间件"}},[_._v("#")]),_._v(" 四、主流消息中间件")]),_._v(" "),t("ul",[t("li",[_._v("RabbitMQ")]),_._v(" "),t("li",[_._v("RocketMQ")]),_._v(" "),t("li",[_._v("ActiveMQ")]),_._v(" "),t("li",[_._v("Kafka")])]),_._v(" "),t("h4",{attrs:{id:"_4-1-rabbitmq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-rabbitmq"}},[_._v("#")]),_._v(" 4.1 RabbitMQ")]),_._v(" "),t("p",[_._v("一个由 erlang 语言开发基于 AMQP 协议的开源消息队列系统。能保证消息的可靠性、稳定性、安全性。")]),_._v(" "),t("h4",{attrs:{id:"_4-2-rocketmq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-rocketmq"}},[_._v("#")]),_._v(" 4.2 RocketMQ")]),_._v(" "),t("p",[_._v("阿里开源的消息中间件，是一款低延迟、高可靠、可伸缩、易于使用的消息中间件，思路起源于 kafka。最大的问题商业版收费，有功能不开放。")]),_._v(" "),t("h4",{attrs:{id:"_4-3-activemq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-activemq"}},[_._v("#")]),_._v(" 4.3 ActiveMQ")]),_._v(" "),t("p",[_._v("Apache 出品，早起很流行主要应用中小企业，面对大量并发场景会有阻塞、消息堆积问题。")]),_._v(" "),t("h4",{attrs:{id:"_4-4-kafka"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-kafka"}},[_._v("#")]),_._v(" 4.4 Kafka")]),_._v(" "),t("p",[_._v("是由 Apache 软件基金会开发的一个开源流处理平台，由 Scala 和 Java 编写，是一种高吞吐量的分布式发布订阅消息系统，支持单机每秒百万并发。最开始目的主要用于套数据方向日志收集、传输。0.8 版本开始支持复制，不支持事物，因此对消息的重复、丢失、错误没有严格的要求。")]),_._v(" "),t("blockquote",[t("p",[_._v("说明：本文主要以 RabbitMQ 讲解，较为常见。")])]),_._v(" "),t("h3",{attrs:{id:"五、安装-rabbitmq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、安装-rabbitmq"}},[_._v("#")]),_._v(" 五、安装 RabbitMQ")]),_._v(" "),t("h3",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[_._v("#")]),_._v(" 参考资料")]),_._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://www.inode.club/node/queue.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("消息队列助- Node.js 实践篇"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://www.nodejs.red/#/microservice/rabbitmq-base",target:"_blank",rel:"noopener noreferrer"}},[_._v("消息中间件 RabbitMQ 入门篇"),t("OutboundLink")],1)])]),_._v(" "),t("h2",{attrs:{id:"联系作者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联系作者"}},[_._v("#")]),_._v(" 联系作者")]),_._v(" "),t("div",{attrs:{align:"center"}},[t("p",[_._v("\n        平凡世界，贵在坚持。\n    ")]),_._v(" "),t("img",{attrs:{src:_.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);a.default=r.exports}}]);