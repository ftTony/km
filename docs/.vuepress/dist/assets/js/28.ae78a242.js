(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{257:function(s,n,a){"use strict";a.r(n);var t=a(4),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图","aria-hidden":"true"}},[s._v("#")]),s._v(" 图")]),s._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),s._v(" "),a("h2",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[s._v("#")]),s._v(" 内容")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5"}},[s._v("图的概念")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8C%E3%80%81%E5%9B%BE%E7%9A%84%E7%9B%B8%E5%85%B3%E6%9C%AF%E8%AF%AD"}},[s._v("图的相关术语")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA"}},[s._v("图的表示")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9B%9B%E3%80%81%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86"}},[s._v("图的遍历")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%94%E3%80%81%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84"}},[s._v("最短路径")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%85%AD%E3%80%81%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91"}},[s._v("最小生成树")])])]),s._v(" "),a("h3",{attrs:{id:"一、图的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、图的概念","aria-hidden":"true"}},[s._v("#")]),s._v(" 一、图的概念")]),s._v(" "),a("p",[s._v("图是由点和线组成的，图中的点叫做顶点，点与点之间的连线叫做边")]),s._v(" "),a("h3",{attrs:{id:"二、图的相关术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、图的相关术语","aria-hidden":"true"}},[s._v("#")]),s._v(" 二、图的相关术语")]),s._v(" "),a("p",[s._v("图是网络结构的抽象模型。图是一组由"),a("strong",[s._v("边")]),s._v("连接的"),a("strong",[s._v("节点")])]),s._v(" "),a("h4",{attrs:{id:"_2-1-有向图和无向图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-有向图和无向图","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.1 有向图和无向图")]),s._v(" "),a("p",[s._v("图分为有向图和无向图，无向图就是没有方向，有向图是有方向。")]),s._v(" "),a("p",[s._v("图还有度的概念，什么叫度呢？ 就是一个顶点对应有多少条边。度又分为出度和入度。入度表示，有多少条指向该顶点，出度则是恰恰相反。")]),s._v(" "),a("p",[s._v("图还有权重的概念。权重可以理解为两个顶点之间的关系亲密度。")]),s._v(" "),a("h3",{attrs:{id:"三、图的表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、图的表示","aria-hidden":"true"}},[s._v("#")]),s._v(" 三、图的表示")]),s._v(" "),a("p",[s._v("从数据结构的角度来说，我们有多种方式来表示图。图的正确表示法取决于待解决的问题和图的类型。")]),s._v(" "),a("p",[s._v("图的表示主要分为：邻接矩阵、邻接表")]),s._v(" "),a("h4",{attrs:{id:"_3-1-邻接矩阵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-邻接矩阵","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.1 邻接矩阵")]),s._v(" "),a("p",[s._v("邻接矩阵存储方式是用两个数组表示图。一个一维的数组存储图中顶点信息，一个二维数组存储图中的边或弧的信息。")]),s._v(" "),a("ul",[a("li",[s._v("在 n 个顶点的图需要有一个 "),a("code",[s._v("n*n")]),s._v(" 大小矩阵")]),s._v(" "),a("li",[s._v("在一个无权图中，矩阵坐标中每个位置值为 1 代表两个点是相连的，0 表示两点是不相连的")]),s._v(" "),a("li",[s._v("在一个有权图中，矩阵坐标中每个位置值代表该两点之间的权重，0 表示两点不相连")]),s._v(" "),a("li",[s._v("在无向图中，邻接矩阵关于对角线相等")])]),s._v(" "),a("p",[s._v("无权无向图表示如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"graphs01.jpg",alt:"images"}})]),s._v(" "),a("p",[s._v("有向图和带权重表示如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"graphs02.jpg",alt:"images"}})]),s._v(" "),a("h4",{attrs:{id:"_3-2-邻接表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-邻接表","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.2 邻接表")]),s._v(" "),a("ul",[a("li",[s._v("对于每个点，存储着一个链表，用来指向所有与该点直接相连的点")]),s._v(" "),a("li",[s._v("对于有权图来说，链表中元素值对应着权重")])]),s._v(" "),a("h4",{attrs:{id:"_3-3-邻接矩阵和链表对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-邻接矩阵和链表对比","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.3 邻接矩阵和链表对比")]),s._v(" "),a("ol",[a("li",[s._v("邻接矩阵由于没有相连的边也占有空间，因此存在浪费空间的问题，而邻接链表则比较合理地利用空间")]),s._v(" "),a("li",[s._v("邻接链表比较耗时，牺牲很大的时间来查找，因此比较耗时，而邻接矩阵法相比邻接链表法来说，时间复杂度低。")])]),s._v(" "),a("p",[a("strong",[s._v("ES5 代码实现")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Graph(){\n    var vertices = [];\n    var adjList = new Dictionary();\n\n    this.addVertex = function(v){\n        vertices.push(v);\n        adjList.set(v,[]);\n    }\n\n    this.addEdge = function(v,w){\n        adjList.get(v).push(w);\n        adjList.get(w).push(v);\n    }\n\n    this.toString = function(){\n        var s = '';\n        for(var i=0; i<vertices.length;i++){\n            s +=vertices[i]+' -> ';\n            var neighbors = adjList.get(vertices[i]);\n            for(var j=0;j<neighbors.length;j++){\n                s+=neighbors[j]+ ' ';\n            }\n            s+='\\n';\n        }\n        return s;\n    };\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[a("strong",[s._v("ES6 代码实现")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Graph {\n    constructor(isDirected = false) {\n        this.isDirected = isDirected\n        this.vertices = []\n        this.adjList = new Dictionary()\n    }\n    addVertex(v) {\n        if (!this.vertices.includes(v)) {\n            this.vertices.push(v)\n            this.adjList.set(v, [])\n        }\n    }\n    addEdge(a, b) {\n        if (!this.adjList.get(a)) {\n            this.addVertex(a)\n        }\n        if (!this.adjList.get(b)) {\n            this.addVertex(b)\n        }\n        this.adjList.get(a).push(b)\n        if (this.isDirected !== true) {\n            this.adjList.get(b).push(a)\n        }\n    }\n    getVertices() {\n        return this.vertices\n    }\n    getAdjList() {\n        return this.adjList\n    }\n    toString() {\n        let s = ''\n        for (let i = 0; i < this.vertices.length; i++) {\n            s += `${this.vertices[i]}->`\n            const neighbors = this.adjList.get(this.vertices[i])\n            for (let j = 0; j < neighbors.length; j++) {\n                s += `${neighbors[j]}`\n            }\n            s += '\\n';\n        }\n        return s\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br")])]),a("h3",{attrs:{id:"四、图的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、图的遍历","aria-hidden":"true"}},[s._v("#")]),s._v(" 四、图的遍历")]),s._v(" "),a("p",[s._v("有两种算法可以对图进行遍历："),a("strong",[s._v("广度优先搜索")]),s._v(" 和 "),a("strong",[s._v("深度优先搜索")]),s._v("。图遍历可以用来寻找特定的顶点或寻找两个顶点之间的路径，检查图是否连通，检查图是否含有环。")]),s._v(" "),a("p",[a("strong",[s._v("图遍历算法")]),s._v("的思想是必须追踪每个第一次访问的节点，并且追踪有哪些节点还没有被完全探 索。对于两种图遍历算法，都需要明确指出第一个被访问的顶点。")]),s._v(" "),a("p",[s._v("广度优先搜索算法和深度优先搜索算法基本上是相同的，只有一点不同，那就是待访问顶点 列表的数据结构，如下表所示：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("算法")]),s._v(" "),a("th",[s._v("数据结构")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("深度优先搜索")]),s._v(" "),a("td",[s._v("栈")]),s._v(" "),a("td",[s._v("将顶点存入栈，顶点是沿着路径被探索的，存在新的相邻顶点就去访问")])]),s._v(" "),a("tr",[a("td",[s._v("广度优先搜索")]),s._v(" "),a("td",[s._v("队列")]),s._v(" "),a("td",[s._v("将顶点存入队列，最先入队列的顶点先被探索")])])])]),s._v(" "),a("h4",{attrs:{id:"_4-1-广度遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-广度遍历","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.1 广度遍历")]),s._v(" "),a("p",[s._v("广度优先搜索算法会从指定的第一个顶点开始遍历图，先访问其所有的邻点（相邻顶点），就像一次访问图的一层。")]),s._v(" "),a("p",[s._v("代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const Colors = {\n  WHITE: 0,\n  GREY: 1,\n  BLACK: 2\n};\n\nvar initializeCodor = function(){\n    var color = [];\n    for(var i =0;i<vertices.length;i++){\n        color[vertices[i]] = 'white';\n    }\n    return color;\n};\n\nconst BFS = (graph, startVertex) => {\n  const vertices = graph.getVertices();\n  const adjList = graph.getAdjList();\n  const color = initializeColor(vertices);\n  const queue = new Queue();\n  const distances = {};\n  const predecessors = {};\n  queue.enqueue(startVertex);\n  for (let i = 0; i < vertices.length; i++) {\n    distances[vertices[i]] = 0;\n    predecessors[vertices[i]] = null;\n  }\n  while (!queue.isEmpty()) {\n    const u = queue.dequeue();\n    const neighbors = adjList.get(u);\n    color[u] = Colors.GREY;\n    for (let i = 0; i < neighbors.length; i++) {\n      const w = neighbors[i];\n      if (color[w] === Colors.WHITE) {\n        color[w] = Colors.GREY;\n        distances[w] = distances[u] + 1;\n        predecessors[w] = u;\n        queue.enqueue(w);\n      }\n    }\n    color[u] = Colors.BLACK;\n  }\n  return {\n    distances,\n    predecessors\n  };\n};\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br")])]),a("h4",{attrs:{id:"_4-2-深度遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-深度遍历","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.2 深度遍历")]),s._v(" "),a("p",[s._v("深度优先搜索算法将会从第一个指定的顶点开始遍历图，沿着路径走到这条路径最后一个顶点被访问了，接着原路回退并探索下一条路径。")]),s._v(" "),a("p",[s._v("代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const Colors = {\n  WHITE: 0,\n  GREY: 1,\n  BLACK: 2\n};\n\nvar initializeCodor = function(){\n    var color = [];\n    for(var i =0;i<vertices.length;i++){\n        color[vertices[i]] = 'white';\n    }\n    return color;\n};\n\n\nconst DFS = gragh => {\n    const vertices = gragh.getVertices()\n    const adjList = gragh.getAdjList()\n    const color = initializeColor(vertices)\n    const d = {}\n    const f = {}\n    const p = {}\n    const time = {\n        count: 0\n    }\n    for (let i = 0; i < vertices.length; i++) {\n        f[vertices[i]] = 0\n        d[vertices[i]] = 0\n        p[vertices[i]] = null\n\n    }\n    for (let i = 0; i < vertices.length; i++) {\n        if (color[vertices[i]] === Colors.WHITE) {\n            DFSVisit(vertices[i], color, d, f, p, time, adjList);\n        }\n    }\n    return {\n        discovery: d,\n        finished: f,\n        predecessors: p\n    }\n}\n\nconst DFSVisit = (v, color, d, f, p, time, adjList) => {\n    color[u] = Colors.GREY\n    d[u] = ++time.count\n    const neighbors = adjList.get(u)\n    for (let i = 0; i < neighbors.length; i++) {\n        const w = neighbors[i]\n        if (color[w] === Colors.WHITE) {\n            p[w] = u\n            DFSVisit(w, color, d, f, p, time, adjList)\n        }\n    }\n    color[u] = Colors.BLACK\n    f[u] = ++time.count\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br")])]),a("h4",{attrs:{id:"_4-3-性能分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-性能分析","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.3 性能分析")]),s._v(" "),a("p",[s._v("对于广度优先搜索来说，最坏的情况下，我们要遍历所有的顶点（n）和点（k），时间复杂度 O（n+k）。如果是一全通图（顶点之间都有两条连线）的话，k 是大于 n 的，时间复杂度可以写为 O(k)。")]),s._v(" "),a("p",[s._v("其中搜索遍历的同时，我们需要借助几个数组空间用来存储顶点，空间复杂度为 O(n)。")]),s._v(" "),a("p",[s._v("深度优先遍历在最坏的情况下会重复遍历两次边，时间复杂度为 O(k)。")]),s._v(" "),a("p",[s._v("空间复杂度主要是递归调用需要额外的栈空间，栈空间的大小和顶点 n 成正比关系，所以空间复杂度为 O(n)。")]),s._v(" "),a("h3",{attrs:{id:"五、最短路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、最短路径","aria-hidden":"true"}},[s._v("#")]),s._v(" 五、最短路径")]),s._v(" "),a("p",[s._v("最短路径非常著名的两个算法分别是 Dijkstra 算法和 Floyd-Warshall 算法")]),s._v(" "),a("h4",{attrs:{id:"_5-1-dijkstra-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-dijkstra-算法","aria-hidden":"true"}},[s._v("#")]),s._v(" 5.1 Dijkstra 算法")]),s._v(" "),a("p",[a("code",[s._v("Dijkstra")]),s._v("(迪杰斯特拉)算法是一种永无休止从单个源到所有其他源的最短路径的贪心算法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n * 最短路径\n */\nconst INF = Number.MAX_SAFE_INTEGER\nconst minDistance = (dist, visited) => {\n    let min = INF\n    let minIndex = -1\n    for (let v = 0; v < dist.length; v++) {\n        if (visited[v] === false && dist[v] <= min) {\n            min = dist[v]\n            minIndex = v\n        }\n    }\n    return minIndex\n}\n\nconst dijkstra = (graph, src) => {\n    const dist = [];\n    const visited = [];\n    const {\n        length\n    } = graph\n    for (let i = 0; i < length; i++) {\n        dist[i] = INF\n        visited[i] = false\n    }\n    dist[src] = 0\n    for (let i = 0; i < length - 1; i++) {\n        const u = minDistance(dist, visited)\n        visited[u] = true\n        for (let v = 0; v < length; v++) {\n            if (!visited[v] && graph[u][v] !== 0 && dist[u] !== INF && dist[u] + graph[u][v] < dist[v]) {\n                dist[v] = dist[u] + graph[u][v]\n            }\n        }\n    }\n    return dist\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("h4",{attrs:{id:"_5-2-floyd-warshall-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-floyd-warshall-算法","aria-hidden":"true"}},[s._v("#")]),s._v(" 5.2 Floyd-Warshall 算法")]),s._v(" "),a("p",[a("code",[s._v("Floyd-Warshall")]),s._v("算法是一种计算图中所有最短路径的动态规划算法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const floydWarshall = graph => {\n    const dist = [];\n    const {\n        length\n    } = graph\n    for (let i = 0; i < length; i++) {\n        dist[i] = []\n        for (let j = 0; j < length; j++) {\n            if (i === j) {\n                dist[i][j] = 0\n            } else if (!isFinite(graph[i][j])) {\n                dist[i][j] = Infinity\n            } else {\n                dist[i][j] = graph[i][j]\n            }\n        }\n    }\n    for (let k = 0; k < length; k++) {\n        for (let i = 0; i < length; i++) {\n            for (let j = 0; j < length; j++) {\n                if (dist[i][k] + dist[k][j] < dist[i][j]) {\n                    dist[i][j] = dist[i][k] + dist[k][j]\n                }\n            }\n        }\n    }\n    return dist\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("p",[s._v("参考资料："),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/65340385",target:"_blank",rel:"noopener noreferrer"}},[s._v("漫画：图的 “最短路径” 问题"),a("OutboundLink")],1)]),s._v(" "),a("h3",{attrs:{id:"六、最小生成树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、最小生成树","aria-hidden":"true"}},[s._v("#")]),s._v(" 六、最小生成树")]),s._v(" "),a("p",[s._v("两种主要的求最小生成树的算法:Prim 算法和 Kruskal 算法。")]),s._v(" "),a("h4",{attrs:{id:"_6-1-prim-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-prim-算法","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.1 Prim 算法")]),s._v(" "),a("p",[a("code",[s._v("Prim")]),s._v(" 算法是一种求解加权无向通图的 MST 问题的贪心算法。")]),s._v(" "),a("p",[s._v("代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const INF = Number.MAX_SAFE_INTEGER\nconst minKey = (graph, key, visited) => {\n    let min = INF\n    let minIndex = 0\n    for (let v = 0; v < graph.length; v++) {\n        if (visited[v] === false && key[v] < min) {\n            min = key[v]\n            minIndex = v\n        }\n    }\n    return minIndex\n}\n\nconst prim = graph => {\n    const parent = []\n    const key = []\n    const visited = []\n    const {\n        length\n    } = graph\n    for (let i = 0; i < length; i++) {\n        key[i] = INF\n        visited[i] = false\n    }\n    key[0] = 0\n    parent[0] = -1\n    for (let i = 0; i < length - 1; i++) {\n        const u = minKey(graph, key, visited)\n        visited[u] = true\n        for (let v = 0; v < length; v++) {\n            if (graph[u][v] && !visited[v] && graph[u][v] < key[v]) {\n                parent[v] = u\n            }\n        }\n    }\n    return parent\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br")])]),a("h4",{attrs:{id:"_6-2-kruskal-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-kruskal-算法","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.2 Kruskal 算法")]),s._v(" "),a("p",[a("code",[s._v("Kruskal")]),s._v(" 算法是一种求加树无向连通图的 MST 的贪心算法。")]),s._v(" "),a("p",[s._v("代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 最小生成树\nconst INF = Number.MAX_SAFE_INTEGER;\nconst find = (i, parent) => {\n    while (parent[i]) {\n        i = parent[i]\n    }\n    return i\n}\nconst union = (i, j, parent) => {\n    if (i !== j) {\n        parent[j] = i\n        return true\n    }\n    return false\n}\nconst initializeCost = graph => {\n    const cost = []\n    const {\n        length\n    } = graph\n    for (let i = 0; i < length; i++) {\n        cost[i] = []\n        for (let j = 0; j < length; j++) {\n            if (graph[i][j] === 0) {\n                cost[i][j] = INF\n            } else {\n                cost[i][j] = graph[i][j]\n            }\n        }\n    }\n    return cost\n}\nconst kruskal = graph => {\n    const {\n        length\n    } = graph\n    const parent = []\n    let ne = 0\n    let a;\n    let b;\n    let u;\n    let v;\n    const cost = initializeColor(graph)\n    while (ne < length - 1) {\n        for (let i = 0, min = INF; i < length; i++) {\n            for (let j = 0; j < length; j++) {\n                if (cost[i][j] < min) {\n                    min = cost[i][j]\n                    a = u = i\n                    b = v = j\n                }\n            }\n        }\n        v = find(u, parent)\n        v = find(v, parent)\n        if (union(u, v, parent)) {\n            ne++\n        }\n        cost[a][b] = cost[b][a] = INF\n    }\n    return parent\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br")])]),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/5cd1ab3df265da03587c142a",target:"_blank",rel:"noopener noreferrer"}},[s._v("「中高级前端」窥探数据结构的世界- ES6 版"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5de7c053518825125d1497e2",target:"_blank",rel:"noopener noreferrer"}},[s._v("图形算法（邻接矩阵）"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/ln5xLC3mzFoNdu1tk9olLg",target:"_blank",rel:"noopener noreferrer"}},[s._v("动画：如何用广度和深度优先搜索找到女朋友？"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzAxNDYwODEzNw==&mid=2247486103&idx=1&sn=3a57404cb55c5ed7fce67fdd5569070d&chksm=9b91f8f1ace671e72dc139ddf249d6b0d435456fbfc86d3661847c15bfefc3cd85c939601b8d&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[s._v("图解：什么是图？"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/rRVGWEm-QzgJ-vkYZTWD7w",target:"_blank",rel:"noopener noreferrer"}},[s._v("图文详解 DFS 和 BFS"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/L8Dui7gJdUdOTmrYCg_wmQ",target:"_blank",rel:"noopener noreferrer"}},[s._v("前端进阶算法：初学者应该了解的数据结构 Graph"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("《学习 JavaScript 数据结构与算法》")])]),s._v(" "),a("h2",{attrs:{id:"联系作者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[s._v("#")]),s._v(" 联系作者")]),s._v(" "),a("div",{attrs:{align:"center"}},[a("p",[s._v("\n        平凡世界，贵在坚持。\n    ")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);n.default=e.exports}}]);