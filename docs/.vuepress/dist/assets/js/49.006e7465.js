(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{277:function(_,t,v){"use strict";v.r(t);var a=v(4),r=Object(a.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"tcp-与-udp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-与-udp","aria-hidden":"true"}},[_._v("#")]),_._v(" TCP 与 UDP")]),_._v(" "),v("h2",{attrs:{id:"前言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[_._v("#")]),_._v(" 前言")]),_._v(" "),v("p",[_._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),_._v(" "),v("h2",{attrs:{id:"内容"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[_._v("#")]),_._v(" 内容")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#%E4%B8%80%E3%80%81tcp"}},[_._v("TCP")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#%E4%BA%8C%E3%80%81udp"}},[_._v("UDP")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#%E4%B8%89%E3%80%81tcp-%E4%B8%8E-udp-%E5%8C%BA%E5%88%AB"}},[_._v("TCP 与 UDP 区别")])])]),_._v(" "),v("h3",{attrs:{id:"一、tcp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、tcp","aria-hidden":"true"}},[_._v("#")]),_._v(" 一、TCP")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#_1-1-tcp-%E9%A6%96%E9%83%A8%E6%A0%BC%E5%BC%8F"}},[_._v("TCP 首部格式")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#_1-2-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B"}},[_._v("三次握手")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#_1-3-%E4%B8%BA%E4%BB%80%E4%B9%88-tcp-%E8%BF%9E%E6%8E%A5%E9%9C%80%E8%A6%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%8C%E4%B8%A4%E6%AC%A1%E4%B8%8D%E5%8F%AF%E4%BB%A5%E5%90%97%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88"}},[_._v("为什么-tcp-连接需要三次握手，两次不可以吗，为什么")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#_1-4-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B"}},[_._v("四次挥手")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#_1-5-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%9A%84%E5%8E%9F%E5%9B%A0"}},[_._v("四次挥手的原因")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#_1-6-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93"}},[_._v("如何保证可靠传输")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#_1-7-tcp-%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81"}},[_._v("TCP 连接状态")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#_1-8-tcp-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3"}},[_._v("TCP 滑动窗口")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#_1-9-tcp-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6"}},[_._v("TCP 流量控制")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#_1-10-tcp-%E6%8B%A5%E5%A1%9E%E5%A4%84%E7%90%86"}},[_._v("TCP 拥塞处理")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#_1-11-%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E5%92%8C%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6"}},[_._v("如何区分流量控制和拥塞控制")])])]),_._v(" "),v("h4",{attrs:{id:"_1-1-tcp-首部格式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-tcp-首部格式","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.1 TCP 首部格式")]),_._v(" "),v("p",[v("img",{attrs:{src:"tcp-head.png",alt:"images"}})]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("序号 seq")]),_._v("：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。[301,400]为序号 301 的数据长度，下一个则为 401")]),_._v(" "),v("li",[v("strong",[_._v("确认号 ack")]),_._v("：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。")]),_._v(" "),v("li",[v("strong",[_._v("数据偏移")]),_._v("：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。")]),_._v(" "),v("li",[v("strong",[_._v("确认 ACK")]),_._v("：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。")]),_._v(" "),v("li",[v("strong",[_._v("同步 SYN")]),_._v("：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。")]),_._v(" "),v("li",[v("strong",[_._v("终止 FIN")]),_._v("：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。")]),_._v(" "),v("li",[v("strong",[_._v("窗口")]),_._v("：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。")])]),_._v(" "),v("h4",{attrs:{id:"_1-2-三次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-三次握手","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.2 三次握手")]),_._v(" "),v("p",[v("img",{attrs:{src:"tcp-3.png",alt:"images"}})]),_._v(" "),v("p",[v("strong",[_._v("假设 A 为客户端，B 为服务器端。")])]),_._v(" "),v("ul",[v("li",[_._v("首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。")]),_._v(" "),v("li",[_._v("A 向 B 发送连接请求报文段，SYN=1，ACK=0，选择一个初始的序号 seq=x。")]),_._v(" "),v("li",[_._v("B 收到连接请求报文段，如果同意建立连接，则向 A 发送连接确认报文段，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 seq=y。")]),_._v(" "),v("li",[_._v("A 收到 B 的连接确认报文段后，还要向 B 发出确认，确认号为 ack=y+1，序号为 seq=x+1。")]),_._v(" "),v("li",[_._v("A 的 TCP 通知上层应用进程，连接已经建立。")]),_._v(" "),v("li",[_._v("B 收到 A 的确认后，连接建立。")]),_._v(" "),v("li",[_._v("B 的 TCP 收到主机 A 的确认后，也通知其上层应用进程：TCP 连接已经建立。")])]),_._v(" "),v("h4",{attrs:{id:"_1-3-为什么-tcp-连接需要三次握手，两次不可以吗，为什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-为什么-tcp-连接需要三次握手，两次不可以吗，为什么","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.3 为什么 TCP 连接需要三次握手，两次不可以吗，为什么")]),_._v(" "),v("p",[v("strong",[_._v("为了防止已失效的连接请求报文段突然又传送到了服务端，占用服务器资源。（假设主机 A 为客户端，主机 B 为服务器端）")])]),_._v(" "),v("p",[_._v("现假定出现一种异常情况，即 A 发出的第一个连接请求报文段并没有丢失，而是在某些网络节点长时间滞留了，以致延误到连接释放以后的某个时间才到 B。本来这是一个已失效的报文段。但是 B 收到此失效的连接请求报文段后，就误认为是 A 有发出一次新的连接请求。于是就向 A 发出确认报文段，同意建立连接。假定不采用三次握手，那么只要 B 发出确认，新的连接就建立了。")]),_._v(" "),v("p",[_._v("由于现在 A 并没有发出建立连接的请求，因此不会理睬 B 的确认，也不会向 B 发送数据。但 B 却以为新的运输连接已经建立了，并一直等待 A 发来数据。B 的许多资源就这样白白浪费了。")]),_._v(" "),v("p",[_._v("采用三次握手的办法可以防止上述现象的发生。例如在刚才的情况下，A 不会向 B 的确认发出确认。B 由于收不到确认，就知道 A 并没有要求建立连接。")]),_._v(" "),v("h4",{attrs:{id:"_1-4-四次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-四次挥手","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.4 四次挥手")]),_._v(" "),v("p",[v("img",{attrs:{src:"tcp-4.png",alt:"images"}})]),_._v(" "),v("p",[_._v("数据传输结束后，通信的双方都可释放连接。现在 A 的应用进程先向其 TCP 发出连接释放报文段，并停止再发送数据，主动关闭 TCP 连接。")]),_._v(" "),v("ul",[v("li",[_._v("A 把连接释放报文段首部的 FIN=1，其序号 seq=u，等待 B 的确认。")]),_._v(" "),v("li",[_._v("B 发出确认，确认号 ack=u+1，而这个报文段自己的序号 seq = v。（TCP 服务器进程通知高层应用进程）")]),_._v(" "),v("li",[_._v("从 A 到 B 这个方向的连接就释放了，TCP 连接牌半关闭状态。A 不能向 B 发送数据；B 若发送数据，A 仍要接收。")]),_._v(" "),v("li",[_._v("当 B 不再需要连接时，发送连接释放请求报文段，FIN=1。")]),_._v(" "),v("li",[_._v("A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（2*2 = 4 mins）时间后释放连接。")]),_._v(" "),v("li",[_._v("B 收到 A 的确认后释放连接。")])]),_._v(" "),v("h4",{attrs:{id:"_1-5-四次挥手的原因"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-四次挥手的原因","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.5 四次挥手的原因")]),_._v(" "),v("p",[_._v("客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。")]),_._v(" "),v("h4",{attrs:{id:"_1-6-如何保证可靠传输"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-如何保证可靠传输","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.6 如何保证可靠传输")]),_._v(" "),v("ul",[v("li",[_._v("应用数据被分割成 TCP 认为最适合发送的数据块。")]),_._v(" "),v("li",[v("strong",[_._v("超时重传")]),_._v("：当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。")]),_._v(" "),v("li",[_._v("TCP 给发送的每个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。")]),_._v(" "),v("li",[v("strong",[_._v("检验和")]),_._v("：TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。")]),_._v(" "),v("li",[_._v("TCP 的接收端会丢弃重复的数据。")]),_._v(" "),v("li",[v("strong",[_._v("流量控制")]),_._v("：TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的我数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。")]),_._v(" "),v("li",[v("strong",[_._v("拥塞控制")]),_._v("：当网络拥塞时，减少数据的发送。")])]),_._v(" "),v("h4",{attrs:{id:"_1-7-tcp-连接状态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-tcp-连接状态","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.7 TCP 连接状态")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("CLOSED")]),_._v("：初始状态。")]),_._v(" "),v("li",[v("code",[_._v("LISTEN")]),_._v("：服务器处于监听状态。")]),_._v(" "),v("li",[v("code",[_._v("SYN_SEND")]),_._v("：客户端 socket 执行 CONNECT 连接，发送 SYN 包，进入此状态。")]),_._v(" "),v("li",[v("code",[_._v("SYN_RECV")]),_._v("：服务端收到 SYN 包并发送服务端 SYN 包，进入此状态。")]),_._v(" "),v("li",[v("code",[_._v("ESTABLISH")]),_._v("：表示连接建立。客户端发送了最后一个 ACK 包后进入此状态，服务端接收到 ACK 包后进入此状态。")]),_._v(" "),v("li",[v("code",[_._v("FIN_WAIT_1")]),_._v("：终止连接的一方（通常是客户机）发送了 FIN 报文后进入。等待对方 FIN。")]),_._v(" "),v("li",[v("code",[_._v("CLOSE_WAIT")]),_._v("：（假设服务器）接收到客户机 FIN 包之后等待关闭的阶段。在接收到对方的 FIN 包之后，自然是需要立即回复 ACK 包的，表示已经知道断开请求。但是本方是否立即断开连接（发送 FIN 包）取决于是否还有数据需要发送给客户端，若有，则在发送 FIN 包之前均为此状态。")]),_._v(" "),v("li",[v("code",[_._v("FIN_WAIT_2")]),_._v("：此时是半连接状态，即有一方要求关闭连接，等待另一方关闭。客户端接收到服务器的 ACK 包，但并没有立即接收到服务端的 FIN 包，进入 FIN_WAIT_2 状态。")]),_._v(" "),v("li",[v("code",[_._v("LAST_ACK")]),_._v("：服务端发动最后的 FIN 包，等待最后的客户端 ACK 响应，进入此状态。")]),_._v(" "),v("li",[v("code",[_._v("TIME_WAIT")]),_._v("：客户端收到服务端的 FIN 包，并立即发出 ACK 包做最后的确认，在此之后的 2MSL 时间称为 TIME_WAIT 状态。")])]),_._v(" "),v("h4",{attrs:{id:"_1-8-tcp-滑动窗口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-tcp-滑动窗口","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.8 TCP 滑动窗口")]),_._v(" "),v("p",[v("img",{attrs:{src:"sliding_win.png",alt:"images"}})]),_._v(" "),v("p",[_._v("窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，"),v("strong",[_._v("接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。")])]),_._v(" "),v("p",[_._v("发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。")]),_._v(" "),v("p",[_._v("接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {32, 33} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。")]),_._v(" "),v("p",[v("strong",[_._v("以下进行滑动窗口模拟")])]),_._v(" "),v("p",[_._v("在 TCP 中，"),v("strong",[_._v("滑动窗口是为了实现流量控制")]),_._v("。如果对方发送数据过快，接收方就来不及接收，接收方就需要通告对方，减慢数据的发送。")]),_._v(" "),v("p",[v("img",{attrs:{src:"sliding_windows.png",alt:"images"}})]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("发送方接收到了对方发来的报文 ack=33，win=10，知道对方收到了 33 号前的数据")]),_._v("，现在期望接收[33,43)号数据。发送方连续发送了 4 个报文段假设为 A，B，C，D，分别携带")]),_._v(" "),v("li",[_._v("接收方接收到了报文段 A,C，")]),_._v(" "),v("li",[_._v("接收方接收到了报文段 A, C，但是没收到 B 和 D，也就是只收到了 [33, 35) 和 [36, 38) 号数据。接收方发送回对报文段 A 的确认：ack = 35, win = 10。")]),_._v(" "),v("li",[_._v("发送方收到了 ack = 35, win = 10，对方期望接收 [35, 45) 号数据。接着发送了一个报文段 E，它携带了 [41, 44) 号数据。")]),_._v(" "),v("li",[_._v("接收方接收到了报文段 B: [35, 36), D:[38, 41)，接收方发送对 D 的确认：ack = 41, win = 10. （这是一个累积确认）")]),_._v(" "),v("li",[_._v("发送方收到了 ack = 41, win = 10，对方期望接收 [41, 51) 号数据。")]),_._v(" "),v("li",[_._v("……")]),_._v(" "),v("li",[_._v("需要注意的是，接收方接收 tcp 报文的顺序是不确定的，并非是一定先收到 35 再收到 36，也可能是先收到 36，37，再收到 35.")])]),_._v(" "),v("h4",{attrs:{id:"_1-9-tcp-流量控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-tcp-流量控制","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.9 TCP 流量控制")]),_._v(" "),v("p",[_._v("流量控制是为了控制发送方发送速率，保证接收方来得及接收。")]),_._v(" "),v("p",[_._v("接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。")]),_._v(" "),v("h4",{attrs:{id:"_1-10-tcp-拥塞处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-tcp-拥塞处理","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.10 TCP 拥塞处理")]),_._v(" "),v("p",[_._v("拥塞控制的一般原理")]),_._v(" "),v("ul",[v("li",[_._v("在某段时间，若对网络中某资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏——产生拥塞(congestion)。")]),_._v(" "),v("li",[_._v("出现资源拥塞的条件：对资源需求的总和>可用资源")]),_._v(" "),v("li",[_._v("若网络中有许多资源同时产生拥塞，网络的性能就要明显变坏，整个网络的吞吐量将随输入负荷的增大而下降。")])]),_._v(" "),v("p",[_._v("如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程序更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。")]),_._v(" "),v("p",[v("img",{attrs:{src:"congest1.png",alt:"images"}})]),_._v(" "),v("p",[_._v("TCP 主要通过四种算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。")]),_._v(" "),v("h4",{attrs:{id:"_1-11-如何区分流量控制和拥塞控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-如何区分流量控制和拥塞控制","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.11 如何区分流量控制和拥塞控制")]),_._v(" "),v("ul",[v("li",[_._v("拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。")]),_._v(" "),v("li",[_._v("拥塞控制是一个全局性的过程，涉及到所有的主机、所有的路由器，以及与降低网络传输性能有关的所有因素。")]),_._v(" "),v("li",[_._v("流量控制往往指在给定的发送端和接收端之间的点对点通信量的控制。")]),_._v(" "),v("li",[_._v("流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收。")]),_._v(" "),v("li",[_._v("流量控制属于通信双方协商；拥塞控制涉及通信链路全局。")]),_._v(" "),v("li",[_._v("流量控制需要通信双方各维护一个发送窗、一个接收窗，对任意一方，接收窗大小由自身决定，发送窗大小由接收方响应的 TCP 报文段中窗口值确定；拥塞控制的拥塞窗口大小变化由试探性发送一定数据量数据探查网络状况后而自适应调整。")]),_._v(" "),v("li",[_._v("实际最终发送窗口 = min{流控发送窗口，拥塞窗口}。")])]),_._v(" "),v("h3",{attrs:{id:"二、udp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、udp","aria-hidden":"true"}},[_._v("#")]),_._v(" 二、UDP")]),_._v(" "),v("p",[_._v("用户数据报协议 UDP，是面向无连接的通讯协议，是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。UDP 通讯时不需要接收方确认，属于不可靠的传输，可能会出现丢包现象，实际应用中要求程序员编程验证。例如：视频传输、实时通信。")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#_2-1-udp-%E9%A6%96%E9%83%A8%E6%A0%BC%E5%BC%8F"}},[_._v("UDP 首部格式")])])]),_._v(" "),v("h4",{attrs:{id:"_2-1-udp-首部格式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-udp-首部格式","aria-hidden":"true"}},[_._v("#")]),_._v(" 2.1 UDP 首部格式")]),_._v(" "),v("p",[v("img",{attrs:{src:"net-udp.png",alt:"images"}})]),_._v(" "),v("p",[_._v("首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。")]),_._v(" "),v("h3",{attrs:{id:"三、tcp-与-udp-区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、tcp-与-udp-区别","aria-hidden":"true"}},[_._v("#")]),_._v(" 三、TCP 与 UDP 区别")]),_._v(" "),v("ul",[v("li",[_._v("UDP 是无连接的，即发送数据之前不需要建立连接。")]),_._v(" "),v("li",[_._v("UDP 使用尽最大努力将会，即不保证可靠将会，同时也不使用拥塞控制。")]),_._v(" "),v("li",[_._v("UDP 是面向报文的。UDP 没有拥塞控制，很适合多媒体通信的要求。")]),_._v(" "),v("li",[_._v("UDP 支持一对一、一对多、多对一和多对多的交互通信。")]),_._v(" "),v("li",[_._v("UDP 的首部开销小，只有 8 个字节。")]),_._v(" "),v("li",[_._v("TCP 是面向连接的传输层协议。")]),_._v(" "),v("li",[_._v("每一条 TCP 连接只能有两个端点，每一条 TCP 连接只能是点对点的（一对一）。")]),_._v(" "),v("li",[_._v("TCP 提供可靠交付的服务。")]),_._v(" "),v("li",[_._v("TCP 提供全双工通信。")]),_._v(" "),v("li",[_._v("TCP 是面向字节流。")]),_._v(" "),v("li",[_._v("首部最低 20 个字节。")])]),_._v(" "),v("h3",{attrs:{id:"参考资料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[_._v("#")]),_._v(" 参考资料")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://www.cnblogs.com/zhehan54/p/6204767.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("TCP/IP 详解学习笔记"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://mp.weixin.qq.com/s/pFlJglicKZVh31EOMe83Hw",target:"_blank",rel:"noopener noreferrer"}},[_._v("「多图警告」重学 TCP/IP 协议"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://mp.weixin.qq.com/s/rWkD5ktlJDxcNFJ-5NH1eQ",target:"_blank",rel:"noopener noreferrer"}},[_._v("TCP 三次握手和四次挥手"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://juejin.im/post/5e527c58e51d4526c654bf41",target:"_blank",rel:"noopener noreferrer"}},[_._v("(建议收藏)TCP协议灵魂之问，巩固你的网路底层基础"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://mp.weixin.qq.com/s/HNrY1sMk14_ogqCZ8s_2sw",target:"_blank",rel:"noopener noreferrer"}},[_._v("动画：用动画给面试官解释 TCP 三次握手过程"),v("OutboundLink")],1)])]),_._v(" "),v("h2",{attrs:{id:"联系作者"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[_._v("#")]),_._v(" 联系作者")]),_._v(" "),v("div",{attrs:{align:"center"}},[v("p",[_._v("\n        平凡世界，贵在坚持。\n    ")]),_._v(" "),v("img",{attrs:{src:_.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);t.default=r.exports}}]);