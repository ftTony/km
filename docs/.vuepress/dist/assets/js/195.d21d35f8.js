(window.webpackJsonp=window.webpackJsonp||[]).push([[195],{416:function(s,e,n){"use strict";n.r(e);var r=n(13),a=Object(r.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"process-进程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-进程"}},[s._v("#")]),s._v(" process 进程")]),s._v(" "),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),n("p",[s._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),s._v(" "),n("h2",{attrs:{id:"内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[s._v("#")]),s._v(" 内容")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E4%B8%80%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E7%A8%8B%E8%BF%9B%E5%8C%96"}},[s._v("服务器进程进化")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%E4%BA%8C%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%8F%8A%E6%96%B9%E6%B3%95"}},[s._v("进程相关属性及方法")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%E4%B8%89%E5%88%9B%E5%BB%BA%E5%AD%90%E8%BF%9B%E7%A8%8B"}},[s._v("创建子进程")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%E5%9B%9B%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1"}},[s._v("进程间通信")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%E4%BA%94%E5%8F%A5%E6%9F%84%E4%BC%A0%E9%80%92"}},[s._v("句柄传递")])])]),s._v(" "),n("h3",{attrs:{id:"一、服务器进程进化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、服务器进程进化"}},[s._v("#")]),s._v(" 一、服务器进程进化")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#11-%E5%90%8C%E6%AD%A5%E5%8D%95%E8%BF%9B%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8"}},[s._v("同步单进程服务器")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#12-%E5%90%8C%E6%AD%A5%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8"}},[s._v("同步多进程服务器")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#13-%E5%90%8C%E6%AD%A5%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8"}},[s._v("同步多进程多线程服务器")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#14-%E5%8D%95%E8%BF%9B%E7%A8%8B%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%9F%BA%E4%BA%8E%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8"}},[s._v("单进程单线程基于事件驱动的服务器")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#15-nodejs%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84"}},[s._v("NodeJS 的实现多进程架构")])])]),s._v(" "),n("h4",{attrs:{id:"_1-1-同步单进程服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-同步单进程服务器"}},[s._v("#")]),s._v(" 1.1 同步单进程服务器")]),s._v(" "),n("p",[s._v("该服务器是最早出现的，执行模型是同步的，它的服务模式是一次只能处理一个请求，其他的请求需要顺序依次等待处理执行。也就是说如果当前的请求正在处理的话，那么其他的请求都处于阻塞等待的状态。因此这样的服务器处理速度是不好的。")]),s._v(" "),n("h4",{attrs:{id:"_1-2-同步多进程服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-同步多进程服务器"}},[s._v("#")]),s._v(" 1.2 同步多进程服务器")]),s._v(" "),n("p",[s._v("为了解决上面同步单进程服务器无法处理并发的问题，我们就出来一个同步多进程服务器，它的功能是一个请求需要一个进程来服务，也就是说如果有 100 个请求就需要 100 个进程来进行服务，那么这样就会有很大的进程的开销问题了。并且相同的状态在内在中会有多种，这样会造成资源浪费。")]),s._v(" "),n("h4",{attrs:{id:"_1-3-同步多进程多线程服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-同步多进程多线程服务器"}},[s._v("#")]),s._v(" 1.3 同步多进程多线程服务器")]),s._v(" "),n("p",[s._v("为了解决上面多进程中资源浪费的问题，我们就引入了多进程多线程服务器模式，从我们之前一个进程处理一个请求，现在我们改成为一个线程来处理一个请求，纯种相对于进程来说开销会少很多，并且线程之间还可以共享数据。并且我们可以使用线程池减少创建和销毁的开销。")]),s._v(" "),n("p",[s._v("但是多线程也有缺点，比如多个请求需要使用多个线程来服务，但是每个纯种需要一定的内在来存放自己的堆和栈的。这样就会导致占用太多的内存。第二就是：CPU 核心只能处理一件事件，系统是通过将 CPU 切分为时间片的方法来让线程可以均匀地使用 CPU 的资源的。在系统切换线程的过程中也会进行线程上下文切换，当线程数量过多时进行上下文切换会非常耗费时间的。因此在很大的并发量下，多线程还是无法做到很好的伸缩性。Apache 服务器是这样架构的。")]),s._v(" "),n("h4",{attrs:{id:"_1-4-单进程单线程基于事件驱动的服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-单进程单线程基于事件驱动的服务器"}},[s._v("#")]),s._v(" 1.4 单进程单线程基于事件驱动的服务器")]),s._v(" "),n("p",[s._v("为了解决上面的问题，我们出现了单进程单线程基于事件驱动的模式出现了，使用单线程的优点是：避免内存开销和上下文切换的开销。")]),s._v(" "),n("p",[s._v("所有的请求都在单线程上执行的，其他的异步 IO 和事件驱动相关的线程是通过 libuv 中的事件循环来实现内部的线程池和线程调度的。可伸缩性比之前的都好，但是影响事件驱动服务模型性能的只能 CPU 的计算能力，但是只能使用单核的 CPU 来处理事件驱动，但是我们的计算机目前都是多核的，我们要如何使用多核 CPU 呢？如果我们使用多核 CPU 的话，那么 CPU 的计算能力就会得到一个很大的提升。")]),s._v(" "),n("h4",{attrs:{id:"_1-5-nodejs-的实现多进程架构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-nodejs-的实现多进程架构"}},[s._v("#")]),s._v(" 1.5 NodeJS 的实现多进程架构")]),s._v(" "),n("p",[s._v("如上第四点，面对单线程单进程对多核使用率不好的问题，因此我们使用多进程，每个进程使用一个 cpu，因此我们就可以实现多核 cpu 的利用。\nNode 提供了 child_process 模块和 cluster 模块来实现多进程以及进程的管理。也就是我们常说的 Master-Worker 模式。也就是说进程分为 Master(主)进程 和 worker（工作）进程。master 进程负责调度或管理 worker 进程，那么 worker 进程负责具体的业务处理。在服务器层面来讲，worker 可以是一个服务进程，负责出来自于客户端的请求，多个 worker 就相当于多个服务器，因此就构成了一个服务器群。master 进程则负责创建 worker，接收客户端的请求，然后分配到各个服务器上去处理，并且监控 worker 进程的运行状态及进行管理操作。")]),s._v(" "),n("p",[s._v("如下图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:"process.png",alt:"image"}})]),s._v(" "),n("h3",{attrs:{id:"二、进程相关属性及方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、进程相关属性及方法"}},[s._v("#")]),s._v(" 二、进程相关属性及方法")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("process.env")]),s._v("：返回当前服务运行的环境")]),s._v(" "),n("li",[n("code",[s._v("process.nextTick")]),s._v("：异步操作")]),s._v(" "),n("li",[n("code",[s._v("process.argv")]),s._v("：属性返回一个数组，其中包含当启动 Node.js 进程时传入的命令行参数。")]),s._v(" "),n("li",[n("code",[s._v("process.cwd")]),s._v("：返回当前工作路径。")]),s._v(" "),n("li",[n("code",[s._v("process.stdin")]),s._v("：标准输入。")]),s._v(" "),n("li",[n("code",[s._v("process.stdout")]),s._v("：标准输出。")]),s._v(" "),n("li",[n("code",[s._v("process.seteuid")]),s._v("：获得当前用户的 id。")]),s._v(" "),n("li",[n("code",[s._v("process.getgid")]),s._v("：获得当前群组的 id")]),s._v(" "),n("li",[n("code",[s._v("process.pid")]),s._v("：返回进程 id")]),s._v(" "),n("li",[n("code",[s._v("process.title")]),s._v("：可以用它来修改进程的名字，当你用 ps 命令，同时有多个 node 进程在跑的时候，作用就出来了。")]),s._v(" "),n("li",[n("code",[s._v("process.uptime")]),s._v("：当前 node 进程已经运行了多长时间（单位是秒）。")]),s._v(" "),n("li",[n("code",[s._v("process.memoryUsage")]),s._v("：返回进程占用的内存，单位为字节。")]),s._v(" "),n("li",[n("code",[s._v("process.hrtime")]),s._v("：一般用于做性能基准测试。返回一个数组，数组里的值为 [[seconds, nanoseconds] （1 秒等 10 的九次方毫微秒）。")]),s._v(" "),n("li",[n("code",[s._v("process.version")]),s._v("：返回当前 node 的版本，比如'v6.1.0'。")]),s._v(" "),n("li",[n("code",[s._v("process.arch")]),s._v("：返回当前系统的处理器架构（字符串），比如"),n("code",[s._v("arm")]),s._v(", "),n("code",[s._v("ia32")]),s._v(", or "),n("code",[s._v("x64")]),s._v("。")]),s._v(" "),n("li",[n("code",[s._v("process.platform")]),s._v("：返回关于平台描述的字符串，比如 darwin、win32 等。")]),s._v(" "),n("li",[n("code",[s._v("process.kill")]),s._v("：它并不是用来杀死进程的，而是用来向进程发送信号。")]),s._v(" "),n("li",[n("code",[s._v("process.exit")]),s._v("：可以用来立即退出进程。")])]),s._v(" "),n("h3",{attrs:{id:"三、创建子进程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、创建子进程"}},[s._v("#")]),s._v(" 三、创建子进程")]),s._v(" "),n("p",[s._v("创建子进程，有四个方法分别：")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("spawn")]),s._v("：子进程中执行的是非 node 程序，提供一组参数后，执行的结果以流的形式返回。")]),s._v(" "),n("li",[n("strong",[s._v("execFile")]),s._v("：子进程中执行的是非 node 程序，提供一组参数后，执行的结果以回调的形式返回。")]),s._v(" "),n("li",[n("strong",[s._v("exec")]),s._v("：子进程执行的是非 node 程序，提供一串 shell 命令，执行结果后以回调的形式返回，它与 execFile 不同的是，exec 可以直接执行一串 shell 命令。")]),s._v(" "),n("li",[n("strong",[s._v("fork")]),s._v("：子进程执行的是 node 程序，提供一组参数后，执行的结果以流的形式返回，它与 spawn 不同的是，fork 生成的子进程只能执行 node 应用。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var cp = require('child_process');\ncp.spawn('node',['worker.js']);\ncp.exec('node worker.js',function(err,stdout,stderr){\n    // some code\n});\ncp.execFile('workder.js',function(err,stdout,stderr){\n\n});\ncp.fork('./worker.js');\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("table",[n("thead",[n("tr",[n("th",[s._v("类型")]),s._v(" "),n("th",[s._v("回调/异常")]),s._v(" "),n("th",[s._v("进程类型")]),s._v(" "),n("th",[s._v("执行类型")]),s._v(" "),n("th",[s._v("可设置超时")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("spawn()")]),s._v(" "),n("td",[s._v("x")]),s._v(" "),n("td",[s._v("任意")]),s._v(" "),n("td",[s._v("命令")]),s._v(" "),n("td",[s._v("x")])]),s._v(" "),n("tr",[n("td",[s._v("exec()")]),s._v(" "),n("td",[s._v("✓")]),s._v(" "),n("td",[s._v("任意")]),s._v(" "),n("td",[s._v("命令")]),s._v(" "),n("td",[s._v("✓")])]),s._v(" "),n("tr",[n("td",[s._v("execFile()")]),s._v(" "),n("td",[s._v("✓")]),s._v(" "),n("td",[s._v("任意")]),s._v(" "),n("td",[s._v("可执行文件")]),s._v(" "),n("td",[s._v("✓")])]),s._v(" "),n("tr",[n("td",[s._v("fork()")]),s._v(" "),n("td",[s._v("x")]),s._v(" "),n("td",[s._v("node")]),s._v(" "),n("td",[s._v("javascript 文件")]),s._v(" "),n("td",[s._v("x")])])])]),s._v(" "),n("h3",{attrs:{id:"四、进程间通信"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、进程间通信"}},[s._v("#")]),s._v(" 四、进程间通信")]),s._v(" "),n("p",[s._v("在 nodejs 中父子进程之间通信可以通过 on('message')和 send()方法来实现通信，on('message')是监听 message 事件的。当该进程收到其他进程发送的消息时，便会触发 message 事件。send()方法则是用于向其他进程发送消息的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// parent.js\nvar cp = require('child_process');\nvar n = cp.fork(__dirname + '/sub.js');\n\nn.on('message',function(m){\n    console.log('PARENT got message:',m);\n});\n\nn.send({hello:'world'});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("process.on('message',function(m){\n    console.log('CHILD got message:',m);\n});\n\nprocess.send({foo:'bar'});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"五、句柄传递"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、句柄传递"}},[s._v("#")]),s._v(" 五、句柄传递")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#41-master%E5%AE%9E%E7%8E%B0%E5%AF%B9worker%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E5%88%86%E5%8F%91"}},[s._v("Master 实现对 Worker 的请求进行分发")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#42-worker%E7%9B%91%E5%90%AC%E5%90%8C%E4%B8%80%E4%B8%AA%E7%AB%AF%E5%8F%A3"}},[s._v("Worker 监听同一个端口")])])]),s._v(" "),n("h4",{attrs:{id:"_4-1-master-实现对-worker-的请求进行分发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-master-实现对-worker-的请求进行分发"}},[s._v("#")]),s._v(" 4.1 Master 实现对 Worker 的请求进行分发")]),s._v(" "),n("p",[s._v("master.js")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const childProcess = require('child_process');\nconst net = require('net');\n\n// 获取cpu的数量\nconst cpuNum = require('os').cpus().length;\n\nlet workers = [];\nlet cur = 0;\n\nfor(let i=0;i<cpuNum;++i){\n    workers.push(childProcess.fork('./workder.js'));\n    console.log('worker process-' + workers[i].pid);\n}\n\n// 创建TCP服务器\nconst tcpServer = net.createServer();\n\n/*\n    服务器收到请求后颁发给工作进程去处理\n*/\ntcpServer.on('connection',(socket)=>{\n    worker[cur].send('socket',socket);\n    cur = Number.parseInt((cur+1)%cpuNum);\n});\n\ntcpServer.listen(8989,()=>{\n    console.log('Tcp Server:127.0.0.1:8989');\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("p",[s._v("worker.js 代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 接收主进程发来的消息\nprocess.on('message',(msg,socket)=>{\n    if(msg === 'socket' && socker){\n        // 利用setTimeout 模拟异步请求\n        setTimeout(()=>{\n            socket.end('Request handled by worker-'+process.pid);\n        },100);\n    }\n});\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("tcp.client.js 代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const net = require('net');\nconst maxConnectCount = 10;\n\nfor(let i=0;i<maxConnectCount;++i){\n    net.createConnection({\n        port:8989,\n        host:'127.0.0.1'\n    }).on('data',(d)=>{\n        console.log(d.toString());\n    })\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h4",{attrs:{id:"_4-2-worker-监听同一个端口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-worker-监听同一个端口"}},[s._v("#")]),s._v(" 4.2 Worker 监听同一个端口")]),s._v(" "),n("p",[s._v("master.js 代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const childProcess = require('child_process');\nconst net = require('net');\n\n// 获取cpu数量\nconst cpuNum = require('os').cpus().length;\n\nlet workers = [];\nlet cur = 0;\n\nfor(let i=0;i<cpuNum;++i){\n    workers.push(childProcess.fork('./worker.js'));\n    console.log('worker process-'+workers[i].pid);\n}\n\n// 创建TCP服务器\nconst tcpServer = net.createServer();\n\ntcpServer.listen(8989,()=>{\n    console.log('Tcp Server:127.0.0.1:8989');\n    // 监听端口后将服务器句柄发送给worker进程\n    fot(let i=0;i<cpuNum;++i){\n        workers[i].send('tcpServer',tcpServer);\n    }\n    // 关闭master线程的端口监听\n    tcpServer.close();\n})\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("p",[s._v("worker.js 代码如下:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 接收主进程发来的消息\nprocess.on('message',(msg,tcpServer)=>{\n    if(msg === 'tcpServer' && tcpServer){\n        tcpServer.on('connection',(socket)=>{\n            setTimeout(()=>{\n                socket.end('Request handled by worker-'+process.pid);\n            },100);\n        })\n    }\n});\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("tcp_client.js 代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const net = require('net');\nconst maxConnectCount =10;\n\nfor(let i=0;i<maxConnectCount;++i){\n    net.createConnection({\n        port:8989,\n        host:'127.0.0.1'\n    }).on('data',(d)=>{\n        console.log(d.toString());\n    })\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://nodejs.cn/api/process.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Node.js 中文文档"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://www.cnblogs.com/tugenhua0707/p/11141076.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("浅谈 NodeJS 多进程服务架构基本原理"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/s4tLmVrUUKNVEWdk3CoB6A",target:"_blank",rel:"noopener noreferrer"}},[s._v("Node.js 进阶之进程与线程"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/5e0728ce518825122b0f99f2",target:"_blank",rel:"noopener noreferrer"}},[s._v("浅析 Node 进程与线程"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://segmentfault.com/a/1190000020077274",target:"_blank",rel:"noopener noreferrer"}},[s._v("深入理解 Node.js 进程与线程(8000 长文彻底搞懂)"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/dKN95zcRI7qkwGYKhPXrcg",target:"_blank",rel:"noopener noreferrer"}},[s._v("分享 10 道 Nodejs 进程相关面试题"),n("OutboundLink")],1)]),s._v(" "),n("li",[s._v("《深入浅出 Node.js》")])]),s._v(" "),n("h2",{attrs:{id:"联系作者"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#联系作者"}},[s._v("#")]),s._v(" 联系作者")]),s._v(" "),n("div",{attrs:{align:"center"}},[n("p",[s._v("\n        平凡世界，贵在坚持。\n    ")]),s._v(" "),n("img",{attrs:{src:s.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);e.default=a.exports}}]);