(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{376:function(t,r,a){"use strict";a.r(r);var e=a(4),s=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-内存泄漏、监控和分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-内存泄漏、监控和分析","aria-hidden":"true"}},[t._v("#")]),t._v(" JS 内存泄漏、监控和分析")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),t._v(" "),a("h2",{attrs:{id:"内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),a("ul",[a("li",[t._v("内存泄漏的定义以及为什么发生内存泄漏？")]),t._v(" "),a("li",[t._v("为什么会发生内存泄漏？")]),t._v(" "),a("li",[t._v("哪些情况会引起内存泄漏")]),t._v(" "),a("li",[t._v("如何监控内存泄漏")]),t._v(" "),a("li",[t._v("如何分析内存泄漏，找出有问题的代码")]),t._v(" "),a("li",[t._v("实例分析")])]),t._v(" "),a("h3",{attrs:{id:"一、内存泄漏的定义以及为什么发生内存泄漏？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、内存泄漏的定义以及为什么发生内存泄漏？","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、内存泄漏的定义以及为什么发生内存泄漏？")]),t._v(" "),a("p",[a("strong",[t._v("内存泄漏")]),t._v("是指申请的内存没有及时回收掉，被泄漏了。")]),t._v(" "),a("p",[t._v("虽然前端有垃圾回收机制，但当某块无用的内存，却无法被垃圾回收机制认为是垃圾时，也就发生内存泄漏了")]),t._v(" "),a("p",[t._v("而垃圾回收机制通常是使用标志清除策略，简单说，也就是引用引用从根节点开始是否可达来判定是否是垃圾")]),t._v(" "),a("p",[t._v("上面是发生内存泄漏的根本原因，直接原因则是，当不同生命周期的两个东西相互通信时，一方生命到期该回收了，去被另一方还持有时，也就发生内存泄漏了")]),t._v(" "),a("h3",{attrs:{id:"二、哪些情况会引起内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、哪些情况会引起内存泄漏","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、哪些情况会引起内存泄漏")]),t._v(" "),a("ul",[a("li",[t._v("意外的全局变量")]),t._v(" "),a("li",[t._v("遗忘的定时器")]),t._v(" "),a("li",[t._v("使用不当的闭包")]),t._v(" "),a("li",[t._v("遗漏的 DOM 元素")]),t._v(" "),a("li",[t._v("网络回调")])]),t._v(" "),a("h4",{attrs:{id:"_2-1-意外的全局变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-意外的全局变量","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.1 意外的全局变量")]),t._v(" "),a("p",[t._v("全局变量的生命周期最长，直到页面关闭前，它都存活着，所以全局变量上的内存一直不会被回收")]),t._v(" "),a("p",[t._v("当全局变量使用不当，没有及时回收（手动赋值 null），或者拼写错误等将某个变量挂载到全局变量时，也就发生内存泄漏了")]),t._v(" "),a("p",[t._v("示例代码：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function foo(){\n    bar1 = 'some text';         // 没有声明变量  实际上是全局变量 => window.bar1\n    this.bar2= 'some text';     //  全局变量=> window.bar2\n}\nfoo();\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("在这个例子中，意外的创建了两个全局变量 bar1 和 bar2")]),t._v(" "),a("h4",{attrs:{id:"_2-2-遗忘的定时器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-遗忘的定时器","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.2 遗忘的定时器")]),t._v(" "),a("p",[t._v("setTimeout 和 setInterval 是由浏览器专门线程来维护它的生命周期，所以当在某个页面使用了定时器，当该页面销毁时，没有手动去释放清理这些定时器的话，那么这些定时器还是存活着的")]),t._v(" "),a("p",[t._v("也就是说，定时器的生命周期并不挂靠在页面上，")]),t._v(" "),a("h4",{attrs:{id:"_2-3-使用不当的闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-使用不当的闭包","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.3 使用不当的闭包")]),t._v(" "),a("h4",{attrs:{id:"_2-4-遗漏的-dom-元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-遗漏的-dom-元素","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.4 遗漏的 DOM 元素")]),t._v(" "),a("h4",{attrs:{id:"_2-5-网络回调"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-网络回调","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.5 网络回调")]),t._v(" "),a("h3",{attrs:{id:"三、如何监控内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、如何监控内存泄漏","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、如何监控内存泄漏")]),t._v(" "),a("h3",{attrs:{id:"四、如何分析内存泄漏，找出有问题的代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、如何分析内存泄漏，找出有问题的代码","aria-hidden":"true"}},[t._v("#")]),t._v(" 四、如何分析内存泄漏，找出有问题的代码")]),t._v(" "),a("h3",{attrs:{id:"五、实例分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、实例分析","aria-hidden":"true"}},[t._v("#")]),t._v(" 五、实例分析")]),t._v(" "),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/stone0090/javascript-lessons/tree/master/2.6-GC&MemoryManagement",target:"_blank",rel:"noopener noreferrer"}},[t._v("垃圾回收和内存管理"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/qq449245884/xiaozhi/issues/36",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端面试：谈谈 JS 垃圾回收机制"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzIyNDU2NTc5Mw==&mid=2247483715&idx=1&sn=00600d07ce4fd2b465d6cc7692d050f0&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js 内存管理和 V8 垃圾回收机制"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/sMV4KyUb6RORJ4la7MfC4Q",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器垃圾回收机制与 Vue 项目内存泄漏场景分析"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://sanyuan0704.github.io/frontend_daily_question/week07/038.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("V8 引擎如何进行垃圾内存的回收？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/1SGodqhTRM9mBy0Q9J0qow",target:"_blank",rel:"noopener noreferrer"}},[t._v("一文搞懂 V8 引擎的垃圾回收"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/47IoOxXYoxhh00XfTIntDQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("day038:V8 引擎如何进行垃圾内存的回收？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/131233",target:"_blank",rel:"noopener noreferrer"}},[t._v("13 | 垃圾回收：垃圾数据是如何自动回收的？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/m_cwfM0PgivmmCKaK-TviQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Chrome 浏览器垃圾回收机制与内存泄漏分析"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/5qDzvMLx_DAMWOwU7dFNWA",target:"_blank",rel:"noopener noreferrer"}},[t._v("讲讲 js 的内存泄漏、如何监控和分析"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"联系作者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[t._v("#")]),t._v(" 联系作者")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("p",[t._v("\n        平凡世界，贵在坚持。\n    ")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);r.default=s.exports}}]);