(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{277:function(a,n,s){"use strict";s.r(n);var e=s(4),r=Object(e.a)({},(function(){var a=this,n=a.$createElement,s=a._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"generator-函数的异步应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generator-函数的异步应用","aria-hidden":"true"}},[a._v("#")]),a._v(" Generator 函数的异步应用")]),a._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),s("p",[a._v("本人平时学习及收集内容，欢迎参入一起讨论。")]),a._v(" "),s("h2",{attrs:{id:"内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[a._v("#")]),a._v(" 内容")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E4%BC%A0%E7%BB%9F%E6%96%B9%E6%B3%95"}},[a._v("传统方法")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%8C%E3%80%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5"}},[a._v("基本概念")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%89%E3%80%81generator-%E5%87%BD%E6%95%B0"}},[a._v("Generator 函数")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E5%9B%9B%E3%80%81thunk-%E5%87%BD%E6%95%B0"}},[a._v("Thunk 函数")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%94%E3%80%81co-%E5%87%BD%E6%95%B0"}},[a._v("co 函数")])])]),a._v(" "),s("h3",{attrs:{id:"一、传统方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、传统方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 一、传统方法")]),a._v(" "),s("p",[a._v("ES6 诞生以前，异步编程的方法，大概有下面四种。")]),a._v(" "),s("ul",[s("li",[a._v("回调函数")]),a._v(" "),s("li",[a._v("事件监听")]),a._v(" "),s("li",[a._v("发布/订阅")]),a._v(" "),s("li",[a._v("Promise 对象")])]),a._v(" "),s("h3",{attrs:{id:"二、基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、基本概念","aria-hidden":"true"}},[a._v("#")]),a._v(" 二、基本概念")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#21-%E5%BC%82%E6%AD%A5"}},[a._v("异步")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#22-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0"}},[a._v("回调函数")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#23-promise"}},[a._v("Promise")])])]),a._v(" "),s("h4",{attrs:{id:"_2-1-异步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-异步","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.1 异步")]),a._v(" "),s("p",[a._v("所谓“异步”，简单说就是一个任务不是连续完成的，可以理解成该任务被人为分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段。")]),a._v(" "),s("p",[a._v("比如，有一个任务是读取文件进行处理，任务的第一段是向操作系统发出请求，要求读取文件。然后，程序执行其他任务，等到操作系统返回文件，再接着执行任务第二段（处理文件）。这种不连续的执行，就叫做异步。")]),a._v(" "),s("p",[a._v("相应地，连续的执行就叫做同步。由于是连续执行，不能插入其他任务，所以操作系统从硬盘读取文件的这段时间，程序只能干等着。")]),a._v(" "),s("h4",{attrs:{id:"_2-2-回调函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-回调函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.2 回调函数")]),a._v(" "),s("p",[a._v("js 语言对异步编程的实现，就是回调函数。所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。回调函数的英语名字"),s("code",[a._v("callback")]),a._v("，直译过来就是“重新调用”。")]),a._v(" "),s("p",[a._v("读取文件进行处理，是这样写的。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("fs.readFile('/etc/passwd','utf-8',function(err,data){\n    if(err) throw err;\n    console.log(data);\n})\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("上面代码中，"),s("code",[a._v("readFile")]),a._v(" 函数的第三个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了"),s("code",[a._v("/etc/passwd")]),a._v("这个文件以后，回调函数才会执行。")]),a._v(" "),s("h4",{attrs:{id:"_2-3-promise"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-promise","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.3 Promise")]),a._v(" "),s("p",[a._v("回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。就会出现多重嵌套。代码不是纵向发展，而是横向发展，很快就会乱成一团，无法管理。因为多个异步操作形成了强耦合，只要有一个操作需要修改，它的上层回调函数和下层回调函数，可能都要跟着修改。")]),a._v(" "),s("p",[a._v("Promise 对象就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的嵌套，改成链式调用。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var readFile = require('fs-readfile-promise');\n\nreadFile(fileA)\n.then(function (data) {\n  console.log(data.toString());\n})\n.then(function () {\n  return readFile(fileB);\n})\n.then(function (data) {\n  console.log(data.toString());\n})\n.catch(function (err) {\n  console.log(err);\n});\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("p",[a._v("可以看到，Promise 的写法只是回调函数的改进，使用"),s("code",[a._v("then")]),a._v("方法以后，异步任务的两段执行看得更清楚了，除此以外，并无新意。")]),a._v(" "),s("p",[a._v("Promise 的最大问题是代码冗余，原来的任务被 Promise 包装了一下，不管什么操作，一眼看去都是一堆"),s("code",[a._v("then")]),a._v("，原来的语义变得很不清楚。")]),a._v(" "),s("h3",{attrs:{id:"三、generator-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、generator-函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 三、Generator 函数")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#31-%E5%8D%8F%E7%A8%8B"}},[a._v("协程")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#32-%E5%8D%8F%E7%A8%8B%E7%9A%84-generator-%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0"}},[a._v("协程的 Generator 函数实现")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#33-generator-%E5%87%BD%E6%95%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E5%92%8C%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86"}},[a._v("Generator 函数的数据交换和错误处理")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#34-%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%B0%81%E8%A3%85"}},[a._v("异步任务的封装")])])]),a._v(" "),s("h4",{attrs:{id:"_3-1-协程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-协程","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.1 协程")]),a._v(" "),s("p",[a._v("协程，是多个线程互相协作，完成异步任务。")]),a._v(" "),s("p",[a._v("协程有点像函数，又有点像线程。它的运行流程大致如下。")]),a._v(" "),s("ul",[s("li",[a._v("第一步，协程"),s("code",[a._v("A")]),a._v("开始执行。")]),a._v(" "),s("li",[a._v("第二步，协程"),s("code",[a._v("A")]),a._v("执行到一半，进入暂停，执行权转移到协程"),s("code",[a._v("B")]),a._v("。")]),a._v(" "),s("li",[a._v("第三步，（一段时间后）协程"),s("code",[a._v("B")]),a._v("交还执行权。")]),a._v(" "),s("li",[a._v("第四步，协程"),s("code",[a._v("A")]),a._v("恢复执行。")])]),a._v(" "),s("p",[a._v("读取文件的协程写法如下。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function * asyncJob(){\n    //  ...其他代码\n    var f = yield readFile(fileA);\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("上面代码的函数 "),s("code",[a._v("asyncJob")]),a._v(" 是一个协程，它的奥妙就在其中的"),s("code",[a._v("yield")]),a._v("命令。它表示执行到此处，执行权将交给其他协程。也就是说，"),s("code",[a._v("yield")]),a._v("命令是异步两个阶段的分界线。")]),a._v(" "),s("p",[a._v("协程遇到"),s("code",[a._v("yield")]),a._v("命令就暂停，等到执行权返回，再从暂停的地方继续往后执行。它的最大优点，就是代码的写法非常像同步操作，如果去除"),s("code",[a._v("yield")]),a._v("命令，简直一模一样。")]),a._v(" "),s("h4",{attrs:{id:"_3-2-协程的-generator-函数实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-协程的-generator-函数实现","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.2 协程的 Generator 函数实现")]),a._v(" "),s("p",[a._v("Gernerator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。")]),a._v(" "),s("p",[a._v("整个 Generator 函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用"),s("code",[a._v("yield")]),a._v("语句注明。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function * get(x){\n    var y = yield x+2;\n    return y;\n}\n\nvar g = gen(1);\ng.next();   // {value:3,done:false}\ng.next();   // {value:undefined,done:true}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("h4",{attrs:{id:"_3-3-generator-函数的数据交换和错误处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-generator-函数的数据交换和错误处理","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.3 Generator 函数的数据交换和错误处理")]),a._v(" "),s("p",[a._v("Generator 函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。险些之外，它还有两个特性，使它可以作为异步编程的完整解决方案：函数体内外的数据交换和错误处理机制。")]),a._v(" "),s("p",[s("code",[a._v("next")]),a._v("返回值的 value 属性，是 Generator 函数向外输出数据；"),s("code",[a._v("next")]),a._v("方法还可以接受参数，向 Generator 函数体内输入数据。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function * gen(x){\n    var y = yield x+2;\n    return y;\n}\n\nvar g = gen(1);\ng.next()    // {value:3,done:false}\ng.next(2)   // {value:2,done:true}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("p",[a._v("Generator 函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function * gen(x){\n    try{\n        var y = yield x+2;\n    }catch(e){\n        console.log(e);\n    }\n    return y;\n}\n\nvar g = gen(1);\ng.next();\ng.throw('出错了');\n// 出错了\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("p",[a._v("Generator 函数体外，使用指针对象的"),s("code",[a._v("throw")]),a._v("方法抛出的错误，可以被函数体内的"),s("code",[a._v("try...catch")]),a._v("代码块捕获。")]),a._v(" "),s("h4",{attrs:{id:"_3-4-异步任务的封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-异步任务的封装","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.4 异步任务的封装")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var fetch = require('node-fetch');\n\nfunction* gen(){\n    var url = 'https://api.github.com/users/github';\n    var result = yield fetch(url);\n    console.log(result.bio)\n}\n\nvar g = gen();\nvar result = g.next();\nresult.value.then(function(data){\n    return data.json();\n}).then(function(data){\n    g.next(data);\n})\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("p",[a._v("首先执行 Generator 函数，获取遍历器对象，然后使用 "),s("code",[a._v("next")]),a._v(" 方法（第二行），执行异步任务的第一阶段。")]),a._v(" "),s("h3",{attrs:{id:"四、thunk-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、thunk-函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 四、Thunk 函数")]),a._v(" "),s("p",[a._v("Thunk 函数是自动执行 Generator 函数的一种方法。")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#41-thunk-%E5%87%BD%E6%95%B0%E7%9A%84%E5%90%AB%E4%B9%89"}},[a._v("Thunk 函数的含义")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#42-js-%E8%AF%AD%E8%A8%80%E7%9A%84-thuck-%E5%87%BD%E6%95%B0"}},[a._v("js 语言的 Thuck 函数")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#43-generator-%E5%87%BD%E6%95%B0%E7%9A%84%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86"}},[a._v("Generator 函数的流程管理")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#44-thunk-%E5%87%BD%E6%95%B0%E7%9A%84%E8%87%AA%E5%8A%A8%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86"}},[a._v("Thunk 函数的自动流程管理")])])]),a._v(" "),s("h4",{attrs:{id:"_4-1-thunk-函数的含义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-thunk-函数的含义","aria-hidden":"true"}},[a._v("#")]),a._v(" 4.1 Thunk 函数的含义")]),a._v(" "),s("p",[a._v("编译器的“传名调用”实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 Thunk 函数。")]),a._v(" "),s("h4",{attrs:{id:"_4-2-js-语言的-thuck-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-js-语言的-thuck-函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 4.2 js 语言的 Thuck 函数")]),a._v(" "),s("p",[a._v("经过转换器处理，它变成了一个单参数函数，只接受回调函数作为参数。这个单参数版本，就叫做 Thunk 函数。")]),a._v(" "),s("p",[a._v("Thunk 函数转换器。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// ES5版本\nvar Thunk = function(fn){\n    return function(){\n        var args = Array.prototype.slice.call(arguments);\n        return function (callback){\n            args.push(callback);\n            return fn.apply(this,args);\n        }\n    };\n}\n\n// ES6版本\nconst Thunk = function(fn){\n    return function(...args){\n        return function(callback){\n            return fn.call(this,...args,callback);\n        }\n    }\n};\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br")])]),s("h4",{attrs:{id:"_4-3-generator-函数的流程管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-generator-函数的流程管理","aria-hidden":"true"}},[a._v("#")]),a._v(" 4.3 Generator 函数的流程管理")]),a._v(" "),s("p",[a._v("Thunk 函数可以用于 Generator 函数的自动流程管理。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var fs = requires('fs');\nvar thunkify = require('thunkify');\nvar readFileThunk = thunkify(fs.readFile);\n\nvar gen = function* (){\n    var r1 = yield readFileThunk('/etc/fstab');\n    console.log(r1.toString());\n    console.log(r2.toString())\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("h4",{attrs:{id:"_4-4-thunk-函数的自动流程管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-thunk-函数的自动流程管理","aria-hidden":"true"}},[a._v("#")]),a._v(" 4.4 Thunk 函数的自动流程管理")]),a._v(" "),s("p",[a._v("基于 Thunk 函数的 Generator 执行器。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function run(fn){\n    var gen = fn();\n\n    function next(err,data){\n        var result = gen.next(data);\n        if(result.done)  return;\n        result.value(next);\n    }\n    next();\n}\n\nfunction* g() {\n  // ...\n}\n\nrun(g);\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br")])]),s("h3",{attrs:{id:"五、co-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、co-函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 五、co 函数")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#51-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95"}},[a._v("基本用法")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#52-co-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8E%9F%E7%90%86"}},[a._v("co 模块的原理")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#53-co-%E6%A8%A1%E5%9D%97%E7%9A%84%E6%BA%90%E7%A0%81"}},[a._v("co 模块的源码")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#54-%E5%A4%84%E7%90%86%E5%B9%B6%E5%8F%91%E7%9A%84%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C"}},[a._v("处理并发的异步操作")])])]),a._v(" "),s("h4",{attrs:{id:"_5-1-基本用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-基本用法","aria-hidden":"true"}},[a._v("#")]),a._v(" 5.1 基本用法")]),a._v(" "),s("p",[s("code",[a._v("co")]),a._v("函数返回一个"),s("code",[a._v("Promise")]),a._v("对象，因此可以用"),s("code",[a._v("then")]),a._v("方法添加回调函数。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("co.(gen).then(function(){\n    console.log('Generator 函数执行完成');\n})\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h4",{attrs:{id:"_5-2-co-模块的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-co-模块的原理","aria-hidden":"true"}},[a._v("#")]),a._v(" 5.2 co 模块的原理")]),a._v(" "),s("p",[a._v("Generator 是一个异步操作的容器。它的自动执行需要一种机制，当异步操作有了结果，能够自动交回执行权。")]),a._v(" "),s("p",[a._v("两种方法可以做到这一点")]),a._v(" "),s("ol",[s("li",[a._v("回调函数。将异步操作包装成 Thunk 函数，在回调函数里面交回执行权。")]),a._v(" "),s("li",[a._v("Promise 对象。将异步操作包装成 Promise 对象，用"),s("code",[a._v("then")]),a._v("方法交回执行权。")])]),a._v(" "),s("p",[a._v("co 模块其实就是将两种自动执行器（Thunk 函数和 Promise 对象），包装成一个模块。")]),a._v(" "),s("h4",{attrs:{id:"_5-3-co-模块的源码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-co-模块的源码","aria-hidden":"true"}},[a._v("#")]),a._v(" 5.3 co 模块的源码")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("co")]),a._v(" 函数接受 Generator 函数作为参数，返回一个 Promise 对象。")]),a._v(" "),s("li",[s("code",[a._v("co")]),a._v(" 先检查参数 gen 是否为 Generator 函数。如果是，就执行该函数，得到一个内部指针对象；如果不是就返回，并将 Promise 对象的状态改为 resolved。")]),a._v(" "),s("li",[s("code",[a._v("co")]),a._v(" 将 Generator 函数的内部指针对象的 next 方法，包装成 "),s("code",[a._v("onFulfilled")]),a._v(" 函数。这主要是为了能够捕捉抛出的错误。")]),a._v(" "),s("li",[a._v("next 函数，它会反复调用自身。")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function co(gen){\n    var ctx = this;\n    return new Promise(function(resolve,reject){\n        if( type gen === 'function') gen = gen.call(ctx);\n        if(!gen || typeof gen.next !=='function') return resolve(gen);\n\n        onFulfilled();\n        function onFulfilled(res){\n            var ret;\n            try{\n                ret = gen.next(res);\n            }catch(e){\n                return reject(e);\n            }\n            next(ret);\n        }\n\n        function next(ret){\n            if (ret.done) return resolve(ret.value);\n            var value = toPromise.call(ctx, ret.value);\n            if (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n            return onRejected(\n                new TypeError(\n                'You may only yield a function, promise, generator, array, or object, '\n                + 'but the following object was passed: \"'\n                + String(ret.value)\n                + '\"'\n                )\n            );\n        }\n    });\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br")])]),s("h4",{attrs:{id:"_5-4-处理并发的异步操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-处理并发的异步操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 5.4 处理并发的异步操作")]),a._v(" "),s("p",[a._v("co 支持迸发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// 数组的写法\nco(function* (){\n    var res = yield[\n        Promise.resolve(1),\n        Promise.resolve(2)\n    ];\n    console.log(res);\n}).catch(onerror);\n\n\n// 对象的写法\nco(function*() {\n    var res = yield{\n        1:Promise.resolve(1),\n        2:Promise.resolve(2)\n    };\n    console.log(res);\n}).catch(onerror);\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br")])]),s("h3",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[a._v("#")]),a._v(" 参考资料")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/generator-async",target:"_blank",rel:"noopener noreferrer"}},[a._v("ECMAScript 6 入门"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://yjhenan.gitbooks.io/-ecmascript-6/content/docs/generator-async.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("《ECMAScript 6 入门》 第三版"),s("OutboundLink")],1)])]),a._v(" "),s("h2",{attrs:{id:"联系作者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#联系作者","aria-hidden":"true"}},[a._v("#")]),a._v(" 联系作者")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("p",[a._v("\n        平凡世界，贵在坚持。\n    ")]),a._v(" "),s("img",{attrs:{src:a.$withBase("/about/contact.png")}})])])}),[],!1,null,null,null);n.default=r.exports}}]);